Unity Editor version:    2022.3.2f1 (d74737c6db50)
Branch:                  2022.3/staging
Build type:              Release
Batch mode:              YES
macOS version:           Version 13.4.1 (c) (Build 22F770820d)
Darwin version:          22.5.0
Architecture:            arm64
Running under Rosetta:   NO
Available memory:        16384 MB
[Licensing::Module] Trying to connect to existing licensing client channel...
[Licensing::IpcConnector] Connection attempt to the License Client on channel: "LicenseClient-elain" failed because channel doesn't exist; code: "0x80000002"
Launching external process: /Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/Frameworks/UnityLicensingClient.app/Contents/MacOS/Unity.Licensing.Client
[Licensing::Module] Successfully launched the LicensingClient (PId: 2036)
[Licensing::IpcConnector] Successfully connected to the License Client on channel: "LicenseClient-elain"
[Licensing::Client] Error: Code 1 while verifying Licensing Client signature (process Id: 2036, path: "/Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/Frameworks/UnityLicensingClient.app/Contents/MacOS/Unity.Licensing.Client")
[Licensing::Module] Error: LicensingClient has failed validation; ignoring
[Licensing::Client] Handshaking with LicensingClient:
  Version:                 1.12.1+9338cad
  Session Id:              a409fd361a0840a5b3a2a0a6d9792fe9
  Correlation Id:          3e5712ab8081353a4940cbfcd8f46c4c
  External correlation Id: 6774622902708491515
  Machine Id:              kHRGcfY18P9VrCXDERpMtLYMhfk=
[Licensing::Module] Successfully connected to LicensingClient on channel: "LicenseClient-elain" (connect: 1.76s, validation: 0.17s, handshake: 0.02s)
[Licensing::IpcConnector] Successfully connected to the License Notification on channel: "LicenseClient-elain-notifications"
[Licensing::Module] Connected to LicensingClient (PId: 2036, launch time: 0.00, total connection time: 1.95s)
[Licensing::Module] Error: Access token is unavailable; failed to update
[Licensing::Client] Successfully updated license
[Licensing::Client] Successfully resolved entitlements
[Licensing::Module] Serial number assigned to: "F4-Z2EQ-WMD5-PKU6-UFVC-XXXX"
Pro License: NO
Launching external process: /Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/Resources/PackageManager/Server/UnityPackageManager

COMMAND LINE ARGUMENTS:
/Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/MacOS/Unity
-batchmode
-nographics
-logFile
logRunSetup.txt
-projectPath
/Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp
-executeMethod
WwiseSetupWizard.RunSetup
-quit
Successfully changed project path to: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp
/Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp
[UnityMemory] Configuration Parameters - Can be set up in boot.config
    "memorysetup-bucket-allocator-granularity=16"
    "memorysetup-bucket-allocator-bucket-count=8"
    "memorysetup-bucket-allocator-block-size=33554432"
    "memorysetup-bucket-allocator-block-count=8"
    "memorysetup-main-allocator-block-size=16777216"
    "memorysetup-thread-allocator-block-size=16777216"
    "memorysetup-gfx-main-allocator-block-size=16777216"
    "memorysetup-gfx-thread-allocator-block-size=16777216"
    "memorysetup-cache-allocator-block-size=4194304"
    "memorysetup-typetree-allocator-block-size=2097152"
    "memorysetup-profiler-bucket-allocator-granularity=16"
    "memorysetup-profiler-bucket-allocator-bucket-count=8"
    "memorysetup-profiler-bucket-allocator-block-size=33554432"
    "memorysetup-profiler-bucket-allocator-block-count=8"
    "memorysetup-profiler-allocator-block-size=16777216"
    "memorysetup-profiler-editor-allocator-block-size=1048576"
    "memorysetup-temp-allocator-size-main=16777216"
    "memorysetup-job-temp-allocator-block-size=2097152"
    "memorysetup-job-temp-allocator-block-size-background=1048576"
    "memorysetup-job-temp-allocator-reduction-small-platforms=262144"
    "memorysetup-allocator-temp-initial-block-size-main=262144"
    "memorysetup-allocator-temp-initial-block-size-worker=262144"
    "memorysetup-temp-allocator-size-background-worker=32768"
    "memorysetup-temp-allocator-size-job-worker=262144"
    "memorysetup-temp-allocator-size-preload-manager=33554432"
    "memorysetup-temp-allocator-size-nav-mesh-worker=65536"
    "memorysetup-temp-allocator-size-audio-worker=65536"
    "memorysetup-temp-allocator-size-cloud-worker=32768"
    "memorysetup-temp-allocator-size-gi-baking-worker=262144"
    "memorysetup-temp-allocator-size-gfx=262144"
Player connection [8345804288] Host "[IP] 192.168.2.40 [Port] 55496 [Flags] 2 [Guid] 1479650672 [EditorId] 1479650672 [Version] 1048832 [Id] OSXEditor(0,Kevins-MBP) [Debug] 1 [PackageName] OSXEditor [ProjectName] Editor" joined multi-casting on [225.0.0.222:54997]...

Player connection [8345804288] Host "[IP] 192.168.2.40 [Port] 55496 [Flags] 2 [Guid] 1479650672 [EditorId] 1479650672 [Version] 1048832 [Id] OSXEditor(0,Kevins-MBP) [Debug] 1 [PackageName] OSXEditor [ProjectName] Editor" joined alternative multi-casting on [225.0.0.222:34997]...

[Package Manager] UpmClient::Connect -- Connected to IPC stream "Upm-2035" after 0.5 seconds.
[Licensing::Client] Successfully resolved entitlements
[Package Manager] Restoring resolved packages state from cache
[Licensing::Client] Successfully resolved entitlement details
[Package Manager] Registered 63 packages:
  Packages from [https://packages.unity.com]:
    com.unity.ai.navigation@1.1.3 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.ai.navigation@1.1.3)
    com.unity.collab-proxy@2.0.4 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.collab-proxy@2.0.4)
    com.unity.ide.rider@3.0.21 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.ide.rider@3.0.21)
    com.unity.ide.visualstudio@2.0.18 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.ide.visualstudio@2.0.18)
    com.unity.ide.vscode@1.2.5 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.ide.vscode@1.2.5)
    com.unity.nuget.newtonsoft-json@3.2.1 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1)
    com.unity.test-framework@1.1.33 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.test-framework@1.1.33)
    com.unity.textmeshpro@3.0.6 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.textmeshpro@3.0.6)
    com.unity.timeline@1.7.4 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.timeline@1.7.4)
    com.unity.visualscripting@1.8.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.visualscripting@1.8.0)
    com.unity.ext.nunit@1.0.6 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.ext.nunit@1.0.6)
    com.unity.mobile.android-logcat@1.3.2 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.mobile.android-logcat@1.3.2)
    com.unity.adaptiveperformance@4.0.1 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.adaptiveperformance@4.0.1)
    com.unity.mobile.notifications@2.2.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.mobile.notifications@2.2.0)
    com.unity.2d.animation@9.0.3 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.2d.animation@9.0.3)
    com.unity.2d.pixel-perfect@5.0.3 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3)
    com.unity.2d.psdimporter@8.0.2 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.2d.psdimporter@8.0.2)
    com.unity.2d.spriteshape@9.0.2 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.2d.spriteshape@9.0.2)
    com.unity.2d.tilemap.extras@3.1.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.2d.tilemap.extras@3.1.0)
    com.unity.2d.aseprite@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.2d.aseprite@1.0.0)
    com.unity.subsystemregistration@1.1.1 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.subsystemregistration@1.1.1)
    com.unity.profiling.core@1.0.2 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.profiling.core@1.0.2)
    com.unity.2d.common@8.0.1 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.2d.common@8.0.1)
    com.unity.mathematics@1.2.6 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.mathematics@1.2.6)
    com.unity.collections@1.2.4 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.collections@1.2.4)
    com.unity.burst@1.8.4 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.burst@1.8.4)
  Built-in packages:
    com.unity.feature.2d@2.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.feature.2d@2.0.0)
    com.unity.feature.mobile@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.feature.mobile@1.0.0)
    com.unity.ugui@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.ugui@1.0.0)
    com.unity.modules.ai@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.ai@1.0.0)
    com.unity.modules.androidjni@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.androidjni@1.0.0)
    com.unity.modules.animation@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.animation@1.0.0)
    com.unity.modules.assetbundle@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.assetbundle@1.0.0)
    com.unity.modules.audio@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.audio@1.0.0)
    com.unity.modules.cloth@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.cloth@1.0.0)
    com.unity.modules.director@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.director@1.0.0)
    com.unity.modules.imageconversion@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.imageconversion@1.0.0)
    com.unity.modules.imgui@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.imgui@1.0.0)
    com.unity.modules.jsonserialize@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.jsonserialize@1.0.0)
    com.unity.modules.particlesystem@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.particlesystem@1.0.0)
    com.unity.modules.physics@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.physics@1.0.0)
    com.unity.modules.physics2d@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.physics2d@1.0.0)
    com.unity.modules.screencapture@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.screencapture@1.0.0)
    com.unity.modules.terrain@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.terrain@1.0.0)
    com.unity.modules.terrainphysics@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.terrainphysics@1.0.0)
    com.unity.modules.tilemap@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.tilemap@1.0.0)
    com.unity.modules.ui@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.ui@1.0.0)
    com.unity.modules.uielements@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.uielements@1.0.0)
    com.unity.modules.umbra@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.umbra@1.0.0)
    com.unity.modules.unityanalytics@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.unityanalytics@1.0.0)
    com.unity.modules.unitywebrequest@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.unitywebrequest@1.0.0)
    com.unity.modules.unitywebrequestassetbundle@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.unitywebrequestassetbundle@1.0.0)
    com.unity.modules.unitywebrequestaudio@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.unitywebrequestaudio@1.0.0)
    com.unity.modules.unitywebrequesttexture@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.unitywebrequesttexture@1.0.0)
    com.unity.modules.unitywebrequestwww@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.unitywebrequestwww@1.0.0)
    com.unity.modules.vehicles@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.vehicles@1.0.0)
    com.unity.modules.video@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.video@1.0.0)
    com.unity.modules.vr@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.vr@1.0.0)
    com.unity.modules.wind@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.wind@1.0.0)
    com.unity.modules.xr@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.xr@1.0.0)
    com.unity.modules.subsystems@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.modules.subsystems@1.0.0)
    com.unity.2d.sprite@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.2d.sprite@1.0.0)
    com.unity.2d.tilemap@1.0.0 (location: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.2d.tilemap@1.0.0)
[Subsystems] No new subsystems found in resolved package list.
Package Manager log level set to [2]
[Package Manager] Done registering packages in 0.13 seconds
Refreshing native plugins compatible for Editor in 22.51 ms, found 3 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Initialize engine version: 2022.3.2f1 (d74737c6db50)
[Subsystems] Discovering subsystems at path /Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/Resources/UnitySubsystems
[Subsystems] Discovering subsystems at path /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Assets
Forcing GfxDevice: Null
GfxDevice: creating device client; threaded=0; jobified=0
NullGfxDevice:
    Version:  NULL 1.0 [1.0]
    Renderer: Null Device
    Vendor:   Unity Technologies
[Licensing::Client] Successfully resolved entitlements
Initialize mono
Mono path[0] = '/Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/Managed'
Mono path[1] = '/Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/MonoBleedingEdge/lib/mono/unityjit-macos'
Mono config path = '/Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/MonoBleedingEdge/etc'
Using monoOptions --debugger-agent=transport=dt_socket,embedding=1,server=y,suspend=n,address=127.0.0.1:56035
Using cacheserver namespaces - metadata:defaultmetadata, artifacts:defaultartifacts
Using cacheserver namespaces - metadata:defaultmetadata, artifacts:defaultartifacts
ImportWorker Server TCP listen port: 0
Begin MonoManager ReloadAssembly
Registering precompiled unity dll's ...
Register platform support module: /Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/PlaybackEngines/MacStandaloneSupport/UnityEditor.OSXStandalone.Extensions.dll
Register platform support module: /Applications/Unity/Hub/Editor/2022.3.2f1/PlaybackEngines/WindowsStandaloneSupport/UnityEditor.WindowsStandalone.Extensions.dll
Registered in 0.003208 seconds.
- Loaded All Assemblies, in  0.242 seconds
Native extension for WindowsStandalone target not found
Native extension for OSXStandalone target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  0.177 seconds
Domain Reload Profiling: 419ms
	BeginReloadAssembly (76ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (0ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (1ms)
	RebuildCommonClasses (27ms)
	RebuildNativeTypeToScriptingClass (8ms)
	initialDomainReloadingComplete (36ms)
	LoadAllAssembliesAndSetupDomain (95ms)
		LoadAssemblies (76ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (91ms)
			TypeCache.Refresh (91ms)
				TypeCache.ScanAssembly (82ms)
			ScanForSourceGeneratedMonoScriptInfo (0ms)
			ResolveRequiredComponents (0ms)
	FinalizeReload (177ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (139ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (5ms)
			SetLoadedEditorAssemblies (5ms)
			RefreshPlugins (0ms)
			BeforeProcessingInitializeOnLoad (1ms)
			ProcessInitializeOnLoadAttributes (102ms)
			ProcessInitializeOnLoadMethodAttributes (26ms)
			AfterProcessingInitializeOnLoad (0ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (0ms)
[Licensing::Client] Successfully resolved entitlements
Application.AssetDatabase Initial Refresh Start
[ScriptCompilation] Requested script compilation because: Assembly Definition File(s) changed
[ScriptCompilation] Requested script compilation because: Assetdatabase observed changes in script compilation related files
[40m[32minfo[39m[22m[49m: Microsoft.Hosting.Lifetime[14]
      Now listening on: http://unix:/tmp/ilpp.sock-72c75b6c12fc9a0d2ea6354f8955f89d
[40m[32minfo[39m[22m[49m: Microsoft.Hosting.Lifetime[0]
      Application started. Press Ctrl+C to shut down.
[40m[32minfo[39m[22m[49m: Microsoft.Hosting.Lifetime[0]
      Hosting environment: Production
[40m[32minfo[39m[22m[49m: Microsoft.Hosting.Lifetime[0]
      Content root path: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/
[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/2 POST http://ilpp/UnityILPP.PostProcessing/Ping application/grpc -
[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
      Executing endpoint 'gRPC - /UnityILPP.PostProcessing/Ping'
[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]
      Executed endpoint 'gRPC - /UnityILPP.PostProcessing/Ping'
[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/2 POST http://ilpp/UnityILPP.PostProcessing/Ping application/grpc - - 200 - application/grpc 37.8167ms
Starting: /Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/bee_backend --dont-print-to-structured-log --ipc --defer-dag-verification --dagfile="Library/Bee/200b0aE.dag" --continue-on-failure --profile="Library/Bee/backend1.traceevents" ScriptAssemblies
WorkingDir: /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp
DisplayProgressbar: Compiling Scripts
[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/2 POST http://ilpp/UnityILPP.PostProcessing/ConfigurePostProcessors application/grpc -
[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
      Executing endpoint 'gRPC - /UnityILPP.PostProcessing/ConfigurePostProcessors'
[40m[1m[33mwarn[39m[22m[49m: Unity.ILPP.Runner.PostProcessingAssemblyLoadContext[0]
      Assembly system.runtime.interopservices.windowsruntime has duplicate hint path. Ignoring "/Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/UnityReferenceAssemblies/unity-4.8-api/Facades/System.Runtime.InteropServices.WindowsRuntime.dll" in favor of "/Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/NetStandard/Extensions/2.0.0/System.Runtime.InteropServices.WindowsRuntime.dll"
[40m[1m[33mwarn[39m[22m[49m: Unity.ILPP.Runner.PostProcessingAssemblyLoadContext[0]
      Assembly system.componentmodel.composition has duplicate hint path. Ignoring "/Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/UnityReferenceAssemblies/unity-4.8-api/System.ComponentModel.Composition.dll" in favor of "/Applications/Unity/Hub/Editor/2022.3.2f1/Unity.app/Contents/NetStandard/compat/2.1.0/shims/netfx/System.ComponentModel.Composition.dll"
[40m[32minfo[39m[22m[49m: Unity.ILPP.Runner.PostProcessingAssemblyLoadContext[0]
      Resolved Unity.Burst.Cecil, Version=0.11.4.0, Culture=neutral, PublicKeyToken=50cebf1cceb9d05e with Library/PackageCache/com.unity.burst@1.8.4/Unity.Burst.CodeGen/Unity.Burst.Cecil.dll
[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]
      Executed endpoint 'gRPC - /UnityILPP.PostProcessing/ConfigurePostProcessors'
[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/2 POST http://ilpp/UnityILPP.PostProcessing/ConfigurePostProcessors application/grpc - - 200 - application/grpc 20.9145ms
ExitCode: 0 Duration: 3s613ms
[627/851    0s] ILPP-Configuration Library/ilpp-configuration.nevergeneratedoutput
[811/851    2s] Csc Library/Bee/artifacts/200b0aE.dag/AK.Wwise.Unity.API.dll (+2 others)
[815/851    0s] Csc Library/Bee/artifacts/200b0aE.dag/AK.Wwise.Unity.API.WwiseTypes.dll (+2 others)
[819/851    0s] Csc Library/Bee/artifacts/200b0aE.dag/AK.Wwise.Unity.Timeline.dll (+2 others)
[823/851    0s] Csc Library/Bee/artifacts/200b0aE.dag/Ak.Wwise.Api.WAAPI.dll (+2 others)
[824/851    0s] Csc Library/Bee/artifacts/200b0aE.dag/AK.Wwise.Unity.MonoBehaviour.dll (+2 others)
[831/851    0s] Csc Library/Bee/artifacts/200b0aE.dag/AK.Wwise.Unity.API.Editor.dll (+2 others)
[835/851    0s] Csc Library/Bee/artifacts/200b0aE.dag/AK.Wwise.Unity.Timeline.Editor.dll (+2 others)
[839/851    0s] Csc Library/Bee/artifacts/200b0aE.dag/AK.Wwise.Unity.MonoBehaviour.Editor.dll (+2 others)
*** Tundra build success (3.60 seconds), 9 items updated, 851 evaluated
AssetDatabase: script compilation time: 4.168658s
Begin MonoManager ReloadAssembly
Total cache size 151118188
Total cache size after purge 151118188
Symbol file LoadedFromMemory doesn't match image /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/YamlDotNet/Unity.VisualScripting.YamlDotNet.dll
Symbol file LoadedFromMemory doesn't match image /Users/elain/Developing/GAMEDEV/GalaxyRush_WwiseIntegrationTemp/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/DotNetZip/Unity.VisualScripting.IonicZip.dll
Symbol file LoadedFromMemory is not a mono symbol file
- Loaded All Assemblies, in  0.508 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 InitialRefreshV2(bool, bool)
 #9 Application::InitializeProject()
 #10 NoGraphicsMain()
 #11 EditorMain(int, char const**)
 #12 main
 #13 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 InitialRefreshV2(bool, bool)
 #9 Application::InitializeProject()
 #10 NoGraphicsMain()
 #11 EditorMain(int, char const**)
 #12 main
 #13 start

Refreshing native plugins compatible for Editor in 11.00 ms, found 22 plugins.
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 ScriptingInitializer::InitializeRegisteredScripts()
 #5 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 InitialRefreshV2(bool, bool)
 #8 Application::InitializeProject()
 #9 NoGraphicsMain()
 #10 EditorMain(int, char const**)
 #11 main
 #12 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 ScriptingInitializer::InitializeRegisteredScripts()
 #5 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 InitialRefreshV2(bool, bool)
 #8 Application::InitializeProject()
 #9 NoGraphicsMain()
 #10 EditorMain(int, char const**)
 #11 main
 #12 start

Refreshing native plugins compatible for Editor in 4.12 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Start importing ProjectSettings/ProjectSettings.asset using Guid(00000000000000004000000000000000) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1ef39589a2a9dc9d6809866b4a877359') in 0.018679 seconds
Start importing ProjectSettings/AudioManager.asset using Guid(00000000000000006000000000000000) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5f2c107aea522354a935e13982a0cbac') in 0.000649 seconds
Start importing Assets/StreamingAssets using Guid(770057b11ef214d8a96b88c8ce244863) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'dab97f01cf80496ab11a73e7066ea155') in 0.000737 seconds
Start importing Assets/WwiseProject using Guid(6bed5c02126534369b04125313683370) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '53bfa56219c224fc04c842df228184ad') in 0.000550 seconds
Start importing Assets/Wwise using Guid(7be363e18517e47feb1d052818e64786) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8a605b2426ea0e00f5216ab2f652f11d') in 0.000519 seconds
Start importing Assets/Wwise/Documentation using Guid(4160881b336da4ebdaff9b046dc20b95) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '474ae3a9f689d2d6761ef554d6a0a13a') in 0.000516 seconds
Start importing Assets/Wwise/Gizmos using Guid(71de3a7af4ab24d0a893c1b86e6ee138) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ed8daf031e165c65cd5859f44a71be03') in 0.000503 seconds
Start importing Assets/Wwise/MonoBehaviour using Guid(34ac7d33c800549f4b36e3d51997b57e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1f596901cdb4cc8c6cdf8a2046a95f07') in 0.000762 seconds
Start importing Assets/Wwise/Timeline using Guid(452440706cdcb497eb722600737f4dac) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ea816e4cc154ff92e61090db70d7e7ea') in 0.000685 seconds
Start importing Assets/WwiseProject/Galaxy Rush using Guid(5a50b1c76cadd44d5bcfcbd47293eff9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd8e6a09b808d04d289d971ad1d6a5f9e') in 0.000657 seconds
Start importing Assets/Wwise/Tools using Guid(9a1626ffe27cc422b8001a5c5a44213b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '548aa08c670274bb01a9860ab1393a6a') in 0.000595 seconds
Start importing Assets/Wwise/API using Guid(8e7c136b654f74fb5aeb11c2cc8b06e5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '51c478a2705138aa6f1d616927dfa58d') in 0.000516 seconds
Start importing Assets/Wwise/API/Editor using Guid(f0429603488884be594818957a3c3f13) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7ab545423e7fda5850b674a61370079d') in 0.000496 seconds
Start importing Assets/WwiseProject/Galaxy Rush/SoundBanks using Guid(01bfc732c291744ae8e9c0903a8d1f51) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '26dcd8bfab1a4baa0050e459b32447be') in 0.000503 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Events using Guid(72b8cf88180034c0eada3ebe4315732f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '040b01e43da761efc1bd547f7e3035e1') in 0.000649 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor using Guid(b20bc21ed4eeb427b8ddb6d03633b20a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3425f19eb486163fa151d1bb0bc98f82') in 0.000800 seconds
Start importing Assets/Wwise/Timeline/Editor using Guid(03cb1a65ac2fc4f6cab1bba7959f2fc1) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ae10bb2c692254efa8ac978814f4dcb5') in 0.000549 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Triggers using Guid(7360ad04588b344b7a995216c94c5085) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '953b63063664513acb46f20bb6a6320a') in 0.000522 seconds
Start importing Assets/WwiseProject/Galaxy Rush/GeneratedSoundBanks using Guid(d337f69059176492db761ecc0c4d4c88) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'af89ef994672763b689b8dec4764ba29') in 0.000523 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Presets using Guid(74fce48bb6b044a95a581934906c037c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '028d04f6687853a3606952bb6313d458') in 0.000508 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Conversion Settings using Guid(94621b25da2fd49cb907bcf58872c909) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9528379f6a0d940e7def33a6dd8f9c5e') in 0.000759 seconds
Start importing Assets/Wwise/Timeline/Runtime using Guid(94a5f788b55a7488f9fac2dffc77787f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f5149176a23fd4e784122a768aa4c48c') in 0.000534 seconds
Start importing Assets/Wwise/Documentation/Windows using Guid(f4d044cf050204e49a3cab0689cc7931) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cf867063c4d134e5459b9747562193f6') in 0.000746 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Control Surface Sessions using Guid(051a4bd450de34590a2a26ec84373dd9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1aa698aa379067fbe66af766e0bb0aed') in 0.000613 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Soundcaster Sessions using Guid(c53112143b5c84d368983a090df056c1) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '821595dd89924d90a56c1ffbf6473aff') in 0.000492 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Actor-Mixer Hierarchy using Guid(c5b4f024934544d44bd445e7fcf9e47b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cb842a42e2fb06a985dc293964547dcb') in 0.000537 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Audio Devices using Guid(5612c755e0385443baa4526a208bbc18) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8e8978db4487ed373a887993925bb0dd') in 0.000837 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Queries using Guid(766e2e299ee8947aaac9204d423db18f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9dbaebc16677a14d8c5394b34d05d298') in 0.000498 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime using Guid(d7b5c221b8fb643fcb46948087ad42f9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4c26c1338354ded05e07a86da547cb4c') in 0.000612 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Originals using Guid(58378c4bc48324085836ce3e3591be38) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3e9d99cb8924c8f9405389a459b8a429') in 0.000658 seconds
Start importing Assets/Wwise/API/Runtime using Guid(9928c94f97e80434d9e51f3cee4aaa12) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4ed5950137f707525f49be6556c1ca2c') in 0.000773 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Mixing Sessions using Guid(c9c77b517c85146648c72046e70201c3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bb32c030569d601630afdf34762cdc04') in 0.000516 seconds
Start importing Assets/WwiseProject/Galaxy Rush/States using Guid(4a515c54e556248dca897b32090c7921) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a4183e216623f1ea6b76b90173e4c3a9') in 0.000497 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Master-Mixer Hierarchy using Guid(6a7596198f0dd4aacb6b22c936d5d472) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a193cca6edbb84a6f4ed1deb033c4abf') in 0.000493 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Interactive Music Hierarchy using Guid(fa35938afa6ab42bbb37514f8a4c8880) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'eb7d5d393f04297e71ae34d18fa2c230') in 0.000556 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Attenuations using Guid(db187ec68ab3548af9f237d1186e595c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b0985d430aa0af3ae2ee67f668adc028') in 0.000520 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Switches using Guid(2c2e6330308374f4cad05ef7e05a6705) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1d277df01bce487738716132f33b3d3f') in 0.000748 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Game Parameters using Guid(eccf3ef15845f46f5819ff883b313096) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c9f6bbc8fef15d1e5a3d02934c58de21') in 0.000716 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Virtual Acoustics using Guid(ad6cdf8c86a874168a485fbe095f8812) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '02cfdc063ad35dae0dccd3327b291e8a') in 0.000585 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Effects using Guid(0eb361a0813e34f068003e09839b3f9d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4bd6daf8f0034ac4492a7fc653de7865') in 0.000518 seconds
Start importing Assets/Wwise/Documentation/AppleCommon using Guid(2e515b8f2441448f19b0b609eb600de7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9f709b3aab4845cc654d199f0113b7c9') in 0.000511 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Modulators using Guid(3e78c69b1fa6644f8a297574d2e7cc2f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '72b54059a273147407a98019657c2e09') in 0.000522 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Metadata using Guid(0fd7861a724f641dea2b2e7240e1e0e8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f47ff9d95a409532019632ab0d690fcc') in 0.000508 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Dynamic Dialogue using Guid(3f26aadc9a9164089ac091938c32732c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '17650ea64a68c9d05ad10af249f30338') in 0.000613 seconds
Start importing Assets/Wwise/Documentation/AppleCommon/ko using Guid(50929811e52fe49dba1e1eb217804158) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'fad78dc4c1584f1cacdc337af786a23c') in 0.000700 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/EditorPlatformHelpers using Guid(b038abf1e22804da3929e38999b2b579) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd0eb0b5f14bfffb8e86a1dd894ad105e') in 0.000555 seconds
Start importing Assets/Wwise/Documentation/AppleCommon/en using Guid(62b05b59fe46c442989ac9da53633259) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2e69a8b7bc1374e87a520ce3a594640e') in 0.000581 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Originals/Voices using Guid(23fc835e08dea4bc69da81f4f37f779c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0a89202a8bd374b67937fd32e6c34656') in 0.000506 seconds
Start importing Assets/Wwise/API/Runtime/Generated using Guid(6322fb91c1ca44657952f3dcd641619c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'dac217ba67dcb50119d2635dd8f186c3') in 0.000547 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/WwiseSetupWizard using Guid(94fdfcd5e8a454918bc3d98f38925de3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '937a4d4b58a7dd038824942e019592f5') in 0.001065 seconds
Start importing Assets/Wwise/API/Runtime/Plugins using Guid(b4526baaf9f554cb2abaf4bec23eed81) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '39ba3417c316bcddffdc1dc862de1fa2') in 0.000513 seconds
Start importing Assets/Wwise/API/Editor/WwiseMenu using Guid(77e1794b0904348b5a3c8bd0f8cef709) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8ca0a97e70835f0043a9bce8b3bed5c4') in 0.000482 seconds
Start importing Assets/Wwise/Documentation/AppleCommon/zh using Guid(77cac1b46085340629edb09886f0c5d0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5b98a295a98b1bea43e03f7f6704ae32') in 0.000723 seconds
Start importing Assets/Wwise/Documentation/Windows/ja using Guid(c7b59e6ed8a174e7e9e44e03182ef132) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2c69aa95ad58b0d73222b579fef2988d') in 0.000632 seconds
Start importing Assets/Wwise/Documentation/Windows/ko using Guid(b909880bdd388400bb79e31505651b3e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '078c166ff69dc0eabe0f89ca7882e6d2') in 0.000582 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten using Guid(1a5fd5a0e40fc4b0fac86be3db62cbd0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c1867fa8a6df357f5ffc107bc95821ac') in 0.000506 seconds
Start importing Assets/WwiseProject/Galaxy Rush/GeneratedSoundBanks/Windows using Guid(fb71a1f943e614f0aa5db7ddfd0d3817) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9fcda2669060f677285f0bd6f537bd32') in 0.000517 seconds
Start importing Assets/Wwise/Documentation/AppleCommon/ja using Guid(1c74eaa9ee99a46bcaebe9cca92f8676) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e08648258a27496100bda01385c94218') in 0.000524 seconds
Start importing Assets/Wwise/API/Editor/WwiseTypes using Guid(2c2d7b2c2725d40f1a2220d1c454115b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '56de819b40f629565b676932d295fcf5') in 0.000661 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows using Guid(2d2931e6f28524841b2d582931e1b312) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '06089867efa10a7bb71c7cb74811753f') in 0.000604 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes using Guid(adaf84e6ed7584f7d83094da1ae71df4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c1f482d2a752d39d3cd2f78728e13245') in 0.000516 seconds
Start importing Assets/Wwise/Documentation/Windows/en using Guid(1e8197ac856c049598fab0582115b5ac) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3aa99b1be044c92264dcccd0c5135369') in 0.000531 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Originals/SFX using Guid(1e8e78500124446699988273a65e1547) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6e76f883640f25e9435f517abb11ac8e') in 0.000540 seconds
Start importing Assets/Wwise/Documentation/Windows/zh using Guid(9fc604f12125c43a194403f0aafe3601) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '239f8d6e7cf86fa0f7ce1391e3e22d7a') in 0.000492 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes using Guid(e2c7cf68aa08847c4b024448e860759b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bb0a166c3967f8cc112c43d79ffd1f5a') in 0.000491 seconds
Start importing Assets/Wwise/API/Editor/WwiseMenu/Common using Guid(937c2764f40394e17a054c7f3c95b104) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '329ed26e88ac9d7f360f19106139c7f8') in 0.000496 seconds
Start importing Assets/Wwise/API/Editor/WwiseMenu/Mac using Guid(e35b318d8d7674455880e1664b3a756c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7bbdc16d73895682fb4cecc3dfd3a9bb') in 0.000512 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects using Guid(477cce438ad8e49fb8bfd6c77cb41e3d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '39fb5578a2ffc252eaa0c92e77956963') in 0.000676 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons using Guid(68c09876cfa964852b2d1d38c07127ab) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2ee9551e363ead98ad66984c358f8456') in 0.000613 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Windows using Guid(098aa2948bb174e3bbdd6d130c4a86aa) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '57d33dc078fa07da92f8587ee8d1992c') in 0.000502 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/EditorPlatformHelpers/Mac using Guid(591f75fddc8a747afb706d0aa42574a7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '468bd6b18c1f7653ea03f2aabf9cfcd1') in 0.000477 seconds
Start importing Assets/Wwise/API/Editor/WwiseMenu/Windows using Guid(faadb880a43ba41afa0759d9370026dc) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '92c832f3e109aff5224c8c7b486d2d32') in 0.000415 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/EditorPlatformHelpers/Windows using Guid(0bccc586836fc4d3db88491af2d7dcf8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '34260da53e994f2f2d51a065d3a6b294') in 0.000497 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common using Guid(1bd8948eb2f7f4f69a14f0ce4b7a3466) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '40d7f061da7853ac273218342c73983c') in 0.000502 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac using Guid(4b9e03e67de2e4023bad39cba460abf3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '70f68b7d68fc4784cc63d7fbca57bf6d') in 0.000512 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Originals/Voices/English(US) using Guid(9bc743bc41ae244fca1087e66f7a652b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'aa27f29de01a25ac8d15bd3924537c35') in 0.000620 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Mac using Guid(0cfa0936cf0334653aab223cdcd219f5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7fe3c2d90c59e52b5a76220b9643d618') in 0.000507 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows using Guid(bcb1fec0b0acf4850bec45a2b22d6e10) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e85980008fa41df5dd93099f26e01e66') in 0.000503 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common using Guid(0de5d8d6d2df0439abc2488ff2fe9084) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2f8ad754a1645333a023f50633b92175') in 0.000496 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Mac using Guid(5dc7f5011984343bd84e2bb180e2fb7f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '63724daa5d519cb9763a6364bc4d7641') in 0.000522 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Windows using Guid(1e6cfff8fe3844edf900315730d45869) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b2b25835c70fae8833c02fc105e4eeef') in 0.000504 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/WAAPI using Guid(cedde411ae1954f1ca621f04abadcf88) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd1957a49eb5089cd2a6d045a50388f9f') in 0.000532 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Release using Guid(90ec5cc4fa3ae46f7b4002e339d56937) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1cadd73b9683bec147a2aaedd642e6b2') in 0.000532 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86 using Guid(c2788dc13b43d42d88068bc74213de81) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6743c56afa637493ec60f0676d89228e') in 0.000702 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Profile using Guid(23358d25586cc4845bdbb0c422517d62) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7b670924311232360766298e10930c1a') in 0.000468 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Debug using Guid(ca862a150acde47fe804f2b141394c8e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '38d16349a476df4b2727fc8a8cc2480e') in 0.000502 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP using Guid(5b4678f0e081644e3b32f3bc459898d9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '03cb9d43930220efddbfc59efefdabab') in 0.000402 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64 using Guid(6f3b506f1f5dd49a3b94cef30f399aff) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4c22d654cfa9dca942091a5679ca8bf8') in 0.000562 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays using Guid(effabe3dcca8442cfb4f3243edc12965) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7743f13b6c43b7354805ec0fd5c50232') in 0.000396 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Release using Guid(204f67f1c61714cc0957fbc713f580f8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd1968a7d2ecd8cfbfcb766d83c797892') in 0.000521 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle.dSYM using Guid(b0f1a048ac64744119d194e63ba88073) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'dd827c96ea9e68e73ef394e2bc2c12bf') in 0.000400 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Profile using Guid(71e45636e923b44c4838b37608033a4b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8c5018c82c216355d77a7a1f5d9c4539') in 0.000519 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle.dSYM using Guid(826fbf19f64dc4c8886b58534e8740bc) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '52ddf3cfd675dcdbac27b698d8c721f0') in 0.000570 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Debug using Guid(c22b927c040b1448fa77fe95559d6080) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b801018bc62a28a103036708108b3b35') in 0.000606 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Profile using Guid(44fbe52bdbabe4b06bca62282eb0a9e5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '75c1c6f206bd45d5f87740b95d1f32e3') in 0.000428 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Debug using Guid(95161a50315d945f7bfa4e6d979970a1) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '38405239d737a782e862cfef44aef662') in 0.000428 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP using Guid(37ba6ed3ab8064c4085cde108e810e82) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '557b7a416e0bf5966bca6155d544c35f') in 0.000400 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle.dSYM using Guid(0b0823f7ac665460281ea5553d635493) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4fa5fe44a459eaf7ec8860520d70b7c5') in 0.000446 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP using Guid(4e15a98ec925e45c98f21232ed0ee7e8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '27559aebd32c3b94088aa908c0c32036') in 0.000385 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Release using Guid(2fa0609ee112343e883355f2b9906cc9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8b8b3d1a1eaf7fd52330dcb044dc3c86') in 0.000430 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/IntegrationDemo using Guid(d2a046e78408248ccb823c267e7ed590) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '204ad708fa4487afa427662cba2dde5f') in 0.000390 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/IntegrationDemoMotion using Guid(75fdd180ba45d411daacbc773f49ae34) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '540bcc156fa0b4d6235eb6a9ed722a5d') in 0.000532 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle.dSYM/Contents using Guid(47ef9384ab84c4eb9a80bb46ce6e0452) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '55f45ad3fa4f7cc86ac2d27151a3902e') in 0.000510 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle.dSYM/Contents using Guid(f72d10c4034c14bd89091f76711da8aa) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '03d8fba473ea17eb2505a729b7e94ab5') in 0.000566 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/IntegrationDemoMotion using Guid(fb925466e81624b4a82f7cee4bc778b4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1d9d6d5fa589b5bea6c5b3706454772e') in 0.000410 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/IntegrationDemo using Guid(fcc8c5bf36ef045b4a629547a76da2f5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c37b6503f4429d9e24f868e26e9c166f') in 0.000398 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle.dSYM/Contents using Guid(8efb8a83dadf1476997206c4b14ff784) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'fa286c3140b1b80ed26a827298c826e4') in 0.000394 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Profile/AkSoundEngine.dll using Guid(30cfe76695924457ca26eeec9c1f31a8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '10b60443ce577ad472bff0c958f28b09') in 0.000788 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAk3DAudioBedMixer.bundle using Guid(502b72261e4754f0e978abe242c44e03) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '220870097e781679d481b581a7309328') in 0.000535 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Debug/AkSoundEngine.dll using Guid(413a3357e49be4ee28a9e3d66ee2b7ea) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'be94856980105bd9871570c81bcf9499') in 0.000539 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkSynthOne.dll using Guid(91698ff98a6214f0c877180f54f74b7a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4b2c8a63d5a0f4ebd4606ea9948ecea0') in 0.000787 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkTimeStretch.bundle using Guid(d1c2bcca9121f4a40a6a779da9d39681) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ce29bb680372af5e2d6dd5cc56191377') in 0.000725 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/iZotope.dll using Guid(f16541e8d255e41c98b7b10c90d5e63b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bb11fec1d37f279025bccbb37c5de681') in 0.000540 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/Auro.dll using Guid(a2a34216b25a04a11bcf995eee74dd65) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '02fde151677668a6ad644e7c69cd3df1') in 0.000614 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkHarmonizer.bundle using Guid(7368cacc9c2dc415d9578ae7d86ccb5e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '094eaba834d11d6010c14d17bff72724') in 0.000779 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/MSSpatial.dll using Guid(14659e23c11074be78cc58c8049bbc14) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ec8414a7cc2fe4f667c997aa052444f7') in 0.000565 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkSoundSeedAir.dll using Guid(b468942b0350b4506bd6c05ecf7dbeff) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ff5d52cd5d2c949bab67fd3d84e92a2a') in 0.000487 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkSoundSeedGrain.bundle using Guid(c4652f27c620c4a43a3c09249518fe77) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7fbbdf8c2480229e2ba0e5253e1bf182') in 0.000563 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle.dSYM/Contents/Resources using Guid(e4a933f5e62944adf9ead689792de779) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b8776240f50b0ad2756b89f92e26fc78') in 0.000531 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle using Guid(55f8101e3380b45858aa64134f726dfc) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0635ebaa1b5d3d608e478bfdea9167dc') in 0.000648 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkSoundSeedGrain.dll using Guid(758a8cc6563da4e9e875d6b6785653d0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0740c25e2fc1403cd1cc7940b1057a30') in 0.000545 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle using Guid(46bdc35bce3ef4860968922bb4abb01c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '720131e6d95ccc399dfda8c6a28790ca') in 0.000487 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/McDSP.dll using Guid(667a8c1b550e2463d8469f00158ef71b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '319acd62d90e205c1c83d30066da6823') in 0.000530 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libiZotope.bundle using Guid(96fcbf1e4149f4bfaa5a61d5244b6928) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'fa31f39f0a130d5685f80c4fd34c5274') in 0.000524 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/MSSpatial.dll using Guid(e6d988f8dbd394a0bab9f58444c666be) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4e27ec1b8c41ebb68953473041862f6e') in 0.000541 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkTremolo.bundle using Guid(f6f2bf97d803642629ceae06e240aa78) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ffae78772c2a4d618a1be1e9f1ad36e7') in 0.000572 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle.dSYM/Contents/Resources using Guid(27a2fb5a7f1654309892fbc4f923402b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '356f24b341b6704a3ab59c8670bed900') in 0.000471 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle using Guid(e76571957d2f04570aa28c26fba9a524) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3fb85970ac8c076de9462bb5855a87c0') in 0.000856 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkMotion.dll using Guid(481149b57f60143fba0c8fcf3bf4ac07) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2ec0df02f88604787fa670490f6271fd') in 0.000600 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkStereoDelay.bundle using Guid(485aeb22bbe1a4cfd973fdbc2c7efb8d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ade3c43b589f9d02f2002ae838ffa309') in 0.000669 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkSynthOne.bundle using Guid(58a88e20a56af41d6852c14191e36a2b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4fc58749cbccfc9f3dcfbeb755ec8a76') in 0.000506 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkMotion.dll using Guid(c8170aefd437c4c199bf5c3c8b5d69e6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c6cc4c97ba0ff212b8e91a7afb876a60') in 0.000498 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkConvolutionReverb.dll using Guid(f854204b5d8944308ae95a46cc90b17b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '775ce91dcd6a0efa8354e6afc4c42a1d') in 0.000511 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkReflect.bundle using Guid(39f7a51ef748b462faa074d761426fc2) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6552b0a595afc35f61f33ff0bdf3f212') in 0.000528 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkSoundSeedAir.dll using Guid(8908b152bd3b040068cac9c61a966a46) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '35ea1903bf631e456822b3abbc91027a') in 0.000713 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/iZotope.dll using Guid(c98acb1761e72487cad147372db997f7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b24b055235573a42d611d81f807a3f4f') in 0.000679 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkFlanger.bundle using Guid(4a54d273de6244fcaa6c7194a99f40e3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e379db533973aca2096b59f6283a129e') in 0.000594 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Profile/AkSoundEngine.dll using Guid(8ad93009ec910438cb3e642884ef8a8c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '632cae7cca6aa82ddf272554e696561b') in 0.000528 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkConvolutionReverb.bundle using Guid(aa8c46e4aa3dc4f079cf5160fb709ed8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a78334b3c3f37ab7bc8769cbed9f52d6') in 0.000503 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle.dSYM/Contents/Resources using Guid(6b7dc83bb87f14517b72773b0edf5b21) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '06cd39ba8c6bad78cead370cbbfdcbc3') in 0.000418 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Release/AkSoundEngine.dll using Guid(8bdcba31273d5468fbcda98cb20c5631) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '82437c6fd928157fd2e954aa3076c077') in 0.000525 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Release/AkSoundEngine.dll using Guid(fb30640adbd2540008b2bc9368692ed5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4d02a10ad2ac704e98eb200541c9e723') in 0.000465 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/Auro.dll using Guid(0cfc9575584f042b1994b2589b1c99fc) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8ea53d323731fc1a501a6af95720dbe8') in 0.000623 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkSoundSeedGrain.dll using Guid(2c552ba425bd241139b3972de9b75ab8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f57779d5465df8b6e94f073e76c4a159') in 0.000695 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkConvolutionReverb.dll using Guid(4ca5755fc35d44d3eab0bed52dec244d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a17b38a11a5183fb14262e80977579cc') in 0.000690 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAuro.bundle using Guid(5c1c53cd90d8447c2862824cc1e0b6a1) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd46546b562dedadb2d037144410c4656') in 0.000546 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkGuitarDistortion.bundle using Guid(bc0b020495a8d4caf8f33ceaeb523971) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '97e4ac4d8013195ff90ad8e59de29f93') in 0.000543 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkSynthOne.dll using Guid(6d421d49c676546ac9a3ec872c1d359b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c12875a89e2c5fcd1245fe7c9c828e6d') in 0.000545 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkRecorder.bundle using Guid(ad75faee449484f288f319a70b5c7c46) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '28309ecf926df4638a08338f33ef4b8e') in 0.000498 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/McDSP.dll using Guid(ae62b83a49da24f38acfa499c18034c6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0b314ec9072c2cd1a65fc65b40d86bff') in 0.000490 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkSoundSeedAir.bundle using Guid(febe4b432b8ec4196a06219a2767fd61) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ebf2984dfefb8c019b5fe2f54b8d2858') in 0.000576 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkPitchShifter.bundle using Guid(6f0e6d9a69c1c4324a7b267500080352) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '06971e73403aa6f31ce5ce810039c4cd') in 0.000787 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Debug/AkSoundEngine.dll using Guid(9f5c23ff54d784f178bfce825da93968) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ed73c45b6024efab1fdfd1ff9bb13752') in 0.000620 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libMcDSP.bundle using Guid(af031a8b4388e4b7d8a1bba3dfa752ae) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b542642de63b533c1524e7b687302a47') in 0.000528 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkRoomVerb.bundle using Guid(efba306497a6549f8b34f4bfc81ed19f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1798c2c5b8ba447679a73254b1dff361') in 0.000664 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle.dSYM/Contents/Resources/DWARF using Guid(03727e2e5d46546fb91d8118b7f2fff7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ca85a3956c948ace16ebcb4ba8c09e56') in 0.000608 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle.dSYM/Contents/Resources/DWARF using Guid(a9c94520245104969a9cd9b7d5dfa899) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f914c5559c7145593e37b376846dd129') in 0.000645 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle.dSYM/Contents/Resources/DWARF using Guid(afb0cf2c352b04613889c5578dc3469f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ed623a7f9c28c150a33e505293fe1047') in 0.000467 seconds
Start importing Assets/Wwise/API/Editor/AK.Wwise.Unity.API.Editor.asmdef using Guid(2324c49722a2040c08bfa72d77a84c9c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5d51a5647038fff3fbee441398e60667') in 0.001036 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/WAAPI/Ak.Wwise.Api.WAAPI.asmdef using Guid(43971ac9ab8784ae197868b9d049652e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3eb1558a8e649a4f690c4f97444d2a3b') in 0.000651 seconds
Start importing Assets/Wwise/Timeline/Editor/AK.Wwise.Unity.Timeline.Editor.asmdef using Guid(b5dbc3623445749ccb7cb1549c2660e0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2d228991c30a48e547a7b1bfde850af8') in 0.000573 seconds
Start importing Assets/Wwise/Timeline/Runtime/AK.Wwise.Unity.Timeline.asmdef using Guid(7741716ab0101411b984ce3bd05bb434) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '727ae73a43541ef4de1d9087eb184c62') in 0.000720 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/AK.Wwise.Unity.API.WwiseTypes.asmdef using Guid(69bd9f5c089ce4646b63a03ca76e7069) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5ce79cfeec8a02fb621c128b62f4f8e8') in 0.000660 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AK.Wwise.Unity.MonoBehaviour.asmdef using Guid(6c10dacedf6364b42bea60811833f761) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e2c7351d14757243b95cf3cb35437795') in 0.000802 seconds
Start importing Assets/Wwise/API/Runtime/AK.Wwise.Unity.API.asmdef using Guid(0efcc8275400d4417adff38ecfa3be8a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '75de457932fbb08f5ec0b9c1d4740cb6') in 0.000766 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AK.Wwise.Unity.MonoBehaviour.Editor.asmdef using Guid(fec939d0874154d5fa53738b205f804e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e479fbdb7b9435a9988fb55f300f71e7') in 0.000775 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects/WwiseSwitchGroupReference.cs using Guid(108c91b1ad59141649f9c484338ae198) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b3bd2c2df526d0bf44f2d4af1357efd1') in 0.001836 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMusicSyncCallbackInfo.cs using Guid(208bbf6e67a9e43e7b791e143699001d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd322526992e3d1dcb33a5949868ab427') in 0.000849 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkCallbackInfo.cs using Guid(3021938dcdb7a4aa58778a6688f48f86) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8eeb84fdd1f3483ead78d5be5d3be946') in 0.000847 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkRoomParams.cs using Guid(40970cd34b2d046b480c15b302424e57) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7852443de14f53c7caec99c578c17ed5') in 0.000726 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkChannelEmitter.cs using Guid(40cad49c2f365406aad5334efbc2f24b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b6dfa06d8f6b00b79429ea207c7dad08') in 0.000698 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMarkerCallbackInfo.cs using Guid(600ce8782d3e1484088873f4bf73f5e4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6ec6a0bfc91cab8c735205e85b819406') in 0.000755 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkGameObjListenerListDrawer.cs using Guid(701eb86744e5444fb947251eb33fd40f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '12e7df187fdff36a1a9947a243a00090') in 0.000745 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTriggerCollisionEnter.cs using Guid(905dfa4a93617499e900177eb2334198) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bdb9a8cfda5d3102de19041bc6b84814') in 0.000625 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkSpatialAudioDebugDraw.cs using Guid(a0eb34bc34ba74d569e949167c740627) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '75cf684695d94b287ca8aeefe539b88c') in 0.000673 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkDiffractionPathInfo.cs using Guid(c05dfb9086789441aadfd069c6b614b5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e5799f72b4c57b39076c2ff6ab56b6b8') in 0.000596 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkVector64.cs using Guid(d096a2c4589a8417ca1b5c593895152b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bf8238a3ddc09f212f25fc50bdb21006') in 0.000726 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkInitSettings.cs using Guid(f0821dde1706e4f939d340606be4b615) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '89ab30c8e73644bf44a40a7c590e24af') in 0.000834 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkEarlyReflections.cs using Guid(01241f19448a0482b9fe8f4c7df3a780) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4ccd40a3964df5bbdb3a3eb3dae09b01') in 0.000558 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkFloorPlane.cs using Guid(01d92babe992e484f9ff0bab4b81189f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6fc2c8ddc8ef18aa248f730db6c52003') in 0.000540 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/WAAPI/Wamp.cs using Guid(112d06cd9d4fd4426989ffee72972e54) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b41f90e71e64fc6f20c2aa5e59a5364b') in 0.000619 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Windows/AkPlatformInitSettings_Windows.cs using Guid(210fb53e5509443dca98c5804163aea4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b711eeb227fc6c7d88911350223b69c6') in 0.000706 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Windows/AkSoundEngine_Windows.cs using Guid(219f5a0b42320454ea4b856c40094b30) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '322d728587dd9b9ff660251d63f12481') in 0.000514 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkReflectionPathInfo.cs using Guid(316ac20b1cee14e7abc4cf20cef2ae7c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '28d1d66f83c5637d969934d1ed47d694') in 0.000532 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkBaseInspector.cs using Guid(413c00c41594d4ce8922a8410478d9ba) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '298cd8f119d1259875a59a8ebad38208') in 0.000891 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkBankTypeEnum.cs using Guid(51c95b4fa1db04aac8c82707e9b30fe3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '24bd7e293f1456c55d0e5496e80bc780') in 0.001767 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkObstructionOcclusion.cs using Guid(6143d93715c784c8f82cba009d375cf7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'afd31a4ac06a45b4a472551887f6d799') in 0.000499 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkSpatialAudioListenerInspector.cs using Guid(61aa4b85cf8e24a6eb05fa056cc6235d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6884b808af81c3bb3ce3fd9485dc9fc6') in 0.000502 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkExternalSourceInfoArray.cs using Guid(71a1997cf75a148dc8eb415139094075) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'aa457f6579d943699eec40cfd8f8f915') in 0.000512 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/WwiseSetupWizard/AkUnitySettingsParser.cs using Guid(71c5c8d112814426995675f2eb5cf81c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7d5da10a27bfee553d8867055f4fcb99') in 0.000538 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkSwitchInspector.cs using Guid(716be579d55f348d4bca3ff7180b4660) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9b4a7eb6b9dcdcccd9699d83ed453bca') in 0.000501 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkRamp.cs using Guid(810eb6798d894493391b7ad3142303c6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '48a1cb1ed11509dd07f405aed848bf06') in 0.000706 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkWwiseInitializationSettings.cs using Guid(91323393b073e4a1fad5801d29a212e4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f99e59aabcd4cd1424b81deca091be7d') in 0.000731 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/Ak3DAudioSinkCapabilities.cs using Guid(91b84b86d3d024459a66ad56822bedf8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1fcc8f5535a8fa2d80306bfd7a6f6e53') in 0.000536 seconds
Start importing Assets/Wwise/Timeline/Editor/AkRTPCTrackInspector.cs using Guid(91e92e5de729b4fa9a90c20c33fa2b98) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8b6caeaa2da65386911939117cf7c0a1') in 0.000512 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTriggerBase.cs using Guid(a1dbcae1fc4464f3cac8e96ca92cd8f1) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '464ea1bdebe01eb18e128078bfe648d1') in 0.000541 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects/WwiseAuxBusReference.cs using Guid(d19c71403078046deb790afbb60b50b7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '636fdb17666da7be7dd8b4021b5cbb09') in 0.000605 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkCallbackSerializer.cs using Guid(e19330efb82b541d9bfd05443a3197f8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5123a0f98751b6cbf3316cffacfd34d9') in 0.000507 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkGameObjPosOffsetData.cs using Guid(02e00b154aaab4cfc82f41384d184b5e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6e96e9bce57ed5e408fde1e9fa2826a7') in 0.000703 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkLogger.cs using Guid(022a17748f6a842e5b504e8d3610fb5e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e4ec48d82696006dc4d0191a468d10f8') in 0.000629 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkAttenuationCurveType.cs using Guid(126a18d088d7249b581e8ef0efc17381) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7c97787897475299357c70aad12822ad') in 0.000694 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/AkWwiseTreeWAAPIDataSource.cs using Guid(52510eef34b4c405fb6cd8ec914d5145) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'fbf2017b4c7c46e785574b36af0fdae1') in 0.000510 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkEventInspector.cs using Guid(52a4c44e507f0453f8f4d3aea408e46f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bd186b1b35f03d7056668a3dfc9ca12a') in 0.000524 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkObjectInfoArray.cs using Guid(62c9883ad728c4c068db6b8c033b710a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a2f1569f1ba9b27099abd95f8639d23f') in 0.000608 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/AkWwiseTreeDataSource.cs using Guid(7261b469269da482e82c543a4fa02d7b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9d319798cde94252c236de5d11bcb68f') in 0.000531 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkQueryRTPCValue.cs using Guid(82f37ddb4972a47ddb029b52b23d3740) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '364123072682e3b9b041765da4464412') in 0.000623 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Windows/AkCommunicationSettings_Windows.cs using Guid(9289276285e57443bac2ef36d26abeac) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '29b7b6fa936e226d639f8a346ba3c390') in 0.000668 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkSourceSettingsArray.cs using Guid(92aea097ef97d43f8915d086ce987b3c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd1ba0b8134f8397c23c90d16ea59503c') in 0.000653 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects/WwiseObjectType.cs using Guid(a2f68d49bb7b64da7829e3c253a77648) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2ee7e60ca77d882c3ddc5c2879d92c52') in 0.000629 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects/WwiseRtpcReference.cs using Guid(b26738c91bda84747a3639ca0318eb8c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e0de53119d157827c2c3bba799af1843') in 0.000549 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkBankManager.cs using Guid(d2a39a3f4e4c34818bcfef06f0724de0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '70493ca0a41eeefb4d3deccb67110360') in 0.000545 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkEnvironmentPortal.cs using Guid(e2018797c92054d068039b551e9b35b4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6b28d137360503528410b2d5cc03d245') in 0.000511 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMultiPositionType.cs using Guid(e2d1e5eda697444fb9689429d1d04f16) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e75c79c06b34633c89c980cd1dc1de2f') in 0.000502 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkGameObjListenerList.cs using Guid(f2517a2a16cf0443380a6a28c7163109) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '11f8806d7232cec2c78321623d4e345c') in 0.000643 seconds
Start importing Assets/Wwise/Timeline/Editor/AkEventPlayableInspector.cs using Guid(f25c78b7591c74fabbee156b4e13745d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '299b7769555ebcd79be0c49dfebab4b5') in 0.000647 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkCallbackType.cs using Guid(03f09e94503a14300ae8b79615a8baff) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4a687e92bcf0bed09ce39329cea9b003') in 0.000562 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/Ak3dData.cs using Guid(13339ae4e76d84e3380ef886c8c9704a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2559c2e0472438838cab208a4fed3360') in 0.000493 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkDynamicSequenceType.cs using Guid(1336f19f94a8242a2ba3158ec5c6bb29) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '084fb5e8946af22fc74543d65c0f9df1') in 0.000495 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkGameObjEnvironmentData.cs using Guid(23635a7c0edc8458bbb22ab6b59b73f0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e1df1cc8055fa81027123aced31a0e13') in 0.000485 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkAmbient.cs using Guid(23f8a2af3d917426d81d68a2cb89bb45) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9406251dd3367d78cea6080c3029a8a7') in 0.000500 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkPreparationType.cs using Guid(232cc3114e41b42c5946ff50c77cf718) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'af6b50661ab30f774a524a4cab244df3') in 0.000501 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkChannelConfig.cs using Guid(33f8bc2f79df545c78198d5d2e24681a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cf5c222aab6b2624cca9147dbc1dcdef') in 0.000540 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkGameObj.cs using Guid(537a037d4b72b4d55bd6ff7c41237081) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '004e19edcee0c6ff5cfb5d57ff1acbb2') in 0.000755 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Mac/AkThreadProperties_Mac.cs using Guid(538e1d6729f854d43bf0070552fa1aff) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7e2499db2300cc2489fa804f9711c983') in 0.000679 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkPositioningData.cs using Guid(63fa7ff5b2ffe40c9bac7c9586096e68) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd1b1927981524f4b2d3dd9d7fe4de11f') in 0.000535 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/MsgContext.cs using Guid(7301b189317d8415ca547e7fc69c1273) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4232444b894af5198f63a317e2e7b690') in 0.000554 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkBasePathGetter.cs using Guid(73fa36356a4134e1a855edecc59de0ca) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd44569153f6be046856c1a945978c83b') in 0.000503 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects/WwiseObjectReference.cs using Guid(83d075c5987c247e098ba38ada7df229) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '48f2765b7045fbd60c558d9c3494a283') in 0.000629 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkRadialEmitter.cs using Guid(8329478550c2c435da376ed7d2322410) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '36aca80d9512e0ca7d4028b42b5bd1c3') in 0.000524 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes/AkWwiseBank.cs using Guid(939081fca9d5e4ae18c885976e6758c1) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ecba4fcce9e682ce45da247d3a3f5ecd') in 0.000666 seconds
Start importing Assets/Wwise/API/Editor/WwiseMenu/Common/AkWwiseIdConverter.cs using Guid(934959026b8304d0387549f83e9e4143) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '309fa6010fcf830f5e5ce3d14a38607d') in 0.000736 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkBehavioralPositioningData.cs using Guid(93de0228088fb413dadf0d293c51f0f9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ad54d8d76a505ca06bae74e1e737df5e') in 0.000950 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkAudioInputManager.cs using Guid(93bfd17623ed04fd98bcdad0d856324f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9ef6203e2af77519f255e55236987ca8') in 0.000593 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkMemBankLoader.cs using Guid(a377037ddda9442ff93f0a91166600d2) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6ffcebdea1a71fa611510ac6fbf8dd56') in 0.000506 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkChannelConfigType.cs using Guid(c323bdbce586c4ac58a156bd48da6422) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '603a5618897fa4bcf9bf4b87950e95fb') in 0.000629 seconds
Start importing Assets/Wwise/Timeline/Runtime/AkRTPCTrack.cs using Guid(d33d9277109084b8c8df753f06dac54d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7fe3b65619edb02fb6ccfc68a60d403f') in 0.000528 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkGeometryInstanceParams.cs using Guid(f34ab4f025c3149f7b11502d5ed85a51) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '988b0633124a7a97f0459bcad5981c83') in 0.000659 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkOutputSettings.cs using Guid(f34bfa2d52d1c45e2ae564a10244acb6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '570f9567704c765a95f42478bdfb4464') in 0.000798 seconds
Start importing Assets/Wwise/API/Editor/WwiseTypes/RTPCDrawer.cs using Guid(04e1c9df5e86e46488831861ca131f9c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'dbf9987351dee29503c8a95b210c13ac') in 0.000684 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes/AkWwiseSwitch.cs using Guid(045bb9125b13c4f6f99327ed6ee80383) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c8a7a4c3c55405221b8fdd58ef48b027') in 0.000541 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkPositioningInfo.cs using Guid(14b7a7bacb1b545d0870102c1b28e8fb) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '42d60b6a364cbafb53d9e648afbae79a') in 0.000493 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkEventCallbackInfo.cs using Guid(240623b08ca3c49e5853dd5a64ede5c6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '71bed20f418d7df010b939135eb4ba84') in 0.000482 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkEvent.cs using Guid(44b6c2e585e6c43b398696532e707509) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e57f72767664896ed105a420f4dbc982') in 0.000706 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkRoomAwareManager.cs using Guid(446caeb1ca7c94805897c829bb3ff6d3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a814b4ab173f507cd2473928a1648ec2') in 0.000620 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/AkWwiseProjectInfo.cs using Guid(5473ff63dbe234e53b75cda1af4acfc4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7ffbfa28c05f54df66bcdbbdfd6d3178') in 0.000548 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkBankCallbackInfo.cs using Guid(7417b362a0af64d07b4afb60d5fbcf95) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f99bd108fa4b501f98955460d0ed0820') in 0.000677 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkStdMovePolicy.cs using Guid(747efac1596be41cea262b8ce39afd01) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c2e2ff7aaf3a4d4d876a0959d4d1bb1b') in 0.000572 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkObjectInfo.cs using Guid(8490ed554f7464a328eb5ccc34446276) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd1aff3928681d0334c71948299c04331') in 0.000531 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkSurfaceReflector.cs using Guid(843d99edcc3b14731a6d3be632073a1e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a0c08a7ada474336b9ed0a6b14a05aca') in 0.000650 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkAudioListenerInspector.cs using Guid(b4c05fefa0c794d1a9a4376262b57f49) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f6b781b318c9c6c244ce4cb4d7534f03') in 0.000545 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkObstructionOcclusionValues.cs using Guid(b484aedd7663644ea8c5ac0bbabb5ba9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e388e83d7e9abdefd724909305a2dace') in 0.000523 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkAudioFormat.cs using Guid(b41cdbe21b87345d5b6a9157702e0e53) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a1f00e0d90aed469e6aa4553578b65f6') in 0.000574 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkAcousticSurfaceArray.cs using Guid(c4e8473c9732448d6af39c018803918a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b761e73ec7ee6f0d4b287af8219ff733') in 0.000503 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Mac/AkPlatformInitSettings_Mac.cs using Guid(c4fd2b03f35834a2bb26909e49368e24) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cf5dd000ecaa0808c870887aaccc6cd8') in 0.000614 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMonitorErrorLevel.cs using Guid(c40e528d9650f4c07bbc33541e5b1bf6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8be0bcb858f5802aa2b332c65f5748f9') in 0.000617 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Mac/AkCommunicationSettings_Mac.cs using Guid(d492e06edc4f541848d8cffde4694f82) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c41549817f3e7a509faa7fff53d167a5') in 0.001208 seconds
Start importing Assets/Wwise/Timeline/Runtime/AkTimelineRtpcPlayable.cs using Guid(d4e799cdfe5404f52a11e0796d7369fe) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '44635ef4022b061e95b3ea4f194d045f') in 0.000586 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/EditorPlatformHelpers/Windows/AkWindowsPluginActivator.cs using Guid(e4a5286fa989c4bdca51cc093e80ce3c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '04972de00227280b3a9ac208d5108d85') in 0.000748 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkImageSourceParams.cs using Guid(f4042a9807941460ea5f4132b342c01c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bc8f84387028ad9f3cf4036ed4120381') in 0.000537 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Mac/AkUnityPlatformSpecificSettings_Mac.cs using Guid(15046d8045ce44cec9714609fd68b8f9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '65e8ee37b45799600dc1209b6fd4834f') in 0.000595 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkSpeakerPanningType.cs using Guid(2517c9a7525694c78b0c7282e96bd332) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '84b9b4b7a602de7685f4813a536bfab8') in 0.000929 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/AkWwiseProjectData.cs using Guid(259c29358525047f892a6ef0682395b7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e70d23f29958cbe878661b4e3c9e4955') in 0.000575 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkPlaylist.cs using Guid(35b90d0937980411d8e7b12fd1235d10) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6765b57e2bad072dc3e27a672a6ea16f') in 0.000508 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkEventCallbackData.cs using Guid(557999542572a45d8b569f9ecc6f99c4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '365b898b48dd3071c3d2018334d45468') in 0.000640 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects/WwiseStateGroupReference.cs using Guid(55bd786c46a0b426ca560fff66929852) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '21ab79336805dfdf54ce00dcd6a970c0') in 0.000616 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkReflectionPathInfoArray.cs using Guid(55af71ccc6aa247c89f94d0480782f88) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '59f5558702e971ba274cd487859df9d7') in 0.000663 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkGameObjectInspector.cs using Guid(65833a39e3f654aa5918bfd739a9507a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cb67fc4c12e14aca28629dd3da1969f7') in 0.000573 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes/AkWwiseRtpc.cs using Guid(65b51def614fd4edc890f78cc2781348) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '08a645bba1cf3ef47b3991f43916f8e5') in 0.000808 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkSourceSettings.cs using Guid(75469ca5793844cafb2697a4812fcae9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7e446c173b25e11182a8d0435665a73b') in 0.000737 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/AkWwisePicker.cs using Guid(75d9449f17c5440b4bedaadd72895aaa) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '57067b3036701657416baa8a5367069a') in 0.000579 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkObstructionOcclusionValuesArray.cs using Guid(75ac51f5683ec4c6a892082a5c7ae910) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '753a09a835c27e9ac6df16cf6a71f75a') in 0.000665 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkConnectionType.cs using Guid(85a8541481f314289a42552eae0110a9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c5fa9bdc0e1126d60e1725df70d829a5') in 0.000471 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkPluginType.cs using Guid(b563bfb35dbe64db4aa5d2836c817837) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5487fd379dd4ec127e11fc98fe334ba7') in 0.000502 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkGameObjPositionOffsetData.cs using Guid(b589fc56127384ee8acccdce29825ef8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'fb1489af0743e0f0e24228c2ee4cd6ce') in 0.000696 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkPanningRule.cs using Guid(b51e89250badb433ea75bb9f8f033fc5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cf354009a037f86c4f5d3ac65544fd05') in 0.000895 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkAuxSendValue.cs using Guid(c5ea2dfe310a846eabd5bedb3ef8bb9d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4e6adb8907d13b944d1a9546b495b014') in 0.000646 seconds
Start importing Assets/Wwise/API/Editor/WwiseMenu/Mac/AkWwiseMenu_Mac.cs using Guid(e5f61c6f31b8d470893152a17a637cb3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b1373af0ec723e2306ee3b15c89bd63f') in 0.000614 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkEnvironmentInspector.cs using Guid(06c0edfb4c32c47cd8b15ea0d6c977f7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2fd1c6445dd9e795c9fc2a0430ba32e5') in 0.000722 seconds
Start importing Assets/Wwise/API/Editor/WwiseTypes/EventDrawer.cs using Guid(06920c20c1f1a4b59816329df87d3fd4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4b7e23b1d7cc2dd42d1a877e39f64459') in 0.000686 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTriggerMouseDown.cs using Guid(06766a32d78e441babbc27c4e8992e87) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '09a7653af4269eb6957d4c9518479f3c') in 0.000736 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMIDIEventTypes.cs using Guid(068f0d10ada9145c58c89215bce75d19) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '12bdcf927331a066638b7f85ef1efea1') in 0.000683 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes/AkWwiseEvent.cs using Guid(16a12d6dec3cd42a8b5918f69599593b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '32cb40e9fcc51c7b0adc35ab7ec6e3fb') in 0.000796 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/WAAPI/AkWaapiClient.cs using Guid(16e8e758d7fc746ffbfceb0673d0a4b4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '016cb99e78b612b5d33d9f8c8a076ef1') in 0.000798 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkRoomPortalInspector.cs using Guid(16aad4e3d0d9b42c58942b7eb22fdedb) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '98db75a776e9429dabd55cabdfea6ee3') in 0.000742 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/EditorPlatformHelpers/Mac/AkMacPluginActivator.cs using Guid(16bff86e8567643ce86a2955d90f6c07) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1e386f0d96579afb30a4745990d70ff5') in 0.000834 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkAudioInterruptionCallbackInfo.cs using Guid(36121711be60d4bff9c4600ee4bfd665) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6a0b22fcd3279a63a37dc26e88965ba8') in 0.000613 seconds
Start importing Assets/Wwise/Timeline/Runtime/AkEventPlayableBehavior.cs using Guid(36b9a8baec2a4468cad38ced5a22923c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f14bf889349c0c7094eb2de4529c01e8') in 0.000742 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkGroupType.cs using Guid(460cad11e5d1048eeab86e61704f02ab) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'fdc7636d67c05fddde2905f3edf4db78') in 0.000810 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMIDICcTypes.cs using Guid(56096084a3bb44badbac71c422c022b3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2fbb0fa762a9a107c60004c5b4379e7c') in 0.000696 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTerminator.cs using Guid(862d12e9b0b8941e18853dc8b25598bc) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0c4cda8c95b6367d9c47cc48793c5682') in 0.000642 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkBaseArray.cs using Guid(a645c714c1a8f4a0b907296e7d25bb94) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b05d2badb15d3401f120c5c27f991555') in 0.000743 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes/AkWwiseBaseGroupType.cs using Guid(a6ffa83057ed643f8a50acdf82b9f604) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '371d123920c135801bbefd79d3f60574') in 0.000747 seconds
Start importing Assets/Wwise/API/Editor/WwiseTypes/BaseTypeDrawer.cs using Guid(b6ae62a7c2bca43e3b3086e77b696ef4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7aca34a0a68d4fba78069ba203ae9ded') in 0.000583 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkAudioSettings.cs using Guid(d611e0054c505441a93db6d0bf2b7719) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd5009ece6e896aaebdbef4009105773c') in 0.000514 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Windows/AkWindowsBasePathGetter.cs using Guid(f67f9dc2087ab417ea873225f4bb6519) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '72cd44a20d2a35805c42b08868991f80') in 0.000579 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Windows/AkThreadProperties_Windows.cs using Guid(1767a803447cb45f385f19a809493e06) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '68f00c5afda00d4532acdd1358d37188') in 0.000725 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkAudioListener.cs using Guid(271d0c5cf13ee481c97a05450fbdf577) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8e801be7d5181d5f4b75f1597b9ce68d') in 0.000839 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/WwiseSetupWizard/AkWSAUtils.cs using Guid(275de2cbfa5f04c759f92a1174b61a78) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c0f286b2fc8f86c1cf5e40b5adb81c26') in 0.000714 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTriggerExit.cs using Guid(37573d39ce75947cea0cd9d19790f2b0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0842f391ccd3e114bd74cdf57f137db1') in 0.000481 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkVector.cs using Guid(37bf27c99882841608e86eea7494b4ee) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '816d41da7d8f9008470771fe3420a2fb') in 0.000605 seconds
Start importing Assets/Wwise/API/Editor/WwiseTypes/AcousticTextureDrawer.cs using Guid(67f37b7b9019c4ea9b9a0b3bf771cf38) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f239b98df460366a192eec314c237cd0') in 0.000473 seconds
Start importing Assets/Wwise/Timeline/Runtime/AkTimelineEventTrack.cs using Guid(879056dc9e9e741afbba741956c42432) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '20783d067be0b5220552d9c6cc7bafa9') in 0.000536 seconds
Start importing Assets/Wwise/API/Editor/WwiseTypes/StateDrawer.cs using Guid(a7bed068db5cf4facb4c8f0e28b4bee2) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9a7992c0c89c0b7267adec00ce518e3b') in 0.000861 seconds
Start importing Assets/Wwise/API/Editor/WwiseMenu/Windows/AkWwiseMenu_Windows.cs using Guid(b7f140ce0e5b6486496079aceb03eeac) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b4add5359eb0c200ced89e1914099d8e') in 0.000635 seconds
Start importing Assets/Wwise/API/Editor/WwiseMenu/Common/AkUnityPluginInstallerBase.cs using Guid(b766de8be61f941ffaf30d0091f25d32) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e91ee3538338d8fa88f6b01afb63caee') in 0.000560 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkAuxSendArray.cs using Guid(c7b03a2ce481449b79fbf656988ecd9c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e2c81d19ee111271273c8963c4e5594e') in 0.000622 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkAudioDeviceState.cs using Guid(d70bbbbb59e324af490755745e28e479) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1c73ec5aefb042d9b0ff3d354ac06fe3') in 0.000507 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkDurationCallbackInfo.cs using Guid(e7615c5e1502b456ca645231146e154b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ff035d8d886f711574f8e6c0c2570ca5') in 0.000503 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkRoomAwareObject.cs using Guid(e7e127d3223c241068694ec7116f24b6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e1c497ce765570a2f555491f0f06a5e4') in 0.000580 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkRoomInspector.cs using Guid(e7e3f31588ddf4344a1d6f5b5d38f951) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '269e1ab3172a2faf98bfef63b273fcd3') in 0.000626 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkSerializedCallbackHeader.cs using Guid(083220021c2d04d03a2a00a0d98b66f5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ba7925f5bb7ca51a0f74b236da4131ac') in 0.000697 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMusicPlaylistCallbackInfo.cs using Guid(38e5d4ff346a349648f3184135ef1dde) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '662d5f1ec7a6f111e81afd2c3610e9c6') in 0.000500 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/Ak3DSpatializationMode.cs using Guid(381bf84f0f23340aaa6c2bd45de3910f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ded5f47e49fcfe40b3bbada528c10472') in 0.000494 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/AkWwiseTreeView.cs using Guid(48d2676aea78d4114bf469ad984646d2) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e1b2145c4c078c6e966abe3f1fc95a0c') in 0.000545 seconds
Start importing Assets/Wwise/Timeline/Runtime/AkTimelineRtpcTrack.cs using Guid(481933c4667934610b1c0d5b1e5e5b11) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '20322ba3e554ec37283182703f77f6d0') in 0.000609 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes/AkWwiseState.cs using Guid(5869cce46ad764e6aa54ee89776a4cab) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f52043e34f7dfd673b8bd9ff0826e655') in 0.000699 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkDeviceSettings.cs using Guid(682c67f08b3d64e608ee5495241d6d45) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '924050b356142cce6126341b01212aac') in 0.000619 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkCallbackManager.cs using Guid(78d7e9c78b73445a18cccc6888c88f99) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e7aeec0e1ded65fe954583b7f7c99371') in 0.000903 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/AkWwiseWWUBuilder.cs using Guid(7848ddf054e4d45ef81ef303542035f3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5ab06b891c79059eb72c9c36f575f7fd') in 0.000595 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes/AkWwiseAuxBus.cs using Guid(88b387eab15b74f8388dfe0a603b74d5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f27d938b70b087290ff14a5d5510ee26') in 0.000620 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTriggerHandler.cs using Guid(8814fb142578845488e01f5fd4e2299b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '67e3568b71025f23a703eb25019b851a') in 0.000505 seconds
Start importing Assets/Wwise/Timeline/Runtime/AkEventPlayable.cs using Guid(a834da71a93cd4eb78607ee5694c2df0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '164dd3b5b91f5ae44f7ce2414300728a') in 0.000560 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AKRESULT.cs using Guid(d85027c4058b0483bb686ddfe36af313) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0396ef93555208e104ec745bf0736840') in 0.000608 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTriggerEnable.cs using Guid(d8c9511dd9880457c9aa8e2247e930ea) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6c4bc992021d85b0f12b6f1ae41fede4') in 0.000503 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Windows/AkSoundEnginePINVOKE_Windows.cs using Guid(e8e2d712c555b4525bfaebd2a9cf8586) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3da20702898feeb09a7fa7f011bb0022') in 0.000747 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkGlobalCallbackLocation.cs using Guid(f8cf9fd69e0dd40ad85a9cc4a419fecc) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '14c83aab9d4f4839333079d9c09b43dc') in 0.000559 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/AkWwiseXMLBuilder.cs using Guid(19c9522ac5ec94ed5bb90551e679ef1b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '84d76863abff0ebbb9a51bc317109d0c') in 0.000518 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkBankInspector.cs using Guid(196db80db2a82467b9f53d4f45303415) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '997365b3c6d4b8c6ea4462c48bf1fadc') in 0.000631 seconds
Start importing Assets/Wwise/Timeline/Editor/AkRTPCPlayableInspector.cs using Guid(2924847e9c4424f83976481c049de763) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2bb28a082415f9359ac5064e0198ba8c') in 0.000540 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkState.cs using Guid(290840a1e35844b3eb69232a8f973c90) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5555f750f04c059996f1845a1a6dc178') in 0.000513 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkEnvironmentPortalInspector.cs using Guid(290e705deca904d5ea3e8a2d52653cde) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ad3d409c90baf32423d2421c0101cca9') in 0.000532 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkDeviceDescription.cs using Guid(39266afdda34941a48ed43e4106bae1d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'fd1a1024815864aebed37230a12efc01') in 0.000512 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTriggerDisable.cs using Guid(49cce4b5cf4b449a992f9f282f73ecca) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '67c40eca5db2684aacf42bcf536c18ac') in 0.000565 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMIDIPost.cs using Guid(49cf39fa3bfe14fcbbf1afa5fbf61de5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bdfc7c15e4f1f609b0044a60108d88b7') in 0.000717 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes/AkWwiseTrigger.cs using Guid(59c014df9ce6e4d6caaedcf1812bcd53) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '98d7a181067c516609132ab43ab4033d') in 0.000719 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkTransform.cs using Guid(6932ef64f8c1c48ffa1faeea4c0393c1) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cc797577e23a5fb782ba8e49714edc72') in 0.000643 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkInitializer.cs using Guid(69d67a27fd3ec4d02846a1f1ebdbadd8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0223abf8d8a6a462dde8ae0816d55f9b') in 0.000537 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkBankContent.cs using Guid(99e49577be9604dc4810ca995f3a2a95) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '31d23a5c450d4800b6fe7d6909c37cbd') in 0.000504 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes/AkWwiseBaseType.cs using Guid(a9afdcef4742c470c9404a59a42442a4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '343ba1f682ab70efbdd17e25885df535') in 0.002406 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkUnityEventHandlerInspector.cs using Guid(b9e405cf621a54c61a1a1d26105271cd) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '00aeca3680e5b0cfdbdab485f4399a5d') in 0.000595 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkSpatialAudioListener.cs using Guid(c965b08d614da4983ac9109d20fea82d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '078c5186492bdb972e34d12e8db6ea54') in 0.000615 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTriggerEnter.cs using Guid(0a139f66a21aa488f87e915618f9969b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b164246695f8a698f63848ccc3b93117') in 0.001035 seconds
Start importing Assets/Wwise/API/Editor/WwiseMenu/Common/AkUnityBuilderBase.cs using Guid(2a50a7ea660df4f9dbc2b46e5504cddb) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '38cdf97b49ffc98b227949eb172f14c0') in 0.000639 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Mac/AkSoundEngine_Mac.cs using Guid(3a42201adc78b43a782df7365a034bce) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '61f2d0853889133dd1549710e5bbba90') in 0.000618 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkResourceMonitorDataSummary.cs using Guid(3ae6633be930c447aafa8fd405521d46) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f6f03eb5edfed1029ae5695237f78c21') in 0.000859 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkDiffractionPathInfoArray.cs using Guid(4a8ec55505c334b0a91dfcfc0ea6c6ac) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1f8d63c90368e4d0ea34756b943bf082') in 0.000670 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkUtilities.cs using Guid(6ae14b45a7d3b4cf981c6db2f1194664) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'da81c5ff0913315ac41ff9b33bb53297') in 0.000645 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkWwiseEditorSettings.cs using Guid(7a122db46af4a42318e8222d0282ece6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1851ce58a554f402ec56347482e71135') in 0.000663 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkPlaylistArray.cs using Guid(7adac3761d8084608ac96b9dcdbc431a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'fbc14af96fba4285f456abab168e1c33') in 0.000633 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/AkWwiseComponentPicker.cs using Guid(8ad3cfdf266364b1d8ed47e84d12c6d0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cd0ac816d3e2d975e965b23285dbc6bf') in 0.000620 seconds
Start importing Assets/Wwise/Timeline/Runtime/AkEventTrack.cs using Guid(8a4493abe943c45fe80ab478edfa7a9f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8566a250e946c206d6a18e028b5f02e4') in 0.000530 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/WAAPI/AkWaapiHelper.cs using Guid(8aac15aefe2e24871b6632d7e5c44a37) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'adb995ac13c21f205f544a812e8e279b') in 0.000625 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkSoundEngineController.cs using Guid(9ad0de59a2f9e4410a50ae317c60a3c9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6c05b1a42b4a01f1bd7cc2280befafc5') in 0.000705 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkSourceChannelOrdering.cs using Guid(aa922d7a538d946c188c0d4a739b47e3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '339080447cfc71f775d8bb931b9c9cb7') in 0.000552 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Mac/AkMacSettings.cs using Guid(ba3b026ebdc5343fa8abeda197af276f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f3c57533fe72638fa98278aeb4224465') in 0.000570 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes/AkWwiseTypeMigration.cs using Guid(ca917dd4f2d8848ecbdf7b63277d8f3e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0fd6a3d4142f7e5560cc7c7722e834ce') in 0.000637 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Windows/AkUnityPlatformSpecificSettings_Windows.cs using Guid(cab413362b53549b6bd76121af9fb12a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd58fe8fc4a511bea88be252f481f7d0d') in 0.000491 seconds
Start importing Assets/Wwise/Timeline/Runtime/AkTimelineEventPlayable.cs using Guid(caf6ee045ac134a518af61cecb2f3b22) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '80eec08e4501de107d4de2baa53fe8d1') in 0.000511 seconds
Start importing Assets/Wwise/API/Editor/WwiseTypes/BankDrawer.cs using Guid(ca9a8086590e14f5a80a05ef40f8c6de) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e94cb71c2d29aedc627e32bde1285800') in 0.000496 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Mac/AkSoundEngine.cs using Guid(da0581cb0d17e43da911199d0a137045) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7c3eafc8ccd8747afe0e9abe3928da4b') in 0.000632 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkStateInspector.cs using Guid(ea541450502cf47afb5e15593c17c9b6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e7b5b2c5962a5e930b0aa641c2fb15ea') in 0.000674 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkExtent.cs using Guid(ea5f75d9c2440482baa6be8270520c2d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '40d57732d9961a58302305b2490df172') in 0.000594 seconds
Start importing Assets/Wwise/API/Runtime/AkSoundEngine.extensions.cs using Guid(0b249d8630a054a2ea97bca780f7bb43) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6a3a4e59e9e3927a50eb1f5d240e967f') in 0.000577 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkTriangle.cs using Guid(3b02d2a3cd9ec4cc497c9d532134688e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'eade24145d5f47eaf5c4b308c090afda') in 0.000474 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkActionOnEventType.cs using Guid(3b45d1328b7f84f5585be5f54cac4020) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '40ad0f872e8f87eaed6eb39f33f60b88') in 0.000506 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMusicSettings.cs using Guid(3bf53b4d9612940048a5547214bff5fe) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6caee4013e945ba0d85a28e4e6419ab2') in 0.000514 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkAudioObjectDestination.cs using Guid(3bdd94aec6fb64c8f8b01a38e329de7f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4918b8d1d043b77e27bcf834540c0f89') in 0.000524 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkIterator.cs using Guid(3b5f040a6d51b44db86515aea6afe4c8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'fd7e8d25188993583b05ab22ded7b404') in 0.000504 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTriggerMouseUp.cs using Guid(4b14b203acdd94f179d1c7a3d83b8790) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '434223014aa0af9adeca6f4517c80c37') in 0.000709 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkTrivialStdMovePolicy.cs using Guid(6b7f463bf08fc40d1bc4b0c9980ee4df) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a10eb6295771fa4d9a17d0661d1e268e') in 0.000665 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Mac/AkMacBasePathGetter.cs using Guid(8ba2efd527f84437f86cc3626e061937) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '20ddcfd3581e7939a841680ab064a5c2') in 0.000515 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkRoomManager.cs using Guid(9b50c7a20beab49099cc2ea573c93621) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '82a61abb9c2898a27e9daf6fa4fb975d') in 0.000530 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/MonitorErrorInfo.cs using Guid(9b62499eecf3b4179842d8ffe67c0483) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '05872762df56b5f5e60e68eabcde54c5') in 0.000512 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMeteringFlags.cs using Guid(9bf2447ec4ff64d6985b2d2c4f97e225) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '28e9bee53cbc715a07e450aa8743674b') in 0.000466 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkEmitterObstructionOcclusion.cs using Guid(fbb6b3425c9fd4940b178b2cb5c038ca) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '465bc57b66cc44a89b67feac0cf15296') in 0.000506 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkShowOnlyAttribute.cs using Guid(fbadc463e138a48f59ac7cf3b99cda47) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '418e4e7553266cbbab32060396d122f0') in 0.000642 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTriggerMouseEnter.cs using Guid(0c3301ca9a54a4167b30a32eb8fa4852) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '45c1f1bd866ee2fe1e577bd84bc8b2c4') in 0.000624 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkSoundEngine.cs using Guid(0ce6a72ba587a44a78d24be5b3176aac) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0d4a3843d6d4e8bf843c36570d4c7991') in 0.000544 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Windows/AkSoundEngine.cs using Guid(1cc3f572d6d8547d3a9c482a533cacdc) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd10ecd551b071117c5642125a22d208b') in 0.000499 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkSpatialAudioEmitter.cs using Guid(1c378fa691c8745eb9aa5ed9cc449484) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5953856e612aad4a8c33024bb29da6b2') in 0.000687 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkSegmentInfo.cs using Guid(4cefb59b05300489aa661c586aa0c9e3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '706e836fce2dce16bd9ae133658b4955') in 0.000622 seconds
Start importing Assets/Wwise/Timeline/Runtime/AkRTPCPlayable.cs using Guid(6c6c37aa2bf73452a999001eaff5b2ed) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '99b828e105fc846a0685520be10c187d') in 0.000484 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkRoomAwareObjectInspector.cs using Guid(7cba3ae0d15cb4b7eb1acc63561b30ff) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e350307de705bfe0922d8c26bf0f9a10') in 0.000496 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkListenerDistanceProbe.cs using Guid(8c35181a1d5024582bf2c5b8dffcd3b7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '01aa86ef8a0cfb3dfc9032e727a06026') in 0.000716 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkChannelEmitterArray.cs using Guid(8c2727d3929be4c778dd4fb697f3b21c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4301c2bd7c4ca6e6680d2f0981f8f440') in 0.000744 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkAmbientInspector.cs using Guid(8caa64d1011b44e8f9fa7ecbfb890d81) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd6f1c9cd764ae8f17b64e465136bc63d') in 0.000712 seconds
Start importing Assets/Wwise/API/Editor/AkPluginActivator.cs using Guid(9cdcdbd6787b044818a848881d87cb73) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6b4588234d977d3ace07cc04187bcb8a') in 0.000558 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/WAAPI/Uri.cs using Guid(acb549dce1433401ca312fed431d000e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a767da3f841d5bb2d267e5f7b4f97642') in 0.000518 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkBusHierarchyFlags.cs using Guid(acc96b51fba2342fa9a6438e15bf6c19) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a1d342a2f0c14e5eefb60ea68aa5d522') in 0.000625 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects/WwiseTriggerReference.cs using Guid(ccc40f2a1b2e94fa2af552d2a1ebb032) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7b076e3947a5042402e5502cb068b58c') in 0.000654 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes/AkWwiseCallbackFlags.cs using Guid(dc022543276254a959c549c9aa9eead3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5dbe0b2a9cc12eb4a32ff31c46039d0d') in 0.000862 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects/WwiseBankReference.cs using Guid(dc8422a2d2bb44bc8bfbf9ca06d8fb90) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '23cd17bf6489fe7213d79b17279a8407') in 0.000817 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkPlaylistItem.cs using Guid(dc7b48a8aa96c41ba904df72ef149659) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5efc4ed5ce7507daac47bf388d9bf0e4') in 0.000554 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkCommonPlatformSettings.cs using Guid(0dd8b6d0a158347acb185bef6e2cee23) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '852666613ae71dde4195c0983dfae297') in 0.000680 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/WwiseSetupWizard/AkBuildPreprocessor.cs using Guid(1d85a5aecea9149899183252fd267710) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0f3e97b448ce3512489b21e17cb178c4') in 0.000748 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkTriangleArray.cs using Guid(2de26f4c773e44502ade469f8f295080) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '89a967e72564f9e81b0cc3423748d4fb') in 0.000683 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkSwitch.cs using Guid(3d21aae63346744089ecdfd09359d2bd) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3bdc608dae70406e5ccbb6493ec3ae51') in 0.000861 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMIDIEventCallbackInfo.cs using Guid(4d3aa003a8cc1404f804b7ca1343d3f5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ff84ac233178a5d7c9c24530f2d0da0c') in 0.000685 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkMIDIPostArray.cs using Guid(5dfccddfae4004617810d007021abeba) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6a702f571a321eb05210cfae7fa3064d') in 0.000537 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkAudioSourceChangeCallbackInfo.cs using Guid(5d1eca214bfe346e68dd88d62ef10060) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '571aad47b06f2bf3ec9b186a3fd0ef7b') in 0.000523 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/WAAPI/AkWaapiUtilities.cs using Guid(6d8d8b210c0714db1a20fc602579b60d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '55e6d9524e8d861c75f559cbf2a4a9e0') in 0.000487 seconds
Start importing Assets/Wwise/API/Editor/WwiseTypes/AuxBusDrawer.cs using Guid(7d5b0af61c37e4e7cac837a9c907fcff) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bf48ce9fbff6c64a1c2ff7f16a1e8429') in 0.000473 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkEnumFlagAttribute.cs using Guid(9d070635b84a24a1a952a57b84f39b0b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b1c2372c8607786b1b9888073653c51a') in 0.000474 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkExternalSourceInfo.cs using Guid(ad970ccea0760499a90a463ad14272b9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ea04d709bf26a2eca1591ef1d90447a4') in 0.000491 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkEnvironment.cs using Guid(ad5d031c328b843389f3ce0589b93934) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b681961fb1b02d83f02b8c24c7ffe498') in 0.000565 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Windows/AkWindowsSettings.cs using Guid(ad0e7855eaf4d4d168fd3ebb50b766ff) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'dc2cbae9789951d91bb88c1e9c867110') in 0.000865 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkWwiseSoundbanksInfoXMLFileWatcher.cs using Guid(bd60bfe01eed0485fb6a994e39602307) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0f5f837a7777c314dcb3665c30859f7d') in 0.000676 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkRoomPortalObstruction.cs using Guid(cd5783f73a07745b39284b579ee18c85) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2ed5ed5b2ed791e91effee0230f72282') in 0.000614 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTriggerMouseExit.cs using Guid(dd19da026cf6a4193a046d9baaeff7d1) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'be748a24756627a2f4afcc6be059a9e1') in 0.000819 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkGameObjPositionData.cs using Guid(edc85b2ae6740467ca9fb6d73b655553) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '57dc6659684c30bebbb2febc2fe5cac1') in 0.000509 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseTypes/AkWwiseAcousticTexture.cs using Guid(fd81b6b08fba44c63a4750ea95ae5f3e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9d5d11d70f4c219bde1668ee24372258') in 0.000500 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkAmbientLargeModePositioner.cs using Guid(fdfa356181faa42f4a7190c26f3cee5c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9618caceab6afbff15da9f20ef4d93d6') in 0.000504 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkPortalManager.cs using Guid(1ec1a96e1e39e4e449cf46b17b1a7586) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6ee210cefb9ce4ff9f9f65d6c59138ef') in 0.000697 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects/WwiseEventReference.cs using Guid(2e654bc7e39c04271ad7c4d6e0a0a8ed) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a08ba0cc8b3095305d87efa3456e5c36') in 0.000633 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkAcousticSurface.cs using Guid(2e7f9086333f24ad58786d732b1335f7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9d77bb4c45cc83adb08c5461e9765380') in 0.000627 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkDynamicSequenceItemCallbackInfo.cs using Guid(3e9df0a57a18d4ce9974211e1542b5c3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '66a0b109e25e8763826b3150d87ece74') in 0.000522 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMIDIEvent.cs using Guid(4e1f712f7363d4d8497a703c7fd6a3d9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7c1a40273eb6fcbd5d31ee2114251ce1') in 0.000496 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects/WwiseSwitchReference.cs using Guid(5e375e042169a49f5bebc97cc938d01a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7830252a8e3b00ab4217b09d81f4385d') in 0.000479 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkPositionArray.cs using Guid(6ec2ed204be034b88b53743e7ba0be5c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b4e69a8c1bf9e6a8cad249f8f60639c5') in 0.000520 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkRoomPortal.cs using Guid(6e69dd3fca2e245c387178e159fa424b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '439cd7c93f8f537888a8ff148baad275') in 0.000485 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkCurveInterpolation.cs using Guid(7ee139b0f8a9642d7bdbbedd567e63c0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f7839770db880e5f70b14ac9c1923af0') in 0.000679 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkChannelOrdering.cs using Guid(7e16b8bfde0a343a086ff7d47b2c99f3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd6d6c7c1265fea38df008327bcd20f39') in 0.000522 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/AkWwiseTreeViewItem.cs using Guid(7e977f390d65d4edbab64f9eda4c2a2a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'eab08d3e4d84e3d54cbb3dd965dfb56f') in 0.000606 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/WwiseSetupWizard/AkXboxOneUtils.cs using Guid(8ecbf3918483841e2aaf56cb0555ae3e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b77844dae57b5e9de666faac5cb7aebb') in 0.000529 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/AkVertex.cs using Guid(ae8b1febba23e48daa046d93d93f3685) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5432daf041074bc9840cd8af9c296ed6') in 0.000490 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkRadialEmitterInspector.cs using Guid(be30139ad7c874d518fab140341e3b11) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7abe799d158bde8bd137d4aae1fcda81') in 0.000491 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/Ak3DPositionType.cs using Guid(dec35c5bdf53e46678c9d9535e3a7081) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4416e300d78ee8aba359adcd48cb3acd') in 0.000539 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkSpatialAudioInitSettings.cs using Guid(de87bfee4af3f4031b82a68b4b9ad43c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a005a86be9dfd0aff4f4276d098aacb5') in 0.000601 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkBank.cs using Guid(eee6907befa734d2bba0fb2e08a8803a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b85884b41ba4860f69a167b7eaf93c73') in 0.000708 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkRoom.cs using Guid(0fcb1edc1680b455390fffaf756917eb) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5b3adffa0bc4161856bc1420b54bb162') in 0.000610 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/WwiseSetupWizard/AkWwisePostImportCallbackSetup.cs using Guid(1fa4195faa7a2464cac715aa3b716909) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f765d3fc10c080c6f84bf6d4c77bf6a6') in 0.000653 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkSetPositionFlags.cs using Guid(1fe5ba307a7d848a39ecc881300f8b94) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '475eaad66e0011015b04ac24ed5e5b28') in 0.000599 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects/WwiseStateReference.cs using Guid(1f98804c04c38445ea03420759775260) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '43c995795e54f142f1392369ba9a9617') in 0.000546 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/AkWwiseTreeProjectDataSource.cs using Guid(7f633c46e26c24194a0b3f44a571dd4b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '47ac5e03672900782c066bf13ac6a5c4') in 0.000493 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Mac/AkSoundEnginePINVOKE_Mac.cs using Guid(7fa636d7608194f778a931889c261aaf) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '706df599602de93d8547ef24d03fe27a') in 0.000588 seconds
Start importing Assets/Wwise/API/Editor/WwiseTypes/TriggerDrawer.cs using Guid(8fb742ef3dc394c3d8440dab9e9eba0a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '08ec765d7e105a176ce0dea5bd2ff191') in 0.000694 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkImageSourceSettings.cs using Guid(9f9ee38a6b4c84c46b8c28318523caee) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1867ed9d9816a342cddc44d1c84899ed') in 0.000567 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMonitoringCallbackInfo.cs using Guid(af83ba836ae5b4291b086a6081982d7c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '88e4f3c283549d36c7ed2fa8571823b6') in 0.000538 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkInitializationSettings.cs using Guid(af0561c69df5a4ac2afb9128c513d48c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f222167494d7aa3ba01b2b7dabf353e1') in 0.000512 seconds
Start importing Assets/Wwise/API/Runtime/WwiseTypes/WwiseObjects/WwiseAcousticTextureReference.cs using Guid(af35d2c092c42449ebba0165de8a04d1) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '35c713488364ed4b55a4c4c503b5b4f4') in 0.000522 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/WwiseSetupWizard/AkWwiseSetupWizard.cs using Guid(bf278a6ba39db4a0f965738342fcf800) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ca0b480893f2363a8c94cceecf99f304') in 0.000573 seconds
Start importing Assets/Wwise/MonoBehaviour/Runtime/AkTriggerCollisionExit.cs using Guid(bfbd734627c4b416183fb7b6401ed3ea) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '605846eb094eb1e5698e230484dec165') in 0.000491 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkWorldTransform.cs using Guid(bf3f1a42d46ec4be2b3674459ce1494e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ab541745cf14dfcb2a4247a8592d8df3') in 0.000571 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkMonitorErrorCode.cs using Guid(bfdf2bc834cb148b081efa4684978f24) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7e627ca061a305da87e812aa33696e08') in 0.000686 seconds
Start importing Assets/Wwise/API/Runtime/Handwritten/Common/Arrays/AkDeviceDescriptionArray.cs using Guid(df9e65e98449c459d944b29351afc9ba) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '22ec5265ce21b09218732cb247eec8c5') in 0.000741 seconds
Start importing Assets/Wwise/MonoBehaviour/Editor/AkSurfaceReflectorInspector.cs using Guid(ef30eb7cbce3b470194c8b97c89d32f9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '102c25d384c7cb3662eb93152547d60c') in 0.000525 seconds
Start importing Assets/Wwise/API/Editor/WwiseTypes/SwitchDrawer.cs using Guid(ff9bacaef4559476099fde66d8ef0298) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9ae80727da697b5c23074c9b76fa0a7a') in 0.000678 seconds
Start importing Assets/Wwise/API/Runtime/Generated/Common/AkStreamMgrSettings.cs using Guid(ffaee26f43e85407ea3f28baddefe0eb) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a77825c47eb6296ed5e572bee939665d') in 0.000507 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 ScriptingInitializer::FinalizeReload()
 #5 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 InitialRefreshV2(bool, bool)
 #8 Application::InitializeProject()
 #9 NoGraphicsMain()
 #10 EditorMain(int, char const**)
 #11 main
 #12 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 ScriptingInitializer::FinalizeReload()
 #5 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 InitialRefreshV2(bool, bool)
 #8 Application::InitializeProject()
 #9 NoGraphicsMain()
 #10 EditorMain(int, char const**)
 #11 main
 #12 start

Refreshing native plugins compatible for Editor in 4.50 ms, found 22 plugins.
Native extension for WindowsStandalone target not found
Native extension for OSXStandalone target not found
WwiseUnity: Plugins successfully activated for Profile in Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 DebugLogHandler_CUSTOM_Internal_Log(LogType, LogOption, ScriptingBackendNativeStringPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #3  (Mono JIT Code) (wrapper managed-to-native) UnityEngine.DebugLogHandler:Internal_Log (UnityEngine.LogType,UnityEngine.LogOption,string,UnityEngine.Object)
 #4  (Mono JIT Code) [DebugLogHandler.cs:10] UnityEngine.DebugLogHandler:LogFormat (UnityEngine.LogType,UnityEngine.Object,string,object[])
 #5  (Mono JIT Code) [Logger.cs:61] UnityEngine.Logger:Log (UnityEngine.LogType,object)
 #6  (Mono JIT Code) [Debug.bindings.cs:102] UnityEngine.Debug:Log (object)
 #7  (Mono JIT Code) [AkPluginActivator.cs:634] AkPluginActivator:ActivatePluginsForEditor ()
 #8  (Mono JIT Code) [AkPluginActivator.cs:151] AkPluginActivator:.cctor ()
 #9  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #10 mono_jit_runtime_invoke
 #11 do_runtime_invoke
 #12 mono_runtime_class_init_full
 #13 ves_icall_System_Runtime_CompilerServices_RuntimeHelpers_RunClassConstructor_raw
 #14  (Mono JIT Code) (wrapper managed-to-native) System.Runtime.CompilerServices.RuntimeHelpers:RunClassConstructor (intptr)
 #15  (Mono JIT Code) System.Runtime.CompilerServices.RuntimeHelpers:RunClassConstructor (System.RuntimeTypeHandle)
 #16  (Mono JIT Code) [EditorAssemblies.cs:120] UnityEditor.EditorAssemblies:ProcessInitializeOnLoadAttributes (System.Type[])
 #17  (Mono JIT Code) (wrapper runtime-invoke) <Module>:runtime_invoke_void_object (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Scripting::UnityEditor::EditorAssembliesProxy::ProcessInitializeOnLoadAttributes(ScriptingArrayPtr, ScriptingExceptionPtr*)
 #24 MonoManager::SetupLoadedEditorAssemblies()
 #25 MonoManager::FinalizeReload()
 #26 ScriptingInitializer::FinalizeReload()
 #27 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #28 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #29 InitialRefreshV2(bool, bool)
 #30 Application::InitializeProject()
 #31 NoGraphicsMain()
 #32 EditorMain(int, char const**)
 #33 main
 #34 start

WwiseUnity: The platform SoundBank subfolder within the Wwise project could not be found.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 DebugLogHandler_CUSTOM_Internal_Log(LogType, LogOption, ScriptingBackendNativeStringPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #3  (Mono JIT Code) (wrapper managed-to-native) UnityEngine.DebugLogHandler:Internal_Log (UnityEngine.LogType,UnityEngine.LogOption,string,UnityEngine.Object)
 #4  (Mono JIT Code) [DebugLogHandler.cs:10] UnityEngine.DebugLogHandler:LogFormat (UnityEngine.LogType,UnityEngine.Object,string,object[])
 #5  (Mono JIT Code) [Logger.cs:61] UnityEngine.Logger:Log (UnityEngine.LogType,object)
 #6  (Mono JIT Code) [Debug.bindings.cs:192] UnityEngine.Debug:LogWarning (object)
 #7  (Mono JIT Code) [AkBasePathGetter.cs:182] AkBasePathGetter:GetPlatformBasePathEditor (string)
 #8  (Mono JIT Code) [AkBasePathGetter.cs:72] AkBasePathGetter:GetPlatformBasePath ()
 #9  (Mono JIT Code) [AkWwiseSoundbanksInfoXMLFileWatcher.cs:46] AkWwiseSoundbanksInfoXMLFileWatcher:StartWatcher ()
 #10  (Mono JIT Code) [AkWwiseSoundbanksInfoXMLFileWatcher.cs:42] AkWwiseSoundbanksInfoXMLFileWatcher:.ctor ()
 #11  (Mono JIT Code) [AkWwiseSoundbanksInfoXMLFileWatcher.cs:23] AkWwiseSoundbanksInfoXMLFileWatcher:.cctor ()
 #12  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #13 mono_jit_runtime_invoke
 #14 do_runtime_invoke
 #15 mono_runtime_class_init_full
 #16 mono_method_to_ir
 #17 mini_method_compile
 #18 mono_jit_compile_method_inner
 #19 mono_jit_compile_method_with_opt
 #20 common_call_trampoline
 #21 mono_magic_trampoline
 #22 ???
 #23  (Mono JIT Code) [AkWwiseXMLBuilder.cs:31] AkWwiseXMLBuilder:.cctor ()
 #24  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #25 mono_jit_runtime_invoke
 #26 do_runtime_invoke
 #27 mono_runtime_class_init_full
 #28 ves_icall_System_Runtime_CompilerServices_RuntimeHelpers_RunClassConstructor_raw
 #29  (Mono JIT Code) (wrapper managed-to-native) System.Runtime.CompilerServices.RuntimeHelpers:RunClassConstructor (intptr)
 #30  (Mono JIT Code) System.Runtime.CompilerServices.RuntimeHelpers:RunClassConstructor (System.RuntimeTypeHandle)
 #31  (Mono JIT Code) [EditorAssemblies.cs:120] UnityEditor.EditorAssemblies:ProcessInitializeOnLoadAttributes (System.Type[])
 #32  (Mono JIT Code) (wrapper runtime-invoke) <Module>:runtime_invoke_void_object (object,intptr,intptr,intptr)
 #33 mono_jit_runtime_invoke
 #34 do_runtime_invoke
 #35 mono_runtime_invoke
 #36 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #37 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #38 Scripting::UnityEditor::EditorAssembliesProxy::ProcessInitializeOnLoadAttributes(ScriptingArrayPtr, ScriptingExceptionPtr*)
 #39 MonoManager::SetupLoadedEditorAssemblies()
 #40 MonoManager::FinalizeReload()
 #41 ScriptingInitializer::FinalizeReload()
 #42 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #43 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #44 InitialRefreshV2(bool, bool)
 #45 Application::InitializeProject()
 #46 NoGraphicsMain()
 #47 EditorMain(int, char const**)
 #48 main
 #49 start

WwiseUnity : Created new AkWwiseProjectData asset
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 DebugLogHandler_CUSTOM_Internal_Log(LogType, LogOption, ScriptingBackendNativeStringPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #3  (Mono JIT Code) (wrapper managed-to-native) UnityEngine.DebugLogHandler:Internal_Log (UnityEngine.LogType,UnityEngine.LogOption,string,UnityEngine.Object)
 #4  (Mono JIT Code) [DebugLogHandler.cs:10] UnityEngine.DebugLogHandler:LogFormat (UnityEngine.LogType,UnityEngine.Object,string,object[])
 #5  (Mono JIT Code) [Logger.cs:61] UnityEngine.Logger:Log (UnityEngine.LogType,object)
 #6  (Mono JIT Code) [Debug.bindings.cs:102] UnityEngine.Debug:Log (object)
 #7  (Mono JIT Code) [AkWwiseProjectInfo.cs:122] AkWwiseProjectInfo:CreateWwiseProjectData ()
 #8  (Mono JIT Code) [AkWwiseProjectInfo.cs:101] AkWwiseProjectInfo:GetData ()
 #9  (Mono JIT Code) [AkWwiseWWUBuilder.cs:443] AkWwiseWWUBuilder:GatherModifiedFiles ()
 #10  (Mono JIT Code) [AkWwiseWWUBuilder.cs:116] AkWwiseWWUBuilder:InitializeWwiseProjectData ()
 #11  (Mono JIT Code) [AkWwiseWWUBuilder.cs:48] AkWwiseWWUBuilder:.cctor ()
 #12  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #13 mono_jit_runtime_invoke
 #14 do_runtime_invoke
 #15 mono_runtime_class_init_full
 #16 ves_icall_System_Runtime_CompilerServices_RuntimeHelpers_RunClassConstructor_raw
 #17  (Mono JIT Code) (wrapper managed-to-native) System.Runtime.CompilerServices.RuntimeHelpers:RunClassConstructor (intptr)
 #18  (Mono JIT Code) System.Runtime.CompilerServices.RuntimeHelpers:RunClassConstructor (System.RuntimeTypeHandle)
 #19  (Mono JIT Code) [EditorAssemblies.cs:120] UnityEditor.EditorAssemblies:ProcessInitializeOnLoadAttributes (System.Type[])
 #20  (Mono JIT Code) (wrapper runtime-invoke) <Module>:runtime_invoke_void_object (object,intptr,intptr,intptr)
 #21 mono_jit_runtime_invoke
 #22 do_runtime_invoke
 #23 mono_runtime_invoke
 #24 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #25 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #26 Scripting::UnityEditor::EditorAssembliesProxy::ProcessInitializeOnLoadAttributes(ScriptingArrayPtr, ScriptingExceptionPtr*)
 #27 MonoManager::SetupLoadedEditorAssemblies()
 #28 MonoManager::FinalizeReload()
 #29 ScriptingInitializer::FinalizeReload()
 #30 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #31 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #32 InitialRefreshV2(bool, bool)
 #33 Application::InitializeProject()
 #34 NoGraphicsMain()
 #35 EditorMain(int, char const**)
 #36 main
 #37 start

Start importing Assets/Wwise/Editor/ProjectData/AkWwiseProjectData.asset using Guid(65c8a8c7042b54cf0b6a8c043792735c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3b2f9c4e3b3e24be7541ad537e40418d') in 0.000713 seconds
DisplayProgressbar: Populating Wwise Picker
Script 'Packages/com.unity.modules.subsystems/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.jsonserialize/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.test-framework/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.screencapture/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.cloth/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imgui/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequesttexture/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.android-logcat/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ai/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/Unity.Collections.LowLevel.ILSupport/README.txt.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.animation/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ugui/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.xr/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.rider/Rider/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.pixel-perfect/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.pixel-perfect/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.pixel-perfect/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.assetbundle/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imgui/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/Graphics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.tilemap/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.assetbundle/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.timeline/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/net35/unity-custom/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.aseprite/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/Unity.Collections.LowLevel.ILSupport/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/Gizmos/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/net35/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrainphysics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mathematics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/AOT/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.screencapture/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.timeline/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.timeline/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.cloth/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/PackageConversionData.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestassetbundle/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.profiling.core/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/IK/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.2d/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imageconversion/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrainphysics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imageconversion/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequest/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestassetbundle/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unityanalytics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.subsystems/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.rider/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.video/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.test-framework/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unityanalytics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Scripts/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vr/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics2d/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/Path/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.android-logcat/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.particlesystem/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.wind/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics2d/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.mobile/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vr/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.uielements/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestaudio/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.particlesystem/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/link.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.wind/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.android-logcat/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ugui/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.umbra/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Textures/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.sprite/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.tilemap/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ui/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.subsystemregistration/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mathematics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.mobile/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.psdimporter/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.androidjni/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/Tests/TestPackage/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Gizmos/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.audio/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/Tests/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vehicles/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/EditorResources/Overlay/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.subsystemregistration/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.rider/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestwww/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestaudio/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.2d/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.subsystemregistration/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/TMP_SDF_SSD.cginc.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.vscode/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vehicles/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.xr/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.profiling.core/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/TMP_Properties.cginc.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/AOT/Newtonsoft.Json.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/TMP_SDF Internal Editor.shader.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.umbra/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/EditorResources/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestwww/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/Lib/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.director/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.aseprite/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.vscode/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.jsonserialize/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.director/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.audio/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrain/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.sprite/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.androidjni/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.video/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ai/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/PackageConversionData_Assets.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.spriteshape/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mathematics/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Package Resources/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrain/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.sprite/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.animation/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/Newtonsoft.Json.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.aseprite/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/Unity.Burst.Unsafe.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.psdimporter/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequest/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.uielements/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequesttexture/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ugui/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.spriteshape/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ui/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.spriteshape/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.psdimporter/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.vscode/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  3.190 seconds
Domain Reload Profiling: 3697ms
	BeginReloadAssembly (88ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (3ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (22ms)
	RebuildCommonClasses (22ms)
	RebuildNativeTypeToScriptingClass (8ms)
	initialDomainReloadingComplete (16ms)
	LoadAllAssembliesAndSetupDomain (373ms)
		LoadAssemblies (220ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (194ms)
			TypeCache.Refresh (178ms)
				TypeCache.ScanAssembly (170ms)
			ScanForSourceGeneratedMonoScriptInfo (13ms)
			ResolveRequiredComponents (3ms)
	FinalizeReload (3190ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (3111ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (2ms)
			SetLoadedEditorAssemblies (4ms)
			RefreshPlugins (0ms)
			BeforeProcessingInitializeOnLoad (30ms)
			ProcessInitializeOnLoadAttributes (2981ms)
			ProcessInitializeOnLoadMethodAttributes (93ms)
			AfterProcessingInitializeOnLoad (1ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (2ms)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 InitialRefreshV2(bool, bool)
 #9 Application::InitializeProject()
 #10 NoGraphicsMain()
 #11 EditorMain(int, char const**)
 #12 main
 #13 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 InitialRefreshV2(bool, bool)
 #9 Application::InitializeProject()
 #10 NoGraphicsMain()
 #11 EditorMain(int, char const**)
 #12 main
 #13 start

Refreshing native plugins compatible for Editor in 4.09 ms, found 22 plugins.
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 InitialRefreshV2(bool, bool)
 #9 Application::InitializeProject()
 #10 NoGraphicsMain()
 #11 EditorMain(int, char const**)
 #12 main
 #13 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 InitialRefreshV2(bool, bool)
 #9 Application::InitializeProject()
 #10 NoGraphicsMain()
 #11 EditorMain(int, char const**)
 #12 main
 #13 start

Refreshing native plugins compatible for Editor in 4.66 ms, found 22 plugins.
Start importing Assets/Wwise/Editor using Guid(9a6d9cd45bed1474a9ced07ea90f1c1e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6fdde578aee47c0a371128b20a10f620') in 0.000908 seconds
Start importing Assets/Wwise/Editor/ProjectData using Guid(65ced74d959074a90aa9aef843127382) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd632d9d9e4b98ff55c0041db177611b2') in 0.000682 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Profile/AkSoundEngine.dll using Guid(30cfe76695924457ca26eeec9c1f31a8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e2445dc66dd6febd13b8b5e53cd7c27a') in 0.000667 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Debug/AkSoundEngine.dll using Guid(413a3357e49be4ee28a9e3d66ee2b7ea) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cbee8f4ad0f193126dc30170760dc94e') in 0.000487 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkSynthOne.dll using Guid(91698ff98a6214f0c877180f54f74b7a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'df7a25db53fd997c1e8c5f6300b27b07') in 0.000483 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/iZotope.dll using Guid(f16541e8d255e41c98b7b10c90d5e63b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f7a71c1d9a2eef02f83e9f70b43e6cf8') in 0.000458 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/Auro.dll using Guid(a2a34216b25a04a11bcf995eee74dd65) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7cd8d7d32bbdc0c4ad39b4fd8c6211d6') in 0.000415 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/MSSpatial.dll using Guid(14659e23c11074be78cc58c8049bbc14) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '46b51fcb43870ab0ad72604d798281d8') in 0.000443 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkSoundSeedAir.dll using Guid(b468942b0350b4506bd6c05ecf7dbeff) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '378d73a90c75b869da9aa2b3bc58101b') in 0.000423 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkSoundSeedGrain.dll using Guid(758a8cc6563da4e9e875d6b6785653d0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '77cdbe06cc84685436c4f403f4b70151') in 0.000432 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/McDSP.dll using Guid(667a8c1b550e2463d8469f00158ef71b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '266bcbe322848d5ed5c01bf010d56915') in 0.000543 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/MSSpatial.dll using Guid(e6d988f8dbd394a0bab9f58444c666be) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'fc36ae3c3b7e80b415c6f416c73a7a70') in 0.000512 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkMotion.dll using Guid(481149b57f60143fba0c8fcf3bf4ac07) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b639e22a7281e89b8077b20a1920c2cc') in 0.000480 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkMotion.dll using Guid(c8170aefd437c4c199bf5c3c8b5d69e6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '11308b61140d88cf85c230a7237b10b6') in 0.000420 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkConvolutionReverb.dll using Guid(f854204b5d8944308ae95a46cc90b17b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c8f4849687c1cadb019020fb491188fa') in 0.000394 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkSoundSeedAir.dll using Guid(8908b152bd3b040068cac9c61a966a46) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2c4ba8438d7a932515f384da12854458') in 0.000400 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/iZotope.dll using Guid(c98acb1761e72487cad147372db997f7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2def7427e48fd9a394bf900f11fd5dc8') in 0.000483 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Profile/AkSoundEngine.dll using Guid(8ad93009ec910438cb3e642884ef8a8c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bcb7c59e12f8fd46334af4e96441210d') in 0.000434 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Release/AkSoundEngine.dll using Guid(8bdcba31273d5468fbcda98cb20c5631) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '800efdeefd786b2488cb78c906a2d4af') in 0.000437 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Release/AkSoundEngine.dll using Guid(fb30640adbd2540008b2bc9368692ed5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '366bbeac69cc8d907bda953cb25a0e2b') in 0.000496 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/Auro.dll using Guid(0cfc9575584f042b1994b2589b1c99fc) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c9f938a22983cd6743e0e280acba6c89') in 0.000473 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkSoundSeedGrain.dll using Guid(2c552ba425bd241139b3972de9b75ab8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '474d9591cb4763f65fd45a0c7c652487') in 0.000444 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkConvolutionReverb.dll using Guid(4ca5755fc35d44d3eab0bed52dec244d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bcc331f9ebf885164a47714fc0966635') in 0.000553 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkSynthOne.dll using Guid(6d421d49c676546ac9a3ec872c1d359b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'dd9d5a34d15ff0cd7436729ef7a20b5c') in 0.000567 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/McDSP.dll using Guid(ae62b83a49da24f38acfa499c18034c6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6912060e8aeae47d58a7d05c05c6ad4e') in 0.000487 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Debug/AkSoundEngine.dll using Guid(9f5c23ff54d784f178bfce825da93968) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5a886ce89d2b9d3dba68464c9b5b8ccd') in 0.000637 seconds
Start importing Assets/StreamingAssets/desc.txt using Guid(ee388e9381e2740138b80ae2c4a5c927) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0ff15f222fe67abe901cc1ee19e4d893') in 1.098440 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Galaxy Rush.wproj using Guid(37f517bf8c1b94e75957500d8e61ff40) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '26d37f161a6fc500b947e7a231d592e3') in 0.513666 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Galaxy Rush.crossover.wsettings using Guid(29353b1c259a945e48c0c10926644f10) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f0c91abff70d2ba19027d6b11ed19d27') in 0.379129 seconds
Start importing Assets/Wwise/Tools/WwiseIDConverter.py using Guid(ad7d5d6a782e54c3c95b8d1980047436) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'af27d136f19a128d01994c19e355694d') in 0.081895 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Galaxy Rush.crossover.validationcache using Guid(ffb7e059b2d914c7a98f8bffe3c5d744) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a05c8ccc9a61644cf74542b5b333937a') in 0.023649 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Metadata/Default Work Unit.wwu using Guid(00a65a1cf8f954624a6a592d7af0bd9e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '52ad1127af5a2a97efa8043eac70ab3f') in 0.491252 seconds
Start importing Assets/WwiseProject/Galaxy Rush/SoundBanks/Default Work Unit.wwu using Guid(8091351fdf448472490f3f9942753d10) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'be834533f760a66d594dc2a88239a04f') in 0.001233 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Soundcaster Sessions/Default Work Unit.wwu using Guid(a0d82580c09f04f6fb48ad04f43a9892) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7b8ebeaadb7d8d8e6fac3432ee30a78b') in 0.000899 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Triggers/Default Work Unit.wwu using Guid(815752c5d2df24d7bb19243fbd20ee0f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'aff9ba3e2faa7fd22e01ea7ce4dd24ad') in 0.000600 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Switches/Default Work Unit.wwu using Guid(1223c78a0f3a94f8eb23f4d077923baf) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'dbbb02a0cbc1507d07e58c50fdf225a0') in 0.000592 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Queries/Default Work Unit.wwu using Guid(52fd9f864467747e18bb28919c6f3b2f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5fcb9694b8abf8ccf7f428c2445120bf') in 0.000869 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Interactive Music Hierarchy/Default Work Unit.wwu using Guid(d24f6da6cfaa948b6893a3d50f3f2a50) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b47227b77b762fbb2e6aee04802234f5') in 0.000759 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Actor-Mixer Hierarchy/Factory Synth One.wwu using Guid(63b6492a3c1cc4d6d80e51d84b1a45d5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3b9927efcfae28154cd961a9b3ef221a') in 0.000696 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Effects/Default Work Unit.wwu using Guid(f3c2b6b8836d44fa286b4e002948e456) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a285ad473daaa2a89a603d3181d8cd6a') in 0.000800 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Presets/Default Work Unit.wwu using Guid(a447e6c13fd3c469a8f0420019ff9555) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '15bd1290b9499df651e3f87bae935941') in 0.000632 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Conversion Settings/Default Work Unit.wwu using Guid(6555195e122074f1e9a9c94809cbb371) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '790fa29fcc6a7ff7b201763b6837593a') in 0.000560 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Virtual Acoustics/Factory Acoustic Textures.wwu using Guid(854635c9158444412afa6856a2d7677f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9de333740d6983a2add2dbad45537fe5') in 0.000574 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Presets/Factory Spatial Audio.wwu using Guid(e523f8b53c2cf4ca3a4f9fddc1608cf6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e1eaf2b8923f8b8fd4181b9e6c0c498f') in 0.000576 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Virtual Acoustics/Default Work Unit.wwu using Guid(97273630e5993462aac7e0933a8b28a4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cc71cfa5a8499531a2bf381078c1c6f9') in 0.000782 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Conversion Settings/Factory Conversion Settings.wwu using Guid(48a14636c4ed9497599b20226bb4730c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0cf6f49cfd057900a3620047f177f8ba') in 0.000774 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Queries/Factory Queries.wwu using Guid(b9e194ac3956c42db878fb93dc764e97) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6ba866b2ca000ea3bdf1cd7d0c31953e') in 0.000562 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Modulators/Default Work Unit.wwu using Guid(f9f08c33dc5f04261b86712f4cb91e42) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a16831d328e8258fd68504139b88ab7b') in 0.000550 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Mixing Sessions/Default Work Unit.wwu using Guid(0a5f4c8ad227048d3b82414391f1e616) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '22d84ee357d364273d1c9bddfd602914') in 0.000633 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Audio Devices/Default Work Unit.wwu using Guid(5ad9b6c134202438ba1903242002ac24) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3e9eb68dc906be121bcc4995949f286a') in 0.000584 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Control Surface Sessions/Default Work Unit.wwu using Guid(8b30fa518085a4c12b2556bca9711699) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6c8b9bd5a6fe8b502a134514a357ad7c') in 0.000558 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Dynamic Dialogue/Default Work Unit.wwu using Guid(cbd801b906eb641c79dfbf034fa74855) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cdded2ffa006cd773146969759814f17') in 0.000545 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Game Parameters/Default Work Unit.wwu using Guid(eb1598fab73f64498b2f90c078b6d922) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c1d308d37ddf489d13fac0962b2ae63b') in 0.000734 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Attenuations/Default Work Unit.wwu using Guid(bd9f02c8e980f487287d78e4e5c65e64) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5f8ac8cc5c1cf805a409f2e06cc07dbb') in 0.000721 seconds
Start importing Assets/WwiseProject/Galaxy Rush/States/Default Work Unit.wwu using Guid(3e936cf58b4214c4f9901c1bcaadaa25) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f77be0426a626c878f673264b0bcfc00') in 0.000851 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Effects/Factory Effects.wwu using Guid(4ec6c2ffb19c945ffaa226ebb447bce6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd5084a09a007e8c0cf0c2a4caf72519d') in 0.000557 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Events/Default Work Unit.wwu using Guid(7e6bd819e94bc41e4b3e80a431d62b87) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'db6e583b84dd3307a194f523abe4c409') in 0.000581 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Actor-Mixer Hierarchy/Default Work Unit.wwu using Guid(6fcff7422761d4049b6e65c912e62f9c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8a830627f96af97300e59bc3f7619e01') in 0.000634 seconds
Start importing Assets/WwiseProject/Galaxy Rush/Master-Mixer Hierarchy/Default Work Unit.wwu using Guid(7f799798554be48aca63a5f400b4d1b6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '20c86e1ed12b4d3a47f691494c4f3208') in 0.000542 seconds
Start importing Assets/Wwise/Documentation/Windows/ja/WwiseUnityIntegrationHelp_ja.chm using Guid(01dc4e7f97dd94070a06d0ef9f49aa8c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cf4ed18f224f9a4e578eddfe8f8a3af9') in 0.026309 seconds
Start importing Assets/Wwise/Documentation/Windows/ko/WwiseUnityIntegrationHelp_ko.chm using Guid(48adb71ebf6f147e3b743859ca209180) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '740aab67740cbd6d0dc57b999ccaf3b6') in 0.001165 seconds
Start importing Assets/Wwise/Documentation/Windows/zh/WwiseUnityIntegrationHelp_zh.chm using Guid(59957ae7076564ff2b1dfd2686905527) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9742825ad435b0f2eb49385cc0a203cc') in 0.000705 seconds
Start importing Assets/Wwise/Documentation/AppleCommon/ja/WwiseUnityIntegrationHelp_Mac_ja.chm using Guid(3b648160516654b5fa2166752dd1b5c5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e90830072af75d31ee1af805e64a273a') in 0.000672 seconds
Start importing Assets/Wwise/Documentation/AppleCommon/ko/WwiseUnityIntegrationHelp_Mac_ko.chm using Guid(cc1adfa157dc94f2fabb53991351601a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '08f47acda7046ba074b367b898107bce') in 0.000639 seconds
Start importing Assets/Wwise/Documentation/Windows/en/WwiseUnityIntegrationHelp_en.chm using Guid(ad514883cfe1940179b0cdf7962505ff) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e9b44b40ccaff34d076a49bbe1ddd670') in 0.000593 seconds
Start importing Assets/Wwise/Documentation/AppleCommon/zh/WwiseUnityIntegrationHelp_Mac_zh.chm using Guid(dd766f699af174ac7b5e52da05c0f95e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7e1250883f12f6ae442a95bacd8e875b') in 0.000623 seconds
Start importing Assets/Wwise/Documentation/AppleCommon/en/WwiseUnityIntegrationHelp_Mac_en.chm using Guid(4e7460f86d46e4ac99130eb0dcdbe839) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7c4dc5646cdfaed347212fb835115f32') in 0.000612 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Debug/AkSoundEngine.pdb using Guid(20920d803a7a3401c9cd06cc7dbeae61) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0cc68f91bcbe44bf0e15645e8003b4d9') in 0.023416 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkMotion.pdb using Guid(11ffade5c03ea45e2b51d0dd691049cf) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '265d778ab3c9d4ada59e4f0f65083ee0') in 0.000981 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkSoundSeedAir.pdb using Guid(416dc54578f314158b5040a4a1cbc8f7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '82e2232a930c5fc6da10cf2babfa89d6') in 0.000892 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Release/AkSoundEngine.pdb using Guid(c28e954cae4b04106b4a32801c284689) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '79eb26ec9c3a380cc5dc6957b5257ee9') in 0.000687 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Profile/AkSoundEngine.pdb using Guid(24fa0cc933e1c4c4087c87527cfde12f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ed66fe5f616c5d272606899cc9512c68') in 0.000611 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Release/AkSoundEngine.pdb using Guid(e4e9034eb92aa4270afc6575183d5bce) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e85d2250edc1fe35b76f8beda72f8177') in 0.000586 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkConvolutionReverb.pdb using Guid(d5841812047274a3f83b27cc8a243132) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0d25f91c8748ee250971fad43ff03f90') in 0.000597 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/Auro.pdb using Guid(462ed385a5bb34429923dacb0e0cff9b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd8bb7bd8dbb6b3c586ee13a41cc03129') in 0.000602 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/Auro.pdb using Guid(e693dcf9736cc4278bd7f39df826ffba) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '95081c34b9e2624abe3b99472c6db581') in 0.000632 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Debug/AkSoundEngine.pdb using Guid(f61c2766fcfda4aaf890051c4a021225) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '222a8b826df04bf0fde2e53263409895') in 0.000804 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkConvolutionReverb.pdb using Guid(b75a630fb830341a2a66cfd4ca9d35b0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bc4c8d7162a18a1b904e01d28e0ec82c') in 0.000948 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkSoundSeedAir.pdb using Guid(48f7b0d5ebe4a4223a483f271cb15abe) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'dfc8660d3455ff694c30ff8eff4f869b') in 0.000711 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/McDSP.pdb using Guid(b90a04d5a3fb1413badc17d35463ca45) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b0cd3f0861fd22df465732faeeb496ee') in 0.000611 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/MSSpatial.pdb using Guid(e90b6470fce5e4dd0851820e6cb14c4d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'eac5439d740b82e1ed7e4cf234badd2a') in 0.000912 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Profile/AkSoundEngine.pdb using Guid(9a55d27384f5548b8acae81bf9814e43) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'efaf6bafae8f22f8f30de738831f2947') in 0.000563 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/iZotope.pdb using Guid(0b3eb32fd8df24e41932ff5c56033efd) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a0fe8c1b26d95afa0f9a6f5aae39ec6a') in 0.000636 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkMotion.pdb using Guid(fb8ef4117d4a14b0a9869c557f9f84e5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '85e96363ef8156a4fe0319f8271a8ac3') in 0.000897 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkSoundEngineDLL.pdb using Guid(0c535c1b733cb4147a3918fdcf80ab0d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cfa2f268ed5d5d895a562eba07a17048') in 0.000817 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkSoundEngineDLL.pdb using Guid(1d030ed4e5de54f06916c3c3fe648e03) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '82420ce7f61469c01976fbc5cd140cb6') in 0.000647 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/iZotope.pdb using Guid(bdbacebe003cc40bbb326256564a4f12) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '902960f53ed91fdba00ea374899a5107') in 0.000651 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/McDSP.pdb using Guid(cd2bffe782c3b49bfaa61b601f11e227) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '13e1d8b54d2aaff2c8329cf9bd090add') in 0.000735 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkSoundSeedGrain.pdb using Guid(ddc6c6ef37d1649a5b9698763db52c25) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '89f571613e63a17c524e9377dc92e056') in 0.000605 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/MSSpatial.pdb using Guid(1f6f461c39f8148119eea7911b48a18c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '36c6bb239d5137dc36b5cd05ccf3cefd') in 0.000589 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkSoundSeedGrain.pdb using Guid(5f1870aca4fcd4e7a8f5a9d8a5c6fb5b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8d51bfe5d113d64f482caf0e492fcafd') in 0.000595 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle.dSYM/Contents/Info.plist using Guid(b2de0679b4c9e43c4bc5e32ea414c8ec) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0ea6cd6fc5bf45ed2e0a3830cc9a6918') in 0.080783 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/IntegrationDemoMotion/IntegrationDemoMotion.exe using Guid(d3c35c1eadc5b4965a69b790b38ce48e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '869750eb0edd845e861fc14e5f5967f9') in 0.087680 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle.dSYM/Contents/Info.plist using Guid(54b10276dcbea45fbba2656c44952d2c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '86c67c93ccc8b5cfbbbc57c796f7e713') in 0.000924 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/IntegrationDemo/IntegrationDemo.exe using Guid(a4006e8723f464108a45622be6481bec) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5b1d71cd8ed65561cebc945ee5bb4750') in 0.000863 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/IntegrationDemo/IntegrationDemo.exe using Guid(267e13e68c3b44b91b0c442ba4478c5e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3a07a77b9fe93e995fc2115b47f66305') in 0.000693 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle.dSYM/Contents/Info.plist using Guid(5ae1dbfb7e01f459093330a39ad46f91) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2d449563fd9afd974be3677300b8b06b') in 0.000843 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/IntegrationDemoMotion/IntegrationDemoMotion.exe using Guid(fb732536a216946c9b44785cbc8960d5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1a181ec8d33d99db8556967602fee2aa') in 0.000877 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle.dSYM/Contents/Resources/DWARF/AkSoundEngine using Guid(034253927e8c740d49beb7415246609b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '91aa0742aeb3f95fec3a86e3df873f55') in 0.000719 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle.dSYM/Contents/Resources/DWARF/AkSoundEngine using Guid(b7f2d0927455547df8efb28e10ad2ceb) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a70ffdcf43dba994821e9fc316b33b12') in 0.000528 seconds
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle.dSYM/Contents/Resources/DWARF/AkSoundEngine using Guid(efd68e4ff85ba4f99a0f3c08f2c8cae1) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7b1e154afd25ef9af5cb9afd06d8ad9e') in 0.000643 seconds
Start importing Assets/Wwise/Gizmos/wwise_white_on_gray.png using Guid(30653cefc85e84a0cb324b17a4b604b8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e485b394d035af2a4d88d22f42ad27a9') in 0.036051 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/switch_nor.png using Guid(b096635de1b384ac985a953b8b3cef22) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5d6c2fe6ea66bb5edafa7a1802d19984') in 0.002089 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/bus_nor.png using Guid(b116784ec4e3d422e8ef0ab6c6491ddf) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '69b83be32fd08baba78a422f9418609b') in 0.001601 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/gameparameter_nor.png using Guid(920b4e85854a44612aab3c5e6f7918f2) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1cf751a7b3f6d75107c16fdddc474cee') in 0.001456 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/wproj.png using Guid(a47ac9602733241328c7565928caafee) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '83f2948280bf34a66c8c7f3c1f0888b3') in 0.001609 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/switchgroup_nor.png using Guid(86ab2068b14474f65bb5124bf9fba02c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b4e2d16075d64447f7f560972970d171') in 0.001819 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/state_nor.png using Guid(471ebf104adc0409898b492aaba145a9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3ef208da2abd2d58363b3225f3494256') in 0.001335 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/event_nor.png using Guid(68049f259f0c24cf1a4c9cc462f294dd) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '54013312ddbbe0a62afb6aae6f60b0ba') in 0.001314 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/soundbank_nor.png using Guid(d97b89334ac224ff188e9cb737ed4a0e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bb129f884a4d8bd360a2988ba55190b8') in 0.001351 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/auxbus_nor.png using Guid(cc5abe5ad627640a895ca97d7be686b5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '43f9d20cda02a8789b2e9197f2f999c6') in 0.001365 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/folder_nor.png using Guid(0d7492e949a3a4308874c513f07927a5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '99dd0dacb3be18fffc01a2a7770fee36') in 0.001639 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/physical_folder_nor.png using Guid(4d08f466145be4b288f2200b7cf888f4) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ea92f2a8cb20cc2a06e58ffbc27f69da') in 0.001728 seconds
Start importing Assets/Wwise/Gizmos/WwiseAudioSpeaker.png using Guid(2e953a420640b428e9616bbe9681f9fd) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9cb80b27899066bfbaea4b22383af347') in 0.002398 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/acoustictexture_nor.png using Guid(8ec92642f4d2d4e7bbb80840e3ffb315) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6247f6f658a26e636b458bac35dbe2a7') in 0.001534 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/blank.png using Guid(be6426aeedd9d454bab1b1ff5396129c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a5ee3c4482457036ba233ec4a29496cb') in 0.001507 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/workunit_nor.png using Guid(7f6e5ade00246469b9509fee3687567e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '87465199dabfbac0204dcc80fdcc6621') in 0.001276 seconds
Start importing Assets/Wwise/API/Editor/WwiseWindows/TreeViewIcons/stategroup_nor.png using Guid(bf895155b301e41e8be7c73c118e70da) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'af99a6c9e2bce9e236e51bd952cb5cc1') in 0.001482 seconds
Start importing Assets/Wwise/API/CHANGELOG.md using Guid(6147a93889e10445fb7ce45cc1a1f657) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'dd7d54b00ac79f46b6e5cb83076b31f8') in 0.000941 seconds
Start importing Assets/WwiseSettings.xml using Guid(c12383fb6e60d420492ab5817feb217e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5e6297f69c76a70e0bcb895553b69e8b') in 0.000756 seconds
Start importing Assets/Wwise/MonoBehaviour/CHANGELOG.md using Guid(62c0c144ae68d47edbe4b908e77624ca) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6f891cdfe0af25c283910964c779d050') in 0.000790 seconds
Start importing Assets/Wwise/MonoBehaviour/LICENSE.md using Guid(724f0deaca1894adfb2a406e2a0148e8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '93fd721e49d13f58a103e8c080fdfc4d') in 0.000959 seconds
Start importing Assets/Wwise/MonoBehaviour/package.json using Guid(a24b0833406d34bf0824ebdb5bfeaedc) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7acf9a06322aee40c9d220be3146747d') in 0.000860 seconds
Start importing Assets/Wwise/Timeline/README.md using Guid(93d87e2af99ce47449bba9a87975dd50) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e21ea9250852d1a5fffefc0953484334') in 0.000785 seconds
Start importing Assets/Wwise/Timeline/CHANGELOG.md using Guid(e40bab58e6a1f489cbbd40ded6594656) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8c8504565bd2d7aad0d401b17aa8ff6f') in 0.000783 seconds
Start importing Assets/Wwise/API/README.md using Guid(0641fc590d6424b15a46c0365c5f4afc) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5b8149abe17756cca348871241ad9161') in 0.000776 seconds
Start importing Assets/Wwise/Timeline/package.json using Guid(96e5a85ba58784f30bab150827a45573) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '63c9a08b87bfa35acb3618670f307828') in 0.000745 seconds
Start importing Assets/Wwise/Version.txt using Guid(37e2b5b179cd6469baf4e32b285dc47d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b4d863a8d73e958f96b284f02974c155') in 0.000842 seconds
Start importing Assets/Wwise/API/LICENSE.md using Guid(caf1aec07f189400caf5efba2ba0ff98) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b3cdc255fe6279224ce251e25a347f6a') in 0.000847 seconds
Start importing Assets/Wwise/MonoBehaviour/README.md using Guid(cd2a63a44fcb34d7b92634f753ad8006) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '28a9391baf2fc6c2efb026ac18dc0023') in 0.000722 seconds
Start importing Assets/Wwise/API/package.json using Guid(6f733db443ce54f42b46c77fd4a704a1) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '274d50819e1efef86c62774f3ef5ab2a') in 0.000624 seconds
Start importing Assets/Wwise/Timeline/LICENSE.md using Guid(ff64d214c1ee74f7c866d7e76e8ca49e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e9fbc827e81ac0a308c2ae1a2451dea8') in 0.000674 seconds
Script 'Packages/com.unity.modules.subsystems/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.jsonserialize/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.test-framework/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.screencapture/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.cloth/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imgui/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequesttexture/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.android-logcat/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ai/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/Unity.Collections.LowLevel.ILSupport/README.txt.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.animation/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ugui/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.xr/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.rider/Rider/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.pixel-perfect/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.pixel-perfect/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.pixel-perfect/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.assetbundle/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imgui/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/Graphics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.tilemap/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.assetbundle/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.timeline/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/net35/unity-custom/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.aseprite/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/Unity.Collections.LowLevel.ILSupport/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/Gizmos/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/net35/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrainphysics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mathematics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/AOT/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.screencapture/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.timeline/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.timeline/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.cloth/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/PackageConversionData.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestassetbundle/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.profiling.core/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/IK/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.2d/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imageconversion/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrainphysics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imageconversion/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequest/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestassetbundle/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unityanalytics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.subsystems/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.rider/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.video/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.test-framework/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unityanalytics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Scripts/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vr/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics2d/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/Path/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.android-logcat/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.particlesystem/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.wind/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics2d/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.mobile/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vr/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.uielements/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestaudio/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.particlesystem/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/link.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.wind/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.android-logcat/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ugui/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.umbra/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Textures/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.sprite/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.tilemap/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ui/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.subsystemregistration/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mathematics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.mobile/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.psdimporter/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.androidjni/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/Tests/TestPackage/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Gizmos/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.audio/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/Tests/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vehicles/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/EditorResources/Overlay/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.subsystemregistration/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.rider/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestwww/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestaudio/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.2d/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.subsystemregistration/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/TMP_SDF_SSD.cginc.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.vscode/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vehicles/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.xr/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.profiling.core/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/TMP_Properties.cginc.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/AOT/Newtonsoft.Json.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/TMP_SDF Internal Editor.shader.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.umbra/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/EditorResources/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestwww/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/Lib/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.director/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.aseprite/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.vscode/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.jsonserialize/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.director/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.audio/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrain/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.sprite/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.androidjni/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.video/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ai/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/PackageConversionData_Assets.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.spriteshape/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mathematics/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Package Resources/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrain/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.sprite/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.animation/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/Newtonsoft.Json.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.aseprite/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/Unity.Burst.Unsafe.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.psdimporter/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequest/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.uielements/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequesttexture/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ugui/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.spriteshape/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ui/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.spriteshape/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.psdimporter/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.vscode/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 InitialRefreshV2(bool, bool)
 #8 Application::InitializeProject()
 #9 NoGraphicsMain()
 #10 EditorMain(int, char const**)
 #11 main
 #12 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 InitialRefreshV2(bool, bool)
 #8 Application::InitializeProject()
 #9 NoGraphicsMain()
 #10 EditorMain(int, char const**)
 #11 main
 #12 start

Refreshing native plugins compatible for Editor in 4.87 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=c6a34068c71564182b7debfd3dcbc536): Total: 13.729 seconds - Initiated by InitialRefreshV2(ForceSynchronousImport)
	Summary:
		Imports: total=581 (actual=581, local cache=0, cache server=0)
		Asset DB Process Time: managed=32 ms, native=5324 ms
		Asset DB Callback time: managed=392 ms, native=37 ms
		Scripting: domain reloads=1, domain reload time=3745 ms, compile time=4169 ms, other=27 ms
		Project Asset Count: scripts=5702, non-scripts=1586
		Asset File Changes: new=88, changed=581, moved=0, deleted=9
		Scan Filter Count: 1
	InvokeBeforeRefreshCallbacks: 0.126ms
	ApplyChangesToAssetFolders: 0.073ms
	Scan: 673.074ms
	OnSourceAssetsModified: 3.886ms
	UnregisterDeletedAssets: 0.025ms
	GetAllGuidsForCategorization: 0.916ms
	CategorizeAssets: 178.961ms
	ImportOutOfDateAssets: 6745.039ms (-964.533ms without children)
		ImportManagerImport: 3522.987ms (205.275ms without children)
			ImportInProcess: 3317.126ms
			UpdateCategorizedAssets: 0.585ms
		CompileScripts: 4168.727ms
		ReloadNativeAssets: 0.009ms
		UnloadImportedAssets: 11.655ms
		ReloadImportedAssets: 2.678ms
		EnsureUptoDateAssetsAreRegisteredWithGuidPM: 2.125ms
		InitializingProgressBar: 0.005ms
		PostProcessAllAssetNotificationsAddChangedAssets: 0.000ms
		OnDemandSchedulerStart: 1.386ms
	PostProcessAllAssets: 549.820ms
	Hotreload: 10.229ms
	GatherAllCurrentPrimaryArtifactRevisions: 0.284ms
	UnloadStreamsBegin: 0.294ms
	PersistCurrentRevisions: 0.739ms
	UnloadStreamsEnd: 0.024ms
	GenerateScriptTypeHashes: 0.365ms
	Untracked: 5565.845ms
Application.AssetDatabase Initial Refresh End
Scanning for USB devices : 0.041ms
Initializing Unity extensions:
Asset Pipeline Refresh (id=e813f460834e649fbbfade4ac90b74fa): Total: 0.043 seconds - Initiated by RefreshV2(NoUpdateAssetOptions)
[Licensing::Client] Successfully resolved entitlements
[MODES] ModeService[none].Initialize
[MODES] ModeService[none].LoadModes
[MODES] Loading mode Default (0) for mode-current-id-GalaxyRush
ProgressiveSceneManager::Cancel()
Unloading 2 Unused Serialized files (Serialized files now loaded: 0)
Unloading 142 unused Assets / (415.8 KB). Loaded Objects now: 5115.
Memory consumption went from 0.85 GB to 0.85 GB.
Total: 4.429250 ms (FindLiveObjects: 0.163583 ms CreateObjectMapping: 0.060667 ms MarkObjects: 3.960583 ms  DeleteObjects: 0.243709 ms)

WwiseUnity: Running install setup...
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 DebugLogHandler_CUSTOM_Internal_Log(LogType, LogOption, ScriptingBackendNativeStringPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #3  (Mono JIT Code) (wrapper managed-to-native) UnityEngine.DebugLogHandler:Internal_Log (UnityEngine.LogType,UnityEngine.LogOption,string,UnityEngine.Object)
 #4  (Mono JIT Code) [DebugLogHandler.cs:10] UnityEngine.DebugLogHandler:LogFormat (UnityEngine.LogType,UnityEngine.Object,string,object[])
 #5  (Mono JIT Code) [Logger.cs:61] UnityEngine.Logger:Log (UnityEngine.LogType,object)
 #6  (Mono JIT Code) [Debug.bindings.cs:102] UnityEngine.Debug:Log (object)
 #7  (Mono JIT Code) [AkWwiseSetupWizard.cs:49] WwiseSetupWizard:RunSetup ()
 #8  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #9 mono_jit_runtime_invoke
 #10 do_runtime_invoke
 #11 mono_runtime_invoke
 #12 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #13 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #14 Application::ParseARGVCommands()
 #15 Application::FinishLoadingProject()
 #16 NoGraphicsMain()
 #17 EditorMain(int, char const**)
 #18 main
 #19 start

Unloading 1 Unused Serialized files (Serialized files now loaded: 0)
Unloading 1 unused Assets / (Unknown). Loaded Objects now: 5119.
Memory consumption went from 0.85 GB to 0.85 GB.
Total: 3.837917 ms (FindLiveObjects: 0.147375 ms CreateObjectMapping: 0.057750 ms MarkObjects: 3.618667 ms  DeleteObjects: 0.013417 ms)

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 6.11 ms, found 22 plugins.
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.57 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkSynthOne.dll using Guid(6d421d49c676546ac9a3ec872c1d359b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'dd9d5a34d15ff0cd7436729ef7a20b5c') in 0.000799 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.42 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=445b17f484bef4233805e176f3f56d5e): Total: 0.037 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.48 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkGuitarDistortion.bundle using Guid(bc0b020495a8d4caf8f33ceaeb523971) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '97e4ac4d8013195ff90ad8e59de29f93') in 0.000738 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.29 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=5275d636160b5406893ba1ecd4e18d27): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.54 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libMcDSP.bundle using Guid(af031a8b4388e4b7d8a1bba3dfa752ae) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b542642de63b533c1524e7b687302a47') in 0.000675 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.18 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=e9228801577fa4bb28f0cb1babb24a85): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.43 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/iZotope.dll using Guid(c98acb1761e72487cad147372db997f7) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2def7427e48fd9a394bf900f11fd5dc8') in 0.000693 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.19 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=e5f7dfd590cb846d1bcfd44379d64e25): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.64 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkConvolutionReverb.dll using Guid(4ca5755fc35d44d3eab0bed52dec244d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bcc331f9ebf885164a47714fc0966635') in 0.000798 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.83 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=410d2150ca9d7420491bb8b3dabbd585): Total: 0.025 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.25 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkSoundSeedAir.dll using Guid(b468942b0350b4506bd6c05ecf7dbeff) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '378d73a90c75b869da9aa2b3bc58101b') in 0.000784 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.26 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=70646a2ccec9e48c6898f156ed0155e7): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.23 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/Auro.dll using Guid(a2a34216b25a04a11bcf995eee74dd65) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7cd8d7d32bbdc0c4ad39b4fd8c6211d6') in 0.000758 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.43 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=12421d4f2b2d54c63b3428685ef17662): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.92 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkSoundSeedGrain.bundle using Guid(c4652f27c620c4a43a3c09249518fe77) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '7fbbdf8c2480229e2ba0e5253e1bf182') in 0.000682 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.30 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=9226e2303f61740388c8bb58dc8b19ba): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.54 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libiZotope.bundle using Guid(96fcbf1e4149f4bfaa5a61d5244b6928) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'fa31f39f0a130d5685f80c4fd34c5274') in 0.000685 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 5.23 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=9eb805c1e441e4dea90a3964731dbe44): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.53 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkSynthOne.bundle using Guid(58a88e20a56af41d6852c14191e36a2b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '4fc58749cbccfc9f3dcfbeb755ec8a76') in 0.000747 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.02 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=0534cb4509e89482d9ede54c5dbba445): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.50 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/McDSP.dll using Guid(ae62b83a49da24f38acfa499c18034c6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6912060e8aeae47d58a7d05c05c6ad4e') in 0.000807 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.07 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=ffad08d9ec67443bc804954f1b6aa6d3): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.39 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkSynthOne.dll using Guid(91698ff98a6214f0c877180f54f74b7a) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'df7a25db53fd997c1e8c5f6300b27b07') in 0.000677 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.01 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=480b87addb7e541ef9e1aee4581d6d06): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.60 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Profile/AkSoundEngine.dll using Guid(30cfe76695924457ca26eeec9c1f31a8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e2445dc66dd6febd13b8b5e53cd7c27a') in 0.000712 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.10 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=deaa7a21011754fa08e7e0262ca07c58): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.38 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle using Guid(46bdc35bce3ef4860968922bb4abb01c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '720131e6d95ccc399dfda8c6a28790ca') in 0.000720 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.35 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=779860088eea541b1902ad4a1aea8bff): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.41 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/MSSpatial.dll using Guid(14659e23c11074be78cc58c8049bbc14) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '46b51fcb43870ab0ad72604d798281d8') in 0.000723 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.30 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=48d06eb09e3314ba09cad051ee33a2b1): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.39 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkConvolutionReverb.dll using Guid(f854204b5d8944308ae95a46cc90b17b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c8f4849687c1cadb019020fb491188fa') in 0.000606 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.05 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=824c43c555c424841930a41b908a138e): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.45 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkConvolutionReverb.bundle using Guid(aa8c46e4aa3dc4f079cf5160fb709ed8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a78334b3c3f37ab7bc8769cbed9f52d6') in 0.000669 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.27 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=4be518089de374a6fa33572c3999341e): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.49 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkRoomVerb.bundle using Guid(efba306497a6549f8b34f4bfc81ed19f) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '1798c2c5b8ba447679a73254b1dff361') in 0.000750 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.29 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=f66f03552df094ce5bac5cf9d722a579): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.45 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkRecorder.bundle using Guid(ad75faee449484f288f319a70b5c7c46) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '28309ecf926df4638a08338f33ef4b8e') in 0.000663 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.01 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=194d93c08e6a64e4eadddb812e7aff7f): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.34 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkSoundSeedAir.dll using Guid(8908b152bd3b040068cac9c61a966a46) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2c4ba8438d7a932515f384da12854458') in 0.000686 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.26 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=a17dc18a411cd4e51b536837c0c711a4): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.32 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/iZotope.dll using Guid(f16541e8d255e41c98b7b10c90d5e63b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'f7a71c1d9a2eef02f83e9f70b43e6cf8') in 0.000692 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.23 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=df7a753c05e204b40b39baf69d22f489): Total: 0.024 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.51 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle using Guid(e76571957d2f04570aa28c26fba9a524) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3fb85970ac8c076de9462bb5855a87c0') in 0.000696 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.22 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=cd1a130f482c0433da4b2547bf7680c4): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.39 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Debug/AkSoundEngine.dll using Guid(413a3357e49be4ee28a9e3d66ee2b7ea) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'cbee8f4ad0f193126dc30170760dc94e') in 0.000811 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.05 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=639375aaf9aaa49a8ad4010458266041): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.40 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkTimeStretch.bundle using Guid(d1c2bcca9121f4a40a6a779da9d39681) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ce29bb680372af5e2d6dd5cc56191377') in 0.000687 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.22 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=3f43dd0e011ba4e45b9c6760ac4bd21a): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.24 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkMotion.dll using Guid(481149b57f60143fba0c8fcf3bf4ac07) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b639e22a7281e89b8077b20a1920c2cc') in 0.000689 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.31 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=4492e6a63bb29471bb94e27814e7bca5): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.33 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle using Guid(55f8101e3380b45858aa64134f726dfc) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '0635ebaa1b5d3d608e478bfdea9167dc') in 0.000684 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.11 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=2ad40fb95efd84108a579f56e839696e): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.40 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/Auro.dll using Guid(0cfc9575584f042b1994b2589b1c99fc) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c9f938a22983cd6743e0e280acba6c89') in 0.000676 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.07 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=6f54f5d8bfca74e7d9e6e5c96ad02936): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.30 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkStereoDelay.bundle using Guid(485aeb22bbe1a4cfd973fdbc2c7efb8d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ade3c43b589f9d02f2002ae838ffa309') in 0.000695 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.29 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=77242fc8c1c174701871c017015a33fa): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.38 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAuro.bundle using Guid(5c1c53cd90d8447c2862824cc1e0b6a1) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd46546b562dedadb2d037144410c4656') in 0.000677 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.07 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=a30deb04de82e4d22b62634c417264d8): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.41 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/McDSP.dll using Guid(667a8c1b550e2463d8469f00158ef71b) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '266bcbe322848d5ed5c01bf010d56915') in 0.000681 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.07 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=ff98041129da342d7a6a72fdc8f96d82): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.29 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Release/AkSoundEngine.dll using Guid(fb30640adbd2540008b2bc9368692ed5) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '366bbeac69cc8d907bda953cb25a0e2b') in 0.000699 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.40 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=33ecaf633295749ef8d5c3f9ed41f797): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.40 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Debug/AkSoundEngine.dll using Guid(9f5c23ff54d784f178bfce825da93968) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '5a886ce89d2b9d3dba68464c9b5b8ccd') in 0.000753 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.25 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=174d051a1fc974a8181a3bd7af7de4f9): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.40 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Release/AkSoundEngine.dll using Guid(8bdcba31273d5468fbcda98cb20c5631) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '800efdeefd786b2488cb78c906a2d4af') in 0.000673 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.03 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=8e3c779f051324eadb83986236b53240): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.44 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAk3DAudioBedMixer.bundle using Guid(502b72261e4754f0e978abe242c44e03) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '220870097e781679d481b581a7309328') in 0.000672 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.24 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=2c0a3282627b14b2f98a7818cb9fbe06): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.21 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/MSSpatial.dll using Guid(e6d988f8dbd394a0bab9f58444c666be) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'fc36ae3c3b7e80b415c6f416c73a7a70') in 0.000712 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.17 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=20e4455108f6b4ee296465fa19cceb90): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.48 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkPitchShifter.bundle using Guid(6f0e6d9a69c1c4324a7b267500080352) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '06971e73403aa6f31ce5ce810039c4cd') in 0.000678 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.17 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=f74bd40cedbd3430a9006947b6b57090): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.51 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkSoundSeedAir.bundle using Guid(febe4b432b8ec4196a06219a2767fd61) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ebf2984dfefb8c019b5fe2f54b8d2858') in 0.000783 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.12 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=ef63a02b3af924111870bf31fdcbd1f9): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 5.07 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkFlanger.bundle using Guid(4a54d273de6244fcaa6c7194a99f40e3) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e379db533973aca2096b59f6283a129e') in 0.000789 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.30 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=da295379578d2499aaee22cf4e0ed6d5): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.28 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Profile/AkSoundEngine.dll using Guid(8ad93009ec910438cb3e642884ef8a8c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'bcb7c59e12f8fd46334af4e96441210d') in 0.000758 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.39 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=bdbd145d570b4432c9a213dee6f5a384): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.31 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/DSP/AkSoundSeedGrain.dll using Guid(2c552ba425bd241139b3972de9b75ab8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '474d9591cb4763f65fd45a0c7c652487') in 0.000714 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.44 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=ec195e42831d1402ba35b44623f380f6): Total: 0.024 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.51 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkMotion.dll using Guid(c8170aefd437c4c199bf5c3c8b5d69e6) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '11308b61140d88cf85c230a7237b10b6') in 0.000753 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.22 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=e11c0bb2efd10493e924a7cb0158744f): Total: 0.024 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.42 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkReflect.bundle using Guid(39f7a51ef748b462faa074d761426fc2) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '6552b0a595afc35f61f33ff0bdf3f212') in 0.000747 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.18 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=78e9bd917882f4370bed6e0e063131c2): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.45 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/DSP/AkSoundSeedGrain.dll using Guid(758a8cc6563da4e9e875d6b6785653d0) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '77cdbe06cc84685436c4f403f4b70151') in 0.000746 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.36 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=44664f72229b14045a9aa300527af99b): Total: 0.025 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.51 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkTremolo.bundle using Guid(f6f2bf97d803642629ceae06e240aa78) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'ffae78772c2a4d618a1be1e9f1ad36e7') in 0.000706 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 5.11 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=ffee48fdef4e44fad8552ef8de154b40): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.57 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/DSP/libAkHarmonizer.bundle using Guid(7368cacc9c2dc415d9578ae7d86ccb5e) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '094eaba834d11d6010c14d17bff72724') in 0.000764 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:646] AkPluginActivator:DeactivateAllPlugins ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:503] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.18 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=0f2086ed922aa43dfa2e5d6b474830ad): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Start importing Assets/Wwise/ScriptableObjects using Guid(18475bad825824b56ab467ef60f859b9) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '8c67ed03a1fb98bbda7bbda0b4b26553') in 0.000966 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 CreateFolderV2(core::basic_string<char, core::StringStorageDefault<char>> const&)
 #10 AssetDatabaseBindings::CreateFolder(core::basic_string<char, core::StringStorageDefault<char>> const&, core::basic_string<char, core::StringStorageDefault<char>> const&)
 #11 AssetDatabase_CUSTOM_CreateFolder(ScriptingBackendNativeStringPtrOpaque*, ScriptingBackendNativeStringPtrOpaque*)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:CreateFolder (string,string)
 #13  (Mono JIT Code) [AkUtilities.cs:633] AkUtilities:CreateFolder (string)
 #14  (Mono JIT Code) [AkWwiseInitializationSettings.cs:487] AkWwiseInitializationSettings:GetOrCreateAsset<T_REF> (string,string)
 #15  (Mono JIT Code) [AkWwiseInitializationSettings.cs:253] AkWwiseInitializationSettings:get_Instance ()
 #16  (Mono JIT Code) [AkInitializer.cs:89] AkInitializer:OnEnable ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void__this__ (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 MonoBehaviour::CallMethodIfAvailable(int)
 #24 MonoBehaviour::AddToManager()
 #25 SetupScriptForIManagedObjectHost(Object*, ScriptingClassPtr, MonoScript*)
 #26 AddComponentUnchecked(GameObject&, Unity::Type const*, ScriptingClassPtr, MonoScript*, core::basic_string<char, core::StringStorageDefault<char>>*, AwakeFromLoadQueue*)
 #27 AddComponent(GameObject&, Unity::Type const*, ScriptingClassPtr, core::basic_string<char, core::StringStorageDefault<char>>*, AwakeFromLoadQueue*, char const*, dynamic_array<Unity::Component*, 0ul>*)
 #28 MonoAddComponentWithType(GameObject&, ScriptingSystemTypeObjectPtr)
 #29 UndoBindings::AddComponent(GameObject*, ScriptingSystemTypeObjectPtr, ScriptingExceptionPtr*)
 #30 Undo_CUSTOM_AddComponent(ScriptingBackendNativeObjectPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #31  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.Undo:AddComponent (UnityEngine.GameObject,System.Type)
 #32  (Mono JIT Code) [Undo.bindings.cs:163] UnityEditor.Undo:AddComponent<T_REF> (UnityEngine.GameObject)
 #33  (Mono JIT Code) [AkWwiseSetupWizard.cs:551] WwiseSetupWizard:CreateWwiseGlobalObject ()
 #34  (Mono JIT Code) [AkWwiseSetupWizard.cs:519] WwiseSetupWizard:Setup ()
 #35  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #36  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #37 mono_jit_runtime_invoke
 #38 do_runtime_invoke
 #39 mono_runtime_invoke
 #40 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #41 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #42 Application::ParseARGVCommands()
 #43 Application::FinishLoadingProject()
 #44 NoGraphicsMain()
 #45 EditorMain(int, char const**)
 #46 main
 #47 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 CreateFolderV2(core::basic_string<char, core::StringStorageDefault<char>> const&)
 #10 AssetDatabaseBindings::CreateFolder(core::basic_string<char, core::StringStorageDefault<char>> const&, core::basic_string<char, core::StringStorageDefault<char>> const&)
 #11 AssetDatabase_CUSTOM_CreateFolder(ScriptingBackendNativeStringPtrOpaque*, ScriptingBackendNativeStringPtrOpaque*)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:CreateFolder (string,string)
 #13  (Mono JIT Code) [AkUtilities.cs:633] AkUtilities:CreateFolder (string)
 #14  (Mono JIT Code) [AkWwiseInitializationSettings.cs:487] AkWwiseInitializationSettings:GetOrCreateAsset<T_REF> (string,string)
 #15  (Mono JIT Code) [AkWwiseInitializationSettings.cs:253] AkWwiseInitializationSettings:get_Instance ()
 #16  (Mono JIT Code) [AkInitializer.cs:89] AkInitializer:OnEnable ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void__this__ (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 MonoBehaviour::CallMethodIfAvailable(int)
 #24 MonoBehaviour::AddToManager()
 #25 SetupScriptForIManagedObjectHost(Object*, ScriptingClassPtr, MonoScript*)
 #26 AddComponentUnchecked(GameObject&, Unity::Type const*, ScriptingClassPtr, MonoScript*, core::basic_string<char, core::StringStorageDefault<char>>*, AwakeFromLoadQueue*)
 #27 AddComponent(GameObject&, Unity::Type const*, ScriptingClassPtr, core::basic_string<char, core::StringStorageDefault<char>>*, AwakeFromLoadQueue*, char const*, dynamic_array<Unity::Component*, 0ul>*)
 #28 MonoAddComponentWithType(GameObject&, ScriptingSystemTypeObjectPtr)
 #29 UndoBindings::AddComponent(GameObject*, ScriptingSystemTypeObjectPtr, ScriptingExceptionPtr*)
 #30 Undo_CUSTOM_AddComponent(ScriptingBackendNativeObjectPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #31  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.Undo:AddComponent (UnityEngine.GameObject,System.Type)
 #32  (Mono JIT Code) [Undo.bindings.cs:163] UnityEditor.Undo:AddComponent<T_REF> (UnityEngine.GameObject)
 #33  (Mono JIT Code) [AkWwiseSetupWizard.cs:551] WwiseSetupWizard:CreateWwiseGlobalObject ()
 #34  (Mono JIT Code) [AkWwiseSetupWizard.cs:519] WwiseSetupWizard:Setup ()
 #35  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #36  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #37 mono_jit_runtime_invoke
 #38 do_runtime_invoke
 #39 mono_runtime_invoke
 #40 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #41 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #42 Application::ParseARGVCommands()
 #43 Application::FinishLoadingProject()
 #44 NoGraphicsMain()
 #45 EditorMain(int, char const**)
 #46 main
 #47 start

Refreshing native plugins compatible for Editor in 7.93 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=5ba7b87d3c74141e19bb0f2b145682d3): Total: 0.023 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 CreateSerializedAssetV2(Object**, int, core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::CreateAssetMask, AssetResolver const&)
 #8 AssetDatabase::CreateSerializedAsset(Object&, core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::CreateAssetMask)
 #9 AssetDatabaseBindings::CreateAsset(PPtr<Object>, core::basic_string<char, core::StringStorageDefault<char>> const&, ScriptingExceptionPtr*)
 #10 AssetDatabase_CUSTOM_CreateAsset(ScriptingBackendNativeObjectPtrOpaque*, ScriptingBackendNativeStringPtrOpaque*)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:CreateAsset (UnityEngine.Object,string)
 #12  (Mono JIT Code) [AkWwiseInitializationSettings.cs:488] AkWwiseInitializationSettings:GetOrCreateAsset<T_REF> (string,string)
 #13  (Mono JIT Code) [AkWwiseInitializationSettings.cs:253] AkWwiseInitializationSettings:get_Instance ()
 #14  (Mono JIT Code) [AkInitializer.cs:89] AkInitializer:OnEnable ()
 #15  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void__this__ (object,intptr,intptr,intptr)
 #16 mono_jit_runtime_invoke
 #17 do_runtime_invoke
 #18 mono_runtime_invoke
 #19 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #20 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #21 MonoBehaviour::CallMethodIfAvailable(int)
 #22 MonoBehaviour::AddToManager()
 #23 SetupScriptForIManagedObjectHost(Object*, ScriptingClassPtr, MonoScript*)
 #24 AddComponentUnchecked(GameObject&, Unity::Type const*, ScriptingClassPtr, MonoScript*, core::basic_string<char, core::StringStorageDefault<char>>*, AwakeFromLoadQueue*)
 #25 AddComponent(GameObject&, Unity::Type const*, ScriptingClassPtr, core::basic_string<char, core::StringStorageDefault<char>>*, AwakeFromLoadQueue*, char const*, dynamic_array<Unity::Component*, 0ul>*)
 #26 MonoAddComponentWithType(GameObject&, ScriptingSystemTypeObjectPtr)
 #27 UndoBindings::AddComponent(GameObject*, ScriptingSystemTypeObjectPtr, ScriptingExceptionPtr*)
 #28 Undo_CUSTOM_AddComponent(ScriptingBackendNativeObjectPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #29  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.Undo:AddComponent (UnityEngine.GameObject,System.Type)
 #30  (Mono JIT Code) [Undo.bindings.cs:163] UnityEditor.Undo:AddComponent<T_REF> (UnityEngine.GameObject)
 #31  (Mono JIT Code) [AkWwiseSetupWizard.cs:551] WwiseSetupWizard:CreateWwiseGlobalObject ()
 #32  (Mono JIT Code) [AkWwiseSetupWizard.cs:519] WwiseSetupWizard:Setup ()
 #33  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #34  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #35 mono_jit_runtime_invoke
 #36 do_runtime_invoke
 #37 mono_runtime_invoke
 #38 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #39 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #40 Application::ParseARGVCommands()
 #41 Application::FinishLoadingProject()
 #42 NoGraphicsMain()
 #43 EditorMain(int, char const**)
 #44 main
 #45 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 CreateSerializedAssetV2(Object**, int, core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::CreateAssetMask, AssetResolver const&)
 #8 AssetDatabase::CreateSerializedAsset(Object&, core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::CreateAssetMask)
 #9 AssetDatabaseBindings::CreateAsset(PPtr<Object>, core::basic_string<char, core::StringStorageDefault<char>> const&, ScriptingExceptionPtr*)
 #10 AssetDatabase_CUSTOM_CreateAsset(ScriptingBackendNativeObjectPtrOpaque*, ScriptingBackendNativeStringPtrOpaque*)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:CreateAsset (UnityEngine.Object,string)
 #12  (Mono JIT Code) [AkWwiseInitializationSettings.cs:488] AkWwiseInitializationSettings:GetOrCreateAsset<T_REF> (string,string)
 #13  (Mono JIT Code) [AkWwiseInitializationSettings.cs:253] AkWwiseInitializationSettings:get_Instance ()
 #14  (Mono JIT Code) [AkInitializer.cs:89] AkInitializer:OnEnable ()
 #15  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void__this__ (object,intptr,intptr,intptr)
 #16 mono_jit_runtime_invoke
 #17 do_runtime_invoke
 #18 mono_runtime_invoke
 #19 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #20 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #21 MonoBehaviour::CallMethodIfAvailable(int)
 #22 MonoBehaviour::AddToManager()
 #23 SetupScriptForIManagedObjectHost(Object*, ScriptingClassPtr, MonoScript*)
 #24 AddComponentUnchecked(GameObject&, Unity::Type const*, ScriptingClassPtr, MonoScript*, core::basic_string<char, core::StringStorageDefault<char>>*, AwakeFromLoadQueue*)
 #25 AddComponent(GameObject&, Unity::Type const*, ScriptingClassPtr, core::basic_string<char, core::StringStorageDefault<char>>*, AwakeFromLoadQueue*, char const*, dynamic_array<Unity::Component*, 0ul>*)
 #26 MonoAddComponentWithType(GameObject&, ScriptingSystemTypeObjectPtr)
 #27 UndoBindings::AddComponent(GameObject*, ScriptingSystemTypeObjectPtr, ScriptingExceptionPtr*)
 #28 Undo_CUSTOM_AddComponent(ScriptingBackendNativeObjectPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #29  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.Undo:AddComponent (UnityEngine.GameObject,System.Type)
 #30  (Mono JIT Code) [Undo.bindings.cs:163] UnityEditor.Undo:AddComponent<T_REF> (UnityEngine.GameObject)
 #31  (Mono JIT Code) [AkWwiseSetupWizard.cs:551] WwiseSetupWizard:CreateWwiseGlobalObject ()
 #32  (Mono JIT Code) [AkWwiseSetupWizard.cs:519] WwiseSetupWizard:Setup ()
 #33  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #34  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #35 mono_jit_runtime_invoke
 #36 do_runtime_invoke
 #37 mono_runtime_invoke
 #38 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #39 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #40 Application::ParseARGVCommands()
 #41 Application::FinishLoadingProject()
 #42 NoGraphicsMain()
 #43 EditorMain(int, char const**)
 #44 main
 #45 start

Refreshing native plugins compatible for Editor in 6.02 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=21db67dc1aa694524b8384228b5970a6): Total: 0.019 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
WwiseUnity: Sound engine will not be initialized in batch/nographics mode. To override, specify -wwiseEnableWithNoGraphics
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 DebugLogHandler_CUSTOM_Internal_Log(LogType, LogOption, ScriptingBackendNativeStringPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #3  (Mono JIT Code) (wrapper managed-to-native) UnityEngine.DebugLogHandler:Internal_Log (UnityEngine.LogType,UnityEngine.LogOption,string,UnityEngine.Object)
 #4  (Mono JIT Code) [DebugLogHandler.cs:10] UnityEngine.DebugLogHandler:LogFormat (UnityEngine.LogType,UnityEngine.Object,string,object[])
 #5  (Mono JIT Code) [Logger.cs:61] UnityEngine.Logger:Log (UnityEngine.LogType,object)
 #6  (Mono JIT Code) [Debug.bindings.cs:192] UnityEngine.Debug:LogWarning (object)
 #7  (Mono JIT Code) [AkSoundEngineController.cs:135] AkSoundEngineController:Init (AkInitializer)
 #8  (Mono JIT Code) [AkInitializer.cs:101] AkInitializer:OnEnable ()
 #9  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void__this__ (object,intptr,intptr,intptr)
 #10 mono_jit_runtime_invoke
 #11 do_runtime_invoke
 #12 mono_runtime_invoke
 #13 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #14 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #15 MonoBehaviour::CallMethodIfAvailable(int)
 #16 MonoBehaviour::AddToManager()
 #17 SetupScriptForIManagedObjectHost(Object*, ScriptingClassPtr, MonoScript*)
 #18 AddComponentUnchecked(GameObject&, Unity::Type const*, ScriptingClassPtr, MonoScript*, core::basic_string<char, core::StringStorageDefault<char>>*, AwakeFromLoadQueue*)
 #19 AddComponent(GameObject&, Unity::Type const*, ScriptingClassPtr, core::basic_string<char, core::StringStorageDefault<char>>*, AwakeFromLoadQueue*, char const*, dynamic_array<Unity::Component*, 0ul>*)
 #20 MonoAddComponentWithType(GameObject&, ScriptingSystemTypeObjectPtr)
 #21 UndoBindings::AddComponent(GameObject*, ScriptingSystemTypeObjectPtr, ScriptingExceptionPtr*)
 #22 Undo_CUSTOM_AddComponent(ScriptingBackendNativeObjectPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #23  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.Undo:AddComponent (UnityEngine.GameObject,System.Type)
 #24  (Mono JIT Code) [Undo.bindings.cs:163] UnityEditor.Undo:AddComponent<T_REF> (UnityEngine.GameObject)
 #25  (Mono JIT Code) [AkWwiseSetupWizard.cs:551] WwiseSetupWizard:CreateWwiseGlobalObject ()
 #26  (Mono JIT Code) [AkWwiseSetupWizard.cs:519] WwiseSetupWizard:Setup ()
 #27  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #28  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #29 mono_jit_runtime_invoke
 #30 do_runtime_invoke
 #31 mono_runtime_invoke
 #32 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #33 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #34 Application::ParseARGVCommands()
 #35 Application::FinishLoadingProject()
 #36 NoGraphicsMain()
 #37 EditorMain(int, char const**)
 #38 main
 #39 start

Start importing Assets/Wwise/ScriptableObjects/Windows.asset using Guid(39d4c744606b2410a82b9628ada3fc2d) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'c29d26d3f18c29516f907e4e5a2cef6f') in 0.000933 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 CreateSerializedAssetV2(Object**, int, core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::CreateAssetMask, AssetResolver const&)
 #8 AssetDatabase::CreateSerializedAsset(Object&, core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::CreateAssetMask)
 #9 AssetDatabaseBindings::CreateAsset(PPtr<Object>, core::basic_string<char, core::StringStorageDefault<char>> const&, ScriptingExceptionPtr*)
 #10 AssetDatabase_CUSTOM_CreateAsset(ScriptingBackendNativeObjectPtrOpaque*, ScriptingBackendNativeStringPtrOpaque*)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:CreateAsset (UnityEngine.Object,string)
 #12  (Mono JIT Code) [AkWwiseInitializationSettings.cs:488] AkWwiseInitializationSettings:GetOrCreateAsset<T_REF> (string,string)
 #13  (Mono JIT Code) [AkWwiseInitializationSettings.cs:581] AkWwiseInitializationSettings:UpdatePlatforms ()
 #14  (Mono JIT Code) [AkPluginActivator.cs:729] AkPluginActivator:Update (bool)
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:528] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 CreateSerializedAssetV2(Object**, int, core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::CreateAssetMask, AssetResolver const&)
 #8 AssetDatabase::CreateSerializedAsset(Object&, core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::CreateAssetMask)
 #9 AssetDatabaseBindings::CreateAsset(PPtr<Object>, core::basic_string<char, core::StringStorageDefault<char>> const&, ScriptingExceptionPtr*)
 #10 AssetDatabase_CUSTOM_CreateAsset(ScriptingBackendNativeObjectPtrOpaque*, ScriptingBackendNativeStringPtrOpaque*)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:CreateAsset (UnityEngine.Object,string)
 #12  (Mono JIT Code) [AkWwiseInitializationSettings.cs:488] AkWwiseInitializationSettings:GetOrCreateAsset<T_REF> (string,string)
 #13  (Mono JIT Code) [AkWwiseInitializationSettings.cs:581] AkWwiseInitializationSettings:UpdatePlatforms ()
 #14  (Mono JIT Code) [AkPluginActivator.cs:729] AkPluginActivator:Update (bool)
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:528] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.77 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=de6505b06905d4f73a85db8a28fc1b13): Total: 0.035 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Start importing ProjectSettings/AudioManager.asset using Guid(00000000000000006000000000000000) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'd1b189f60853f8384f3d53c37adc3f73') in 0.000846 seconds
Start importing Assets/Wwise/ScriptableObjects/AkWwiseInitializationSettings.asset using Guid(a46e4a7247064471c8d6218e92dafbaf) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '2e3aa3d57427c240c30c9638fa43bb59') in 0.000618 seconds
Start importing Assets/Wwise/Editor/ProjectData/AkWwiseProjectData.asset using Guid(65c8a8c7042b54cf0b6a8c043792735c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'a6082eea7d2fdccb904439d2979918ce') in 0.000443 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 void ImportAssetsV2_Internal<core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>>>(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAssets(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::WriteRevertAssets(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #10 AssetDatabase::SaveAssets()
 #11 AssetDatabase_CUSTOM_SaveAssets()
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:SaveAssets ()
 #13  (Mono JIT Code) [AkWwiseInitializationSettings.cs:629] AkWwiseInitializationSettings:UpdatePlatforms ()
 #14  (Mono JIT Code) [AkPluginActivator.cs:729] AkPluginActivator:Update (bool)
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:528] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 void ImportAssetsV2_Internal<core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>>>(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAssets(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::WriteRevertAssets(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #10 AssetDatabase::SaveAssets()
 #11 AssetDatabase_CUSTOM_SaveAssets()
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:SaveAssets ()
 #13  (Mono JIT Code) [AkWwiseInitializationSettings.cs:629] AkWwiseInitializationSettings:UpdatePlatforms ()
 #14  (Mono JIT Code) [AkPluginActivator.cs:729] AkPluginActivator:Update (bool)
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:528] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 5.56 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=612ef50623de94eca9a827af78fab1f1): Total: 0.022 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:549] AkPluginActivator:ActivatePluginsForEditor ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:532] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:549] AkPluginActivator:ActivatePluginsForEditor ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:532] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.41 ms, found 22 plugins.
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:549] AkPluginActivator:ActivatePluginsForEditor ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:532] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:549] AkPluginActivator:ActivatePluginsForEditor ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:532] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.38 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86/Profile/AkSoundEngine.dll using Guid(30cfe76695924457ca26eeec9c1f31a8) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9499fb9bf31aa8a8d7262d27d7d1b7ef') in 0.000823 seconds
Script 'Packages/com.unity.modules.subsystems/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.jsonserialize/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.test-framework/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.screencapture/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.cloth/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imgui/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequesttexture/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.android-logcat/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ai/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/Unity.Collections.LowLevel.ILSupport/README.txt.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.animation/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ugui/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.xr/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.rider/Rider/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.pixel-perfect/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.pixel-perfect/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.pixel-perfect/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.assetbundle/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imgui/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/Graphics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.tilemap/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.assetbundle/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.timeline/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/net35/unity-custom/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.aseprite/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/Unity.Collections.LowLevel.ILSupport/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/Gizmos/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/net35/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrainphysics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mathematics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/AOT/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.screencapture/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.timeline/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.timeline/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.cloth/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/PackageConversionData.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestassetbundle/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.profiling.core/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/IK/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.2d/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imageconversion/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrainphysics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imageconversion/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequest/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestassetbundle/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unityanalytics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.subsystems/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.rider/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.video/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.test-framework/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unityanalytics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Scripts/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vr/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics2d/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/Path/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.android-logcat/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.particlesystem/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.wind/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics2d/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.mobile/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vr/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.uielements/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestaudio/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.particlesystem/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/link.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.wind/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.android-logcat/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ugui/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.umbra/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Textures/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.sprite/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.tilemap/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ui/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.subsystemregistration/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mathematics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.mobile/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.psdimporter/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.androidjni/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/Tests/TestPackage/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Gizmos/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.audio/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/Tests/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vehicles/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/EditorResources/Overlay/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.subsystemregistration/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.rider/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestwww/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestaudio/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.2d/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.subsystemregistration/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/TMP_SDF_SSD.cginc.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.vscode/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vehicles/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.xr/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.profiling.core/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/TMP_Properties.cginc.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/AOT/Newtonsoft.Json.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/TMP_SDF Internal Editor.shader.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.umbra/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/EditorResources/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestwww/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/Lib/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.director/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.aseprite/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.vscode/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.jsonserialize/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.director/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.audio/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrain/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.sprite/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.androidjni/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.video/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ai/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/PackageConversionData_Assets.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.spriteshape/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mathematics/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Package Resources/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrain/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.sprite/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.animation/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/Newtonsoft.Json.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.aseprite/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/Unity.Burst.Unsafe.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.psdimporter/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequest/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.uielements/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequesttexture/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ugui/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.spriteshape/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ui/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.spriteshape/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.psdimporter/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.vscode/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:549] AkPluginActivator:ActivatePluginsForEditor ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:532] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:549] AkPluginActivator:ActivatePluginsForEditor ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:532] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 4.20 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=8f4ca15b09a9b480dbba280b4b97bdc2): Total: 0.241 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:549] AkPluginActivator:ActivatePluginsForEditor ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:532] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:549] AkPluginActivator:ActivatePluginsForEditor ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:532] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.49 ms, found 22 plugins.
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:549] AkPluginActivator:ActivatePluginsForEditor ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:532] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.18 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Release/AkSoundEngine.bundle using Guid(46bdc35bce3ef4860968922bb4abb01c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '3aafad831bf9b9372b7c7dbf1c1b80b7') in 0.000746 seconds
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 AssetHotreload()
 #5 AssetHotreload(core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&)
 #6 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #7 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #8 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #11  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #12  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #13  (Mono JIT Code) [AkPluginActivator.cs:549] AkPluginActivator:ActivatePluginsForEditor ()
 #14  (Mono JIT Code) [AkWwiseSetupWizard.cs:532] WwiseSetupWizard:Setup ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #16  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #17 mono_jit_runtime_invoke
 #18 do_runtime_invoke
 #19 mono_runtime_invoke
 #20 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #21 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #22 Application::ParseARGVCommands()
 #23 Application::FinishLoadingProject()
 #24 NoGraphicsMain()
 #25 EditorMain(int, char const**)
 #26 main
 #27 start

Refreshing native plugins compatible for Editor in 3.69 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=8387008a5f86d4da3aafddcb89b1a898): Total: 0.032 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Multiple plugins with the same name 'aksoundengine' (found at 'Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle' and 'Assets/Wwise/API/Runtime/Plugins/Mac/Profile/AkSoundEngine.bundle'). That means one or more plugins are set to be compatible with Editor. Only one plugin at the time can be used by Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 PluginManager::AddPluginPath(core::basic_string_ref<char>, core::basic_string<char, core::StringStorageDefault<char>> const&, std::__1::map<core::basic_string<char, core::StringStorageDefault<char>>, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>, std::__1::less<core::basic_string<char, core::StringStorageDefault<char>>>, std::__1::allocator<std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>> const, std::__1::pair<core::basic_string<char, core::StringStorageDefault<char>>, bool>>>>&, bool)
 #3 PluginManager::RefreshPlugins(bool)
 #4 UpdateScriptCompilationPipelineCaches(ScriptChanges const&, bool)
 #5 InitializeAndProcessScriptChanges(PropertyMapReader<UnityGUID> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<UnityGUID, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, core::hash_set<ArtifactKey, core::hash<ArtifactKey>, std::__1::equal_to<ArtifactKey>> const&, core::hash_map<UnityGUID, core::basic_string<char, core::StringStorageDefault<char>>, core::hash<UnityGUID>, std::__1::equal_to<UnityGUID>> const&, ScriptChanges&)
 #6 RefreshInternalV2(AssetDatabase::UpdateAssetOptions, ScanFilter const&, InternalRefreshFlagsV2)
 #7 StopAssetImportingV2Internal(AssetDatabase::UpdateAssetOptions, InternalRefreshFlagsV2, ScanFilter const*, char const*)
 #8 ImportAtPathV2(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #9 AssetDatabase::ImportAtPath(core::basic_string_ref<char>, AssetDatabase::UpdateAssetOptions)
 #10 AssetDatabaseBindings::ImportAsset(core::basic_string<char, core::StringStorageDefault<char>> const&, AssetDatabase::UpdateAssetOptions)
 #11 AssetDatabase_CUSTOM_ImportAsset(ScriptingBackendNativeStringPtrOpaque*, AssetDatabase::UpdateAssetOptions)
 #12  (Mono JIT Code) (wrapper managed-to-native) UnityEditor.AssetDatabase:ImportAsset (string,UnityEditor.ImportAssetOptions)
 #13  (Mono JIT Code) [AssetDatabase.bindings.cs:209] UnityEditor.AssetDatabase:ImportAsset (string)
 #14  (Mono JIT Code) [AkPluginActivator.cs:549] AkPluginActivator:ActivatePluginsForEditor ()
 #15  (Mono JIT Code) [AkWwiseSetupWizard.cs:532] WwiseSetupWizard:Setup ()
 #16  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #17  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #18 mono_jit_runtime_invoke
 #19 do_runtime_invoke
 #20 mono_runtime_invoke
 #21 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #22 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #23 Application::ParseARGVCommands()
 #24 Application::FinishLoadingProject()
 #25 NoGraphicsMain()
 #26 EditorMain(int, char const**)
 #27 main
 #28 start

Refreshing native plugins compatible for Editor in 4.26 ms, found 22 plugins.
Refreshing native plugins compatible for Editor in 4.01 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Mac/Debug/AkSoundEngine.bundle using Guid(e76571957d2f04570aa28c26fba9a524) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '59bcfd5ef788c34fc5c2c42c834e8cf7') in 0.000735 seconds
Refreshing native plugins compatible for Editor in 3.20 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=509e8c41559be4a358a64adaa3a12958): Total: 0.031 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Refreshing native plugins compatible for Editor in 4.43 ms, found 22 plugins.
Refreshing native plugins compatible for Editor in 3.87 ms, found 22 plugins.
Start importing Assets/Wwise/API/Runtime/Plugins/Windows/x86_64/Profile/AkSoundEngine.dll using Guid(8ad93009ec910438cb3e642884ef8a8c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'e9e5a3d2b262fabc9778df8782432e8a') in 0.000774 seconds
Script 'Packages/com.unity.modules.subsystems/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.jsonserialize/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.test-framework/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.screencapture/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.cloth/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imgui/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequesttexture/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.android-logcat/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ai/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/Unity.Collections.LowLevel.ILSupport/README.txt.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.animation/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ugui/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.xr/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.rider/Rider/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.pixel-perfect/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.pixel-perfect/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.pixel-perfect/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.assetbundle/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imgui/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/Graphics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.tilemap/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.assetbundle/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.timeline/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/net35/unity-custom/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.aseprite/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/Unity.Collections.LowLevel.ILSupport/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/Gizmos/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/net35/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrainphysics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mathematics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/AOT/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.screencapture/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.timeline/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.timeline/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.cloth/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/PackageConversionData.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestassetbundle/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ext.nunit/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.profiling.core/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/IK/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.2d/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imageconversion/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrainphysics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.imageconversion/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequest/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestassetbundle/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unityanalytics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.subsystems/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.rider/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.video/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.test-framework/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unityanalytics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Scripts/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vr/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics2d/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/Path/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.android-logcat/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.particlesystem/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.wind/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics2d/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.mobile/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vr/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.uielements/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestaudio/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.particlesystem/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.common/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/link.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.wind/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.android-logcat/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ugui/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.umbra/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Textures/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.sprite/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.tilemap/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ui/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.subsystemregistration/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mathematics/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.mobile/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.psdimporter/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.androidjni/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/Tests/TestPackage/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Gizmos/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.audio/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mobile.notifications/Tests/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.physics/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vehicles/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/EditorResources/Overlay/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.subsystemregistration/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.rider/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestwww/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestaudio/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.feature.2d/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.subsystemregistration/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/TMP_SDF_SSD.cginc.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.vscode/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.vehicles/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.xr/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.profiling.core/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/TMP_Properties.cginc.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/AOT/Newtonsoft.Json.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/TMP_SDF Internal Editor.shader.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.umbra/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ai.navigation/EditorResources/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequestwww/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collab-proxy/Lib/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.director/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.aseprite/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.vscode/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.jsonserialize/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.visualscripting/ValidationConfig.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Editor Resources/Shaders/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.director/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.audio/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrain/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.sprite/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.visualstudio/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.androidjni/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.video/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ai/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/PackageConversionData_Assets.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.spriteshape/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.mathematics/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.textmeshpro/Package Resources/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.terrain/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.sprite/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.animation/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.tilemap.extras/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.animation/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.nuget.newtonsoft-json/Runtime/Newtonsoft.Json.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.collections/ValidationExceptions.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.aseprite/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/Unity.Burst.Unsafe.xml.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.psdimporter/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequest/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.uielements/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.burst/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.unitywebrequesttexture/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.adaptiveperformance/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ugui/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.spriteshape/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.modules.ui/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.spriteshape/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.2d.psdimporter/Tests/asset.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Script 'Packages/com.unity.ide.vscode/package.json.cs' will not be compiled because it exists outside the Assets folder and does not to belong to any assembly definition file.
Refreshing native plugins compatible for Editor in 3.34 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=e2a9dc540c96d465ea6659e603b77e9d): Total: 0.253 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
WwiseUnity: Plugins successfully activated for Profile in Editor.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 DebugLogHandler_CUSTOM_Internal_Log(LogType, LogOption, ScriptingBackendNativeStringPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #3  (Mono JIT Code) (wrapper managed-to-native) UnityEngine.DebugLogHandler:Internal_Log (UnityEngine.LogType,UnityEngine.LogOption,string,UnityEngine.Object)
 #4  (Mono JIT Code) [DebugLogHandler.cs:10] UnityEngine.DebugLogHandler:LogFormat (UnityEngine.LogType,UnityEngine.Object,string,object[])
 #5  (Mono JIT Code) [Logger.cs:61] UnityEngine.Logger:Log (UnityEngine.LogType,object)
 #6  (Mono JIT Code) [Debug.bindings.cs:102] UnityEngine.Debug:Log (object)
 #7  (Mono JIT Code) [AkPluginActivator.cs:634] AkPluginActivator:ActivatePluginsForEditor ()
 #8  (Mono JIT Code) [AkWwiseSetupWizard.cs:532] WwiseSetupWizard:Setup ()
 #9  (Mono JIT Code) [AkWwiseSetupWizard.cs:51] WwiseSetupWizard:RunSetup ()
 #10  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #11 mono_jit_runtime_invoke
 #12 do_runtime_invoke
 #13 mono_runtime_invoke
 #14 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #15 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #16 Application::ParseARGVCommands()
 #17 Application::FinishLoadingProject()
 #18 NoGraphicsMain()
 #19 EditorMain(int, char const**)
 #20 main
 #21 start

WwiseUnity: Refreshing asset database.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 DebugLogHandler_CUSTOM_Internal_Log(LogType, LogOption, ScriptingBackendNativeStringPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #3  (Mono JIT Code) (wrapper managed-to-native) UnityEngine.DebugLogHandler:Internal_Log (UnityEngine.LogType,UnityEngine.LogOption,string,UnityEngine.Object)
 #4  (Mono JIT Code) [DebugLogHandler.cs:10] UnityEngine.DebugLogHandler:LogFormat (UnityEngine.LogType,UnityEngine.Object,string,object[])
 #5  (Mono JIT Code) [Logger.cs:61] UnityEngine.Logger:Log (UnityEngine.LogType,object)
 #6  (Mono JIT Code) [Debug.bindings.cs:102] UnityEngine.Debug:Log (object)
 #7  (Mono JIT Code) [AkWwiseSetupWizard.cs:52] WwiseSetupWizard:RunSetup ()
 #8  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #9 mono_jit_runtime_invoke
 #10 do_runtime_invoke
 #11 mono_runtime_invoke
 #12 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #13 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #14 Application::ParseARGVCommands()
 #15 Application::FinishLoadingProject()
 #16 NoGraphicsMain()
 #17 EditorMain(int, char const**)
 #18 main
 #19 start

Start importing Assets/StreamingAssets/Audio using Guid(c701d92c7642d4faea1028d929cc298c) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '9d8d19fd541271626d36fda3cb59c0e8') in 0.000922 seconds
Start importing Assets/StreamingAssets/Audio/GeneratedSoundBanks using Guid(661ec8bd3905245c7ae33cee2674a2fd) Importer(-1,00000000000000000000000000000000)  -> (artifact id: '959301ac8b013686fadff50785b9828e') in 0.000391 seconds
Refreshing native plugins compatible for Editor in 4.18 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=2179a2de90e934e5191f6e7aa617f2b4): Total: 0.050 seconds - Initiated by RefreshV2(NoUpdateAssetOptions)
WwiseUnity: End of setup, exiting Unity.
 #0 GetStacktrace(int)
 #1 DebugStringToFile(DebugStringToFileData const&)
 #2 DebugLogHandler_CUSTOM_Internal_Log(LogType, LogOption, ScriptingBackendNativeStringPtrOpaque*, ScriptingBackendNativeObjectPtrOpaque*)
 #3  (Mono JIT Code) (wrapper managed-to-native) UnityEngine.DebugLogHandler:Internal_Log (UnityEngine.LogType,UnityEngine.LogOption,string,UnityEngine.Object)
 #4  (Mono JIT Code) [DebugLogHandler.cs:10] UnityEngine.DebugLogHandler:LogFormat (UnityEngine.LogType,UnityEngine.Object,string,object[])
 #5  (Mono JIT Code) [Logger.cs:61] UnityEngine.Logger:Log (UnityEngine.LogType,object)
 #6  (Mono JIT Code) [Debug.bindings.cs:102] UnityEngine.Debug:Log (object)
 #7  (Mono JIT Code) [AkWwiseSetupWizard.cs:56] WwiseSetupWizard:RunSetup ()
 #8  (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr)
 #9 mono_jit_runtime_invoke
 #10 do_runtime_invoke
 #11 mono_runtime_invoke
 #12 scripting_method_invoke(ScriptingMethodPtr, ScriptingObjectPtr, ScriptingArguments&, ScriptingExceptionPtr*, bool)
 #13 ScriptingInvocation::Invoke(ScriptingExceptionPtr*, bool)
 #14 Application::ParseARGVCommands()
 #15 Application::FinishLoadingProject()
 #16 NoGraphicsMain()
 #17 EditorMain(int, char const**)
 #18 main
 #19 start

Batchmode quit successfully invoked - shutting down!
Start importing ProjectSettings/ProjectSettings.asset using Guid(00000000000000004000000000000000) Importer(-1,00000000000000000000000000000000)  -> (artifact id: 'b8069fa70c758aaa6b3fe6caad5b9a32') in 0.001422 seconds
Refreshing native plugins compatible for Editor in 3.90 ms, found 22 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Asset Pipeline Refresh (id=f69eedeb04a3849229cc99d5dbd4263c): Total: 0.018 seconds - Initiated by StopAssetImportingV2(NoUpdateAssetOptions)
Thread 0x2b9e87000 may have been prematurely finalized
[Licensing::IpcConnector] License Notification channel disconnected successfully.
[Licensing::IpcConnector] License Client channel disconnected successfully.
Thread 0x17e9d3000 may have been prematurely finalized
[40m[32minfo[39m[22m[49m: Microsoft.Hosting.Lifetime[0]
      Application is shutting down...
Cleanup mono
[40m[32minfo[39m[22m[49m: Unity.ILPP.Runner.PostProcessingAssemblyLoadContext[0]
      ALC ILPP context 1 is unloading
debugger-agent: Unable to listen on 49
[Performance] Application.InitializeProject                                                                                                                                              :        1 samples, Peak.  15.4 s (1.0x), Avg.  15.4 s, Total. 15.43 s (70.6%)
[Performance] Application.PackageManager.StartServer                                                                                                                                     :        1 samples, Peak.  17.9 ms (1.0x), Avg.  17.9 ms, Total. 17.90 ms (0.1%)
[Performance] Application.AcquireProjectLock                                                                                                                                             :        1 samples, Peak.  6.00 ms (1.0x), Avg.  6.00 ms, Total. 5.999 ms (0.0%)
[Performance] Application.InitializeEngineNoGraphics                                                                                                                                     :        1 samples, Peak.  88.7 ms (1.0x), Avg.  88.7 ms, Total. 88.72 ms (0.4%)
[Performance] Application.PackageManager.Initialize                                                                                                                                      :        1 samples, Peak.   500 ms (1.0x), Avg.   500 ms, Total. 500.2 ms (2.3%)
[Performance] Connecting to Package Manager                                                                                                                                              :       51 samples, Peak.  51.0 us (45.6x), Avg.  1.12 us, Total. 57.00 us (0.0%)
[Performance] Application.EngineGraphics.Initialize                                                                                                                                      :        1 samples, Peak.  47.6 ms (1.0x), Avg.  47.6 ms, Total. 47.65 ms (0.2%)
[Performance] Application.GI.Initialize                                                                                                                                                  :        1 samples, Peak.  2.89 ms (1.0x), Avg.  2.89 ms, Total. 2.887 ms (0.0%)
[Performance] Application.LoadAllDefaultResourcesFromEditor                                                                                                                              :        1 samples, Peak.  1.35 ms (1.0x), Avg.  1.35 ms, Total. 1.351 ms (0.0%)
[Performance] Application.LoadMonoAssemblies                                                                                                                                             :        1 samples, Peak.   426 ms (1.0x), Avg.   426 ms, Total. 426.4 ms (2.0%)
[Performance] RestoreManagedReferences                                                                                                                                                   :        2 samples, Peak.  23.6 ms (2.0x), Avg.  11.8 ms, Total. 23.56 ms (0.1%)
[Performance] InitializeOnLoad WindowLayout                                                                                                                                              :        2 samples, Peak.   464 us (1.1x), Avg.   433 us, Total. 865.6 us (0.0%)
[Performance] InitializeOnLoad MixerEffectDefinitionReloader                                                                                                                             :        2 samples, Peak.  2.19 ms (1.3x), Avg.  1.73 ms, Total. 3.464 ms (0.0%)
[Performance] InitializeOnLoad AssetStoreContext                                                                                                                                         :        2 samples, Peak.  17.1 ms (1.1x), Avg.  14.9 ms, Total. 29.89 ms (0.1%)
[Performance] InitializeOnLoad CheckNavigationPackage                                                                                                                                    :        2 samples, Peak.   253 us (1.2x), Avg.   215 us, Total. 429.2 us (0.0%)
[Performance] InitializeOnLoad CloudBuild                                                                                                                                                :        2 samples, Peak.  2.25 us (1.0x), Avg.  2.21 us, Total. 4.417 us (0.0%)
[Performance] InitializeOnLoad MenuItems                                                                                                                                                 :        2 samples, Peak.   232 us (1.2x), Avg.   197 us, Total. 394.9 us (0.0%)
[Performance] InitializeOnLoad CacheServerWindow                                                                                                                                         :        2 samples, Peak.  6.50 us (1.1x), Avg.  6.15 us, Total. 12.29 us (0.0%)
[Performance] InitializeOnLoad UISystemProfilerRenderService                                                                                                                             :        2 samples, Peak.  4.37 us (1.0x), Avg.  4.21 us, Total. 8.417 us (0.0%)
[Performance] InitializeOnLoad PrefabInstanceChangedListener                                                                                                                             :        2 samples, Peak.  86.2 us (1.0x), Avg.  83.7 us, Total. 167.4 us (0.0%)
[Performance] InitializeOnLoad SearchService                                                                                                                                             :        2 samples, Peak.  65.2 us (1.1x), Avg.  61.8 us, Total. 123.6 us (0.0%)
[Performance] InitializeOnLoad UnityConnect                                                                                                                                              :        2 samples, Peak.  26.8 us (1.0x), Avg.  25.9 us, Total. 51.87 us (0.0%)
[Performance] InitializeOnLoad ObjectSelectorSearch                                                                                                                                      :        2 samples, Peak.  20.6 us (1.0x), Avg.  20.2 us, Total. 40.46 us (0.0%)
[Performance] InitializeOnLoad SceneSearch                                                                                                                                               :        2 samples, Peak.  17.2 us (1.0x), Avg.  17.0 us, Total. 33.92 us (0.0%)
[Performance] InitializeOnLoad SettingsService                                                                                                                                           :        2 samples, Peak.  3.75 us (1.1x), Avg.  3.50 us, Total. 7.000 us (0.0%)
[Performance] InitializeOnLoad DrivenRectTransformUndo                                                                                                                                   :        2 samples, Peak.   147 us (1.1x), Avg.   139 us, Total. 278.4 us (0.0%)
[Performance] InitializeOnLoad PlayModeDownload                                                                                                                                          :        2 samples, Peak.  3.57 ms (1.9x), Avg.  1.85 ms, Total. 3.693 ms (0.0%)
[Performance] InitializeOnLoad ShortcutIntegration                                                                                                                                       :        2 samples, Peak.  40.8 us (1.1x), Avg.  37.2 us, Total. 74.46 us (0.0%)
[Performance] InitializeOnLoad ManagedDebuggerWindow                                                                                                                                     :        2 samples, Peak.   406 us (1.0x), Avg.   395 us, Total. 789.3 us (0.0%)
[Performance] InitializeOnLoad ManagedDebugger                                                                                                                                           :        2 samples, Peak.   209 ns (1.1x), Avg.   188 ns, Total. 376.0 ns (0.0%)
[Performance] InitializeOnLoad EditMode                                                                                                                                                  :        2 samples, Peak.   390 us (1.4x), Avg.   279 us, Total. 558.7 us (0.0%)
[Performance] InitializeOnLoad AddComponentWindow                                                                                                                                        :        2 samples, Peak.  58.8 us (1.0x), Avg.  57.5 us, Total. 114.9 us (0.0%)
[Performance] InitializeOnLoad NativeFormatImporterUtility                                                                                                                               :        2 samples, Peak.  1.48 ms (1.2x), Avg.  1.26 ms, Total. 2.524 ms (0.0%)
[Performance] InitializeOnLoad ProjectSearch                                                                                                                                             :        2 samples, Peak.  25.8 us (1.1x), Avg.  23.1 us, Total. 46.25 us (0.0%)
[Performance] InitializeOnLoad EditorDelegateRegistration                                                                                                                                :        2 samples, Peak.   434 us (1.0x), Avg.   421 us, Total. 841.0 us (0.0%)
[Performance] InitializeOnLoad UxmlObjectEditorFactories                                                                                                                                 :        2 samples, Peak.   278 us (1.0x), Avg.   276 us, Total. 552.5 us (0.0%)
[Performance] InitializeOnLoad RetainedMode                                                                                                                                              :        2 samples, Peak.  1.42 ms (1.0x), Avg.  1.39 ms, Total. 2.776 ms (0.0%)
[Performance] InitializeOnLoad EditorShaderLoader                                                                                                                                        :        2 samples, Peak.   571 us (1.3x), Avg.   439 us, Total. 878.6 us (0.0%)
[Performance] InitializeOnLoad UIDocumentHierarchyWatcher                                                                                                                                :        2 samples, Peak.  40.7 us (1.0x), Avg.  40.0 us, Total. 80.04 us (0.0%)
[Performance] InitializeOnLoad EditorMonitor                                                                                                                                             :        2 samples, Peak.  81.6 us (1.0x), Avg.  79.4 us, Total. 158.8 us (0.0%)
[Performance] InitializeOnLoad LiveReloadTrackerCreator                                                                                                                                  :        2 samples, Peak.  82.7 us (1.0x), Avg.  82.2 us, Total. 164.4 us (0.0%)
[Performance] InitializeOnLoad UXMLEditorFactories                                                                                                                                       :        2 samples, Peak.  37.4 ms (1.0x), Avg.  36.4 ms, Total. 72.73 ms (0.3%)
[Performance] InitializeOnLoad CloudBuildPoller                                                                                                                                          :        2 samples, Peak.   157 us (1.0x), Avg.   153 us, Total. 306.7 us (0.0%)
[Performance] InitializeOnLoad AnalyticsService                                                                                                                                          :        2 samples, Peak.  5.07 ms (1.0x), Avg.  4.94 ms, Total. 9.874 ms (0.0%)
[Performance] InitializeOnLoad UDPService                                                                                                                                                :        2 samples, Peak.  3.92 ms (1.0x), Avg.  3.84 ms, Total. 7.688 ms (0.0%)
[Performance] InitializeOnLoad EditorGameServicesAnalytics                                                                                                                               :        2 samples, Peak.  1.16 ms (1.4x), Avg.   834 us, Total. 1.669 ms (0.0%)
[Performance] InitializeOnLoad PurchasingService                                                                                                                                         :        2 samples, Peak.  7.65 ms (1.0x), Avg.  7.42 ms, Total. 14.85 ms (0.1%)
[Performance] InitializeOnLoad ServicesRepository                                                                                                                                        :        2 samples, Peak.   875 ns (1.3x), Avg.   667 ns, Total. 1.334 us (0.0%)
[Performance] InitializeOnLoad AdsService                                                                                                                                                :        2 samples, Peak.  3.88 ms (1.1x), Avg.  3.55 ms, Total. 7.106 ms (0.0%)
[Performance] InitializeOnLoad BuildService                                                                                                                                              :        2 samples, Peak.  5.03 ms (1.2x), Avg.  4.35 ms, Total. 8.706 ms (0.0%)
[Performance] InitializeOnLoad CrashService                                                                                                                                              :        2 samples, Peak.  3.67 ms (1.0x), Avg.  3.63 ms, Total. 7.253 ms (0.0%)
[Performance] InitializeOnLoad SearchWindow                                                                                                                                              :        2 samples, Peak.  76.4 us (1.0x), Avg.  75.0 us, Total. 150.0 us (0.0%)
[Performance] InitializeOnLoad SearchMonitor                                                                                                                                             :        2 samples, Peak.  1.86 ms (1.1x), Avg.  1.75 ms, Total. 3.492 ms (0.0%)
[Performance] InitializeOnLoad ParameterControllerEditor                                                                                                                                 :        2 samples, Peak.  12.2 us (1.0x), Avg.  11.7 us, Total. 23.42 us (0.0%)
[Performance] InitializeOnLoad LayerSettingsWindow                                                                                                                                       :        2 samples, Peak.  2.37 us (1.0x), Avg.  2.33 us, Total. 4.667 us (0.0%)
[Performance] InitializeOnLoad PackageManagerHookGUIDConverter.RegisterPackagesEventHandler                                                                                              :        2 samples, Peak.   468 us (1.7x), Avg.   282 us, Total. 563.6 us (0.0%)
[Performance] InitializeOnLoad EditorDragAndDrop.RegisterEditorClient                                                                                                                    :        2 samples, Peak.   148 us (1.1x), Avg.   129 us, Total. 258.3 us (0.0%)
[Performance] InitializeOnLoad EditorEventCallbacks.InitializeFontAssetResourceChangeCallBacks                                                                                           :        2 samples, Peak.   778 us (1.1x), Avg.   715 us, Total. 1.431 ms (0.0%)
[Performance] InitializeOnLoad SceneTemplateService.Init                                                                                                                                 :        2 samples, Peak.   834 us (1.2x), Avg.   681 us, Total. 1.363 ms (0.0%)
[Performance] InitializeOnLoad DiagnosticSwitchesConsoleMessage.Init                                                                                                                     :        2 samples, Peak.  1.93 ms (1.8x), Avg.  1.10 ms, Total. 2.194 ms (0.0%)
[Performance] InitializeOnLoad AssetPostprocessingInternal.RefreshCustomDependencies                                                                                                     :        2 samples, Peak.  1.64 ms (1.0x), Avg.  1.59 ms, Total. 3.183 ms (0.0%)
[Performance] InitializeOnLoad MemoryProfilerCompilationGuard.InjectCompileGuard                                                                                                         :        2 samples, Peak.  92.3 us (1.4x), Avg.  64.7 us, Total. 129.5 us (0.0%)
[Performance] InitializeOnLoad EditorWindow.Initialize                                                                                                                                   :        2 samples, Peak.   109 us (1.1x), Avg.   102 us, Total. 203.3 us (0.0%)
[Performance] InitializeOnLoad PackageManagerWindow.EditorInitializedInSafeMode                                                                                                          :        2 samples, Peak.  15.7 ms (2.0x), Avg.  7.90 ms, Total. 15.79 ms (0.1%)
[Performance] InitializeOnLoad ScopedRegistryAddedPopup.SubscribeToRegistriesAdded                                                                                                       :        2 samples, Peak.  4.71 ms (2.0x), Avg.  2.38 ms, Total. 4.764 ms (0.0%)
[Performance] InitializeOnLoad SceneVisibilityManager.Initialize                                                                                                                         :        2 samples, Peak.  3.21 ms (1.7x), Avg.  1.86 ms, Total. 3.728 ms (0.0%)
[Performance] InitializeOnLoad SysrootManager.Initialize                                                                                                                                 :        2 samples, Peak.   290 us (1.1x), Avg.   270 us, Total. 540.2 us (0.0%)
[Performance] InitializeOnLoad ToolShortcutContext.Init                                                                                                                                  :        2 samples, Peak.  77.6 us (1.0x), Avg.  75.4 us, Total. 150.8 us (0.0%)
[Performance] AssemblyReloadEvents.afterAssemblyReload: UnityEditor.SceneTemplate.SceneTemplateService.AfterAssemblyReload                                                               :        2 samples, Peak.   473 us (1.5x), Avg.   321 us, Total. 642.4 us (0.0%)
[Performance] ProcessService.EditorAfterLoadAllAssemblies                                                                                                                                :        2 samples, Peak.   206 us (1.2x), Avg.   177 us, Total. 353.3 us (0.0%)
[Performance] Application.ReadLicenseInfo                                                                                                                                                :        1 samples, Peak.  14.5 ms (1.0x), Avg.  14.5 ms, Total. 14.47 ms (0.1%)
[Performance] Application.InitialRefresh                                                                                                                                                 :        1 samples, Peak.  13.7 s (1.0x), Avg.  13.7 s, Total. 13.73 s (62.8%)
[Performance] BuilderAssetModificationProcessor.OnWillCreateAsset                                                                                                                        :      563 samples, Peak.   547 us (42.0x), Avg.  13.0 us, Total. 7.344 ms (0.0%)
[Performance] ShaderImporter.SourceAssetModified                                                                                                                                         :       14 samples, Peak.  6.04 us (5.1x), Avg.  1.19 us, Total. 16.67 us (0.0%)
[Performance] ShaderIncludeImporter.SourceAssetModified                                                                                                                                  :       14 samples, Peak.  28.4 us (6.4x), Avg.  4.44 us, Total. 62.21 us (0.0%)
[Performance] Compiling Scripts                                                                                                                                                          :        1 samples, Peak.  4.17 s (1.0x), Avg.  4.17 s, Total. 4.169 s (19.1%)
[Performance] AssemblyReloadEvents.beforeAssemblyReload: UnityEditor.SceneTemplate.SceneTemplateService.BeforeAssemblyReload                                                             :        1 samples, Peak.   633 us (1.0x), Avg.   633 us, Total. 632.6 us (0.0%)
[Performance] PSDImporterAssetPostProcessor.OnPreprocessAsset                                                                                                                            :      638 samples, Peak.   743 us (162.8x), Avg.  4.57 us, Total. 2.913 ms (0.0%)
[Performance] PresetManagerPostProcessor.OnPreprocessAsset                                                                                                                               :      638 samples, Peak.   209 us (30.0x), Avg.  6.97 us, Total. 4.448 ms (0.0%)
[Performance] CancelSplashScreenOnAssetChange.OnPreprocessAsset                                                                                                                          :      638 samples, Peak.   325 us (229.6x), Avg.  1.42 us, Total. 903.3 us (0.0%)
[Performance] SpritePostProcess.OnPreprocessAsset                                                                                                                                        :      638 samples, Peak.  2.30 ms (186.0x), Avg.  12.3 us, Total. 7.878 ms (0.0%)
[Performance] InitializeOnLoad ReadmeEditor                                                                                                                                              :        1 samples, Peak.   126 us (1.0x), Avg.   126 us, Total. 126.5 us (0.0%)
[Performance] InitializeOnLoad BurstLoader                                                                                                                                               :        1 samples, Peak.  2.01 s (1.0x), Avg.  2.01 s, Total. 2.006 s (9.2%)
[Performance] InitializeOnLoad EditorToolManager                                                                                                                                         :        1 samples, Peak.  1.59 ms (1.0x), Avg.  1.59 ms, Total. 1.592 ms (0.0%)
[Performance] InitializeOnLoad AkWaapiUtilities                                                                                                                                          :        1 samples, Peak.   164 ms (1.0x), Avg.   164 ms, Total. 164.1 ms (0.8%)
[Performance] InitializeOnLoad AkPluginActivator                                                                                                                                         :        1 samples, Peak.  10.5 ms (1.0x), Avg.  10.5 ms, Total. 10.47 ms (0.0%)
[Performance] AssetDatabase.ImportAsset                                                                                                                                                  :       74 samples, Peak.   253 ms (11.5x), Avg.  21.9 ms, Total. 1.624 s (7.4%)
[Performance] InitializeOnLoad AkWwiseXMLBuilder                                                                                                                                         :        1 samples, Peak.  17.9 ms (1.0x), Avg.  17.9 ms, Total. 17.90 ms (0.1%)
[Performance] InitializeOnLoad AkWwiseWWUBuilder                                                                                                                                         :        1 samples, Peak.   104 ms (1.0x), Avg.   104 ms, Total. 104.0 ms (0.5%)
[Performance] PaletteAssetModificationProcessor.OnWillCreateAsset                                                                                                                        :       11 samples, Peak.  1.55 ms (10.7x), Avg.   145 us, Total. 1.593 ms (0.0%)
[Performance] InitializeOnLoad AdaptivePerformanceGeneralSettingsPerBuildTarget                                                                                                          :        1 samples, Peak.   106 us (1.0x), Avg.   106 us, Total. 105.6 us (0.0%)
[Performance] InitializeOnLoad AdaptivePerformancePackageMetadataStore                                                                                                                   :        1 samples, Peak.  1.53 ms (1.0x), Avg.  1.53 ms, Total. 1.532 ms (0.0%)
[Performance] InitializeOnLoad AdaptivePerformancePackageInitializationBootstrap                                                                                                         :        1 samples, Peak.  60.7 us (1.0x), Avg.  60.7 us, Total. 60.75 us (0.0%)
[Performance] InitializeOnLoad BackgroundWatcher                                                                                                                                         :        1 samples, Peak.  70.3 us (1.0x), Avg.  70.3 us, Total. 70.29 us (0.0%)
[Performance] InitializeOnLoad UnityTestProtocolStarter                                                                                                                                  :        1 samples, Peak.   117 us (1.0x), Avg.   117 us, Total. 116.5 us (0.0%)
[Performance] InitializeOnLoad TestStarter                                                                                                                                               :        1 samples, Peak.   365 us (1.0x), Avg.   365 us, Total. 365.3 us (0.0%)
[Performance] InitializeOnLoad RerunCallbackInitializer                                                                                                                                  :        1 samples, Peak.  1.46 ms (1.0x), Avg.  1.46 ms, Total. 1.456 ms (0.0%)
[Performance] InitializeOnLoad RiderScriptEditor                                                                                                                                         :        1 samples, Peak.   489 ms (1.0x), Avg.   489 ms, Total. 489.2 ms (2.2%)
[Performance] InitializeOnLoad CallbackInitializer                                                                                                                                       :        1 samples, Peak.   624 us (1.0x), Avg.   624 us, Total. 624.2 us (0.0%)
[Performance] InitializeOnLoad SpriteEditorWindow                                                                                                                                        :        1 samples, Peak.   260 us (1.0x), Avg.   260 us, Total. 259.5 us (0.0%)
[Performance] InitializeOnLoad BackgroundImport                                                                                                                                          :        1 samples, Peak.   285 us (1.0x), Avg.   285 us, Total. 284.8 us (0.0%)
[Performance] InitializeOnLoad VSCodeScriptEditor                                                                                                                                        :        1 samples, Peak.  1.86 ms (1.0x), Avg.  1.86 ms, Total. 1.855 ms (0.0%)
[Performance] InitializeOnLoad PlasticPlugin                                                                                                                                             :        1 samples, Peak.  43.8 ms (1.0x), Avg.  43.8 ms, Total. 43.81 ms (0.2%)
[Performance] InitializeOnLoad VSUsageUtility                                                                                                                                            :        1 samples, Peak.  32.9 ms (1.0x), Avg.  32.9 ms, Total. 32.89 ms (0.2%)
[Performance] InitializeOnLoad ToolbarBootstrap                                                                                                                                          :        1 samples, Peak.   121 us (1.0x), Avg.   121 us, Total. 120.6 us (0.0%)
[Performance] InitializeOnLoad VisualStudioEditor                                                                                                                                        :        1 samples, Peak.  1.70 ms (1.0x), Avg.  1.70 ms, Total. 1.703 ms (0.0%)
[Performance] InitializeOnLoad VisualStudioIntegration                                                                                                                                   :        1 samples, Peak.   718 us (1.0x), Avg.   718 us, Total. 717.8 us (0.0%)
[Performance] InitializeOnLoad TestRunnerApiListener                                                                                                                                     :        1 samples, Peak.  64.6 us (1.0x), Avg.  64.6 us, Total. 64.58 us (0.0%)
[Performance] InitializeOnLoad AkPortalManager                                                                                                                                           :        1 samples, Peak.   102 us (1.0x), Avg.   102 us, Total. 102.0 us (0.0%)
[Performance] InitializeOnLoad AkWindowsPluginActivator                                                                                                                                  :        1 samples, Peak.  1.56 ms (1.0x), Avg.  1.56 ms, Total. 1.562 ms (0.0%)
[Performance] InitializeOnLoad AkWwisePostImportCallbackSetup                                                                                                                            :        1 samples, Peak.   279 us (1.0x), Avg.   279 us, Total. 279.5 us (0.0%)
[Performance] InitializeOnLoad AkMacPluginActivator                                                                                                                                      :        1 samples, Peak.  77.0 us (1.0x), Avg.  77.0 us, Total. 77.04 us (0.0%)
[Performance] InitializeOnLoad PrefabLayoutRebuilder                                                                                                                                     :        1 samples, Peak.   156 us (1.0x), Avg.   156 us, Total. 156.3 us (0.0%)
[Performance] InitializeOnLoad SpriteSkinCompositeStartup                                                                                                                                :        1 samples, Peak.  8.26 ms (1.0x), Avg.  8.26 ms, Total. 8.262 ms (0.0%)
[Performance] InitializeOnLoad BoneGizmoInitializer                                                                                                                                      :        1 samples, Peak.  1.80 ms (1.0x), Avg.  1.80 ms, Total. 1.801 ms (0.0%)
[Performance] InitializeOnLoad UnityAnalyticsStorage                                                                                                                                     :        1 samples, Peak.   224 us (1.0x), Avg.   224 us, Total. 224.2 us (0.0%)
[Performance] InitializeOnLoad Analytics                                                                                                                                                 :        1 samples, Peak.   134 us (1.0x), Avg.   134 us, Total. 133.9 us (0.0%)
[Performance] InitializeOnLoad NavigationWindow                                                                                                                                          :        1 samples, Peak.   158 us (1.0x), Avg.   158 us, Total. 157.5 us (0.0%)
[Performance] InitializeOnLoad SceneDragAndDrop                                                                                                                                          :        1 samples, Peak.  97.7 us (1.0x), Avg.  97.7 us, Total. 97.67 us (0.0%)
[Performance] InitializeOnLoad SpriteShapeUpdateCache                                                                                                                                    :        1 samples, Peak.   378 us (1.0x), Avg.   378 us, Total. 377.8 us (0.0%)
[Performance] InitializeOnLoad SpriteShapeUnityAnalyticsStorage                                                                                                                          :        1 samples, Peak.  9.37 us (1.0x), Avg.  9.37 us, Total. 9.375 us (0.0%)
[Performance] InitializeOnLoad IKEditorManager.CreateInstance                                                                                                                            :        1 samples, Peak.  1.06 ms (1.0x), Avg.  1.06 ms, Total. 1.063 ms (0.0%)
[Performance] InitializeOnLoad $BurstDirectCallInitializer.Initialize                                                                                                                    :        7 samples, Peak.  11.3 ms (3.5x), Avg.  3.23 ms, Total. 22.59 ms (0.1%)
[Performance] InitializeOnLoad TileDragAndDropManager.Initialize                                                                                                                         :        1 samples, Peak.   636 us (1.0x), Avg.   636 us, Total. 635.6 us (0.0%)
[Performance] InitializeOnLoad SceneViewGridManager.Initialize                                                                                                                           :        1 samples, Peak.  2.32 ms (1.0x), Avg.  2.32 ms, Total. 2.323 ms (0.0%)
[Performance] InitializeOnLoad SceneViewOpenTilePaletteHelper.Initialize                                                                                                                 :        1 samples, Peak.   596 us (1.0x), Avg.   596 us, Total. 596.1 us (0.0%)
[Performance] InitializeOnLoad TilemapPrefabStageHelper.Initialize                                                                                                                       :        1 samples, Peak.   667 us (1.0x), Avg.   667 us, Total. 667.5 us (0.0%)
[Performance] InitializeOnLoad AkEventPlayableInspector.SetupSoundbankSetting                                                                                                            :        1 samples, Peak.  38.7 ms (1.0x), Avg.  38.7 ms, Total. 38.72 ms (0.2%)
[Performance] InitializeOnLoad TestJobDataHolder.ResumeRunningJobs                                                                                                                       :        1 samples, Peak.   564 us (1.0x), Avg.   564 us, Total. 564.5 us (0.0%)
[Performance] InitializeOnLoad AnalyticsReporter.RegisterCallbacks                                                                                                                       :        1 samples, Peak.   149 us (1.0x), Avg.   149 us, Total. 149.0 us (0.0%)
[Performance] InitializeOnLoad AkMacSettings.AutomaticPlatformRegistration                                                                                                               :        1 samples, Peak.   381 us (1.0x), Avg.   381 us, Total. 380.9 us (0.0%)
[Performance] InitializeOnLoad AkWindowsSettings.AutomaticPlatformRegistration                                                                                                           :        1 samples, Peak.  24.6 us (1.0x), Avg.  24.6 us, Total. 24.58 us (0.0%)
[Performance] InitializeOnLoad AkEventPlayableBehavior.DetermineCanPostEvents                                                                                                            :        1 samples, Peak.   248 us (1.0x), Avg.   248 us, Total. 248.4 us (0.0%)
[Performance] InitializeOnLoad AkTimelineEventPlayableBehavior.DetermineCanPostEvents                                                                                                    :        1 samples, Peak.   107 us (1.0x), Avg.   107 us, Total. 106.7 us (0.0%)
[Performance] InitializeOnLoad Editor.SetupSoundbankSetting                                                                                                                              :        1 samples, Peak.  14.6 ms (1.0x), Avg.  14.6 ms, Total. 14.62 ms (0.1%)
[Performance] DidReloadScriptsTestRunnerWindow.CompilationCallback                                                                                                                       :        1 samples, Peak.   560 us (1.0x), Avg.   560 us, Total. 560.4 us (0.0%)
[Performance] DidReloadScriptsTestListCache.ScriptReloaded                                                                                                                               :        1 samples, Peak.   836 us (1.0x), Avg.   836 us, Total. 836.2 us (0.0%)
[Performance] DidReloadScriptsAdvancedDropdownWindow.OnScriptReload                                                                                                                      :        1 samples, Peak.   146 us (1.0x), Avg.   146 us, Total. 146.3 us (0.0%)
[Performance] AssemblyReloadEvents.afterAssemblyReload: UnityEditor.AdaptivePerformance.Editor.Metadata.AdaptivePerformancePackageMetadataStore.AssemblyReloadEvents_afterAssemblyReload :        1 samples, Peak.  1.96 ms (1.0x), Avg.  1.96 ms, Total. 1.957 ms (0.0%)
[Performance] AssemblyReloadEvents.afterAssemblyReload: UnityEditor.U2D.Animation.BoneGizmo.OnAfterAssemblyReload                                                                        :        1 samples, Peak.   487 us (1.0x), Avg.   487 us, Total. 487.3 us (0.0%)
[Performance] PaletteAssetModificationProcessor.OnWillSaveAssets                                                                                                                         :      137 samples, Peak.   105 us (32.4x), Avg.  3.26 us, Total. 446.0 us (0.0%)
[Performance] StateMacroSavedEvent.OnWillSaveAssets                                                                                                                                      :      137 samples, Peak.   158 us (29.7x), Avg.  5.34 us, Total. 731.7 us (0.0%)
[Performance] FlowMacroSavedEvent.OnWillSaveAssets                                                                                                                                       :      137 samples, Peak.  88.1 us (30.7x), Avg.  2.87 us, Total. 393.1 us (0.0%)
[Performance] AssetModificationProcessor.OnWillSaveAssets                                                                                                                                :      137 samples, Peak.   187 us (86.2x), Avg.  2.17 us, Total. 296.7 us (0.0%)
[Performance] BuilderAssetModificationProcessor.OnWillSaveAssets                                                                                                                         :      137 samples, Peak.   130 us (67.3x), Avg.  1.93 us, Total. 265.0 us (0.0%)
[Performance] TerrainModificationProcessor.OnWillSaveAssets                                                                                                                              :      137 samples, Peak.  56.3 ms (136.7x), Avg.   412 us, Total. 56.45 ms (0.3%)
[Performance] VersionControl.Task.Wait                                                                                                                                                   :        1 samples, Peak.   284 us (1.0x), Avg.   284 us, Total. 283.6 us (0.0%)
[Performance] TextureImporter.Import                                                                                                                                                     :       17 samples, Peak.  30.8 ms (12.7x), Avg.  2.43 ms, Total. 41.33 ms (0.2%)
[Performance] EditorResources.Load                                                                                                                                                       :       40 samples, Peak.  12.4 ms (32.4x), Avg.   383 us, Total. 15.30 ms (0.1%)
[Performance] SpritePostProcess.OnPostprocessSprites                                                                                                                                     :       17 samples, Peak.  6.20 ms (13.1x), Avg.   472 us, Total. 8.026 ms (0.0%)
[Performance] AssetDatabase.ImportAssets                                                                                                                                                 :       60 samples, Peak.  22.0 ms (32.7x), Avg.   672 us, Total. 40.34 ms (0.2%)
[Performance] TMPro_TexturePostProcessor.OnPostprocessAllAssets                                                                                                                          :      112 samples, Peak.  6.67 ms (49.6x), Avg.   134 us, Total. 15.05 ms (0.1%)
[Performance] AssetPostprocessor.OnPostprocessAllAssets                                                                                                                                  :      112 samples, Peak.   217 us (33.2x), Avg.  6.54 us, Total. 732.4 us (0.0%)
[Performance] BuilderAssetPostprocessor.OnPostprocessAllAssets                                                                                                                           :      112 samples, Peak.  9.94 ms (48.7x), Avg.   204 us, Total. 22.85 ms (0.1%)
[Performance] ArtifactBrowserPostProcessor.OnPostprocessAllAssets                                                                                                                        :      112 samples, Peak.   196 us (34.0x), Avg.  5.76 us, Total. 645.5 us (0.0%)
[Performance] AssetEvents.OnPostprocessAllAssets                                                                                                                                         :      224 samples, Peak.   120 us (36.7x), Avg.  3.28 us, Total. 733.9 us (0.0%)
[Performance] AudioMixerPostprocessor.OnPostprocessAllAssets                                                                                                                             :      112 samples, Peak.   181 us (34.3x), Avg.  5.28 us, Total. 591.3 us (0.0%)
[Performance] StyleCatalogPostProcessor.OnPostprocessAllAssets                                                                                                                           :      112 samples, Peak.  11.7 ms (54.1x), Avg.   217 us, Total. 24.26 ms (0.1%)
[Performance] BuildCatalog                                                                                                                                                               :        1 samples, Peak.  11.1 ms (1.0x), Avg.  11.1 ms, Total. 11.11 ms (0.1%)
[Performance] ModelImporterPostProcessor.OnPostprocessAllAssets                                                                                                                          :      112 samples, Peak.  1.78 ms (39.6x), Avg.  45.0 us, Total. 5.040 ms (0.0%)
[Performance] RetainedModeAssetPostprocessor.OnPostprocessAllAssets                                                                                                                      :      112 samples, Peak.  1.15 ms (38.9x), Avg.  29.4 us, Total. 3.297 ms (0.0%)
[Performance] AssetChangedListener.OnPostprocessAllAssets                                                                                                                                :      112 samples, Peak.  1.84 ms (40.9x), Avg.  44.9 us, Total. 5.032 ms (0.0%)
[Performance] SpeedTreePostProcessor.OnPostprocessAllAssets                                                                                                                              :      112 samples, Peak.  1.88 ms (46.4x), Avg.  40.6 us, Total. 4.546 ms (0.0%)
[Performance] TextAssetPostProcessor.OnPostprocessAllAssets                                                                                                                              :      112 samples, Peak.  2.10 ms (49.7x), Avg.  42.3 us, Total. 4.739 ms (0.0%)
[Performance] AssetProcessor.OnPostprocessAllAssets                                                                                                                                      :      336 samples, Peak.   377 us (56.5x), Avg.  6.68 us, Total. 2.243 ms (0.0%)
[Performance] SpriteLibraryAssetPostprocessor.OnPostprocessAllAssets                                                                                                                     :      112 samples, Peak.   132 us (29.8x), Avg.  4.44 us, Total. 497.5 us (0.0%)
[Performance] PSDImporterAssetPostProcessor.OnPostprocessAllAssets                                                                                                                       :      112 samples, Peak.  50.2 us (19.4x), Avg.  2.58 us, Total. 289.2 us (0.0%)
[Performance] PSDImportPostProcessor.OnPostprocessAllAssets                                                                                                                              :      112 samples, Peak.  68.9 us (21.8x), Avg.  3.16 us, Total. 354.3 us (0.0%)
[Performance] SpriteEditorTexturePostprocessor.OnPostprocessAllAssets                                                                                                                    :      112 samples, Peak.   140 us (6.2x), Avg.  22.5 us, Total. 2.522 ms (0.0%)
[Performance] SpriteShapeAssetPostProcessor.OnPostprocessAllAssets                                                                                                                       :      112 samples, Peak.   350 us (17.1x), Avg.  20.4 us, Total. 2.289 ms (0.0%)
[Performance] SyncVS.PostprocessSyncProject                                                                                                                                              :       56 samples, Peak.   345 ms (24.8x), Avg.  13.9 ms, Total. 778.4 ms (3.6%)
[Performance] EditorApplication.projectChanged: UnityEditor.Audio.MixerEffectDefinitionReloader.OnProjectChanged                                                                         :        9 samples, Peak.   429 us (6.1x), Avg.  70.0 us, Total. 630.3 us (0.0%)
[Performance] Selection.selectionChanged: UnityEditor.PackageManager.UI.Internal.SelectionProxy.OnSelectionChanged                                                                       :        3 samples, Peak.   455 us (2.9x), Avg.   157 us, Total. 470.3 us (0.0%)
[Performance] Selection.selectionChanged: UnityEditorInternal.EditMode.OnSelectionChange                                                                                                 :        3 samples, Peak.   171 us (3.0x), Avg.  57.4 us, Total. 172.2 us (0.0%)
[Performance] Selection.selectionChanged: UnityEditor.Tilemaps.GridPaintingState.OnSelectionChange                                                                                       :        3 samples, Peak.   155 us (2.9x), Avg.  52.6 us, Total. 157.7 us (0.0%)
[Performance] Selection.selectionChanged: UnityEditor.U2D.Animation.BoneGizmo.OnSelectionChanged                                                                                         :        3 samples, Peak.   666 us (2.9x), Avg.   231 us, Total. 691.9 us (0.0%)
[Performance] Selection.selectionChanged: UnityEditor.Tilemaps.SceneViewGridManager.UpdateCache                                                                                          :        3 samples, Peak.  1.96 ms (3.0x), Avg.   654 us, Total. 1.962 ms (0.0%)
[Performance] Selection.selectionChanged: UnityEditor.Tilemaps.SceneViewOpenTilePaletteHelper.SelectionChanged                                                                           :        3 samples, Peak.  46.7 us (2.3x), Avg.  20.0 us, Total. 59.96 us (0.0%)
[Performance] Application.ImportPackagesAndSetTemplateWhenCreatingProject                                                                                                                :        1 samples, Peak.  26.6 ms (1.0x), Avg.  26.6 ms, Total. 26.61 ms (0.1%)
[Performance] Application.SyncCurrentColorSpace                                                                                                                                          :        1 samples, Peak.   208 ns (1.0x), Avg.   208 ns, Total. 208.0 ns (0.0%)
[Performance] Application.OnUsbDevicesChanged                                                                                                                                            :        1 samples, Peak.  79.9 us (1.0x), Avg.  79.9 us, Total. 79.92 us (0.0%)
[Performance] Application.AssetInstanceCacheUpdate                                                                                                                                       :        1 samples, Peak.   209 ns (1.0x), Avg.   209 ns, Total. 209.0 ns (0.0%)
[Performance] Application.UnityExtensions.Initialize                                                                                                                                     :        1 samples, Peak.  3.71 ms (1.0x), Avg.  3.71 ms, Total. 3.714 ms (0.0%)
[Performance] CodeEditorProjectSync.SyncEditorProject                                                                                                                                    :        1 samples, Peak.  44.0 ms (1.0x), Avg.  44.0 ms, Total. 43.99 ms (0.2%)
[Performance] AssetDatabase.Refresh                                                                                                                                                      :        2 samples, Peak.  49.7 ms (1.1x), Avg.  46.5 ms, Total. 93.06 ms (0.4%)
[Performance] Application.ExecuteStartups                                                                                                                                                :        1 samples, Peak.  19.2 ms (1.0x), Avg.  19.2 ms, Total. 19.19 ms (0.1%)
[Performance] Menu.RegisterMenuInterface                                                                                                                                                 :       26 samples, Peak.  1.25 us (7.4x), Avg.   168 ns, Total. 4.376 us (0.0%)
[Performance] Gizmo.RebuildRenderers                                                                                                                                                     :        1 samples, Peak.  17.6 ms (1.0x), Avg.  17.6 ms, Total. 17.62 ms (0.1%)
[Performance] Gizmo.AddGizmoRenderers                                                                                                                                                    :      112 samples, Peak.   935 us (47.2x), Avg.  19.8 us, Total. 2.220 ms (0.0%)
[Performance] Application.editorInitializingProject                                                                                                                                      :        1 samples, Peak.  17.0 ms (1.0x), Avg.  17.0 ms, Total. 16.97 ms (0.1%)
[Performance] Application.InitializeMenu                                                                                                                                                 :        1 samples, Peak.  67.6 ms (1.0x), Avg.  67.6 ms, Total. 67.62 ms (0.3%)
[Performance] Menu.RebuildAll                                                                                                                                                            :        1 samples, Peak.  67.4 ms (1.0x), Avg.  67.4 ms, Total. 67.41 ms (0.3%)
[Performance] Menu.BuildRegisteredMenuInterfaces                                                                                                                                         :        1 samples, Peak.  67.1 ms (1.0x), Avg.  67.1 ms, Total. 67.09 ms (0.3%)
[Performance] Menu.FilterMenuItem                                                                                                                                                        :      681 samples, Peak.  33.4 ms (675.4x), Avg.  49.4 us, Total. 33.63 ms (0.2%)
[Performance] UpdateAllMenus                                                                                                                                                             :        1 samples, Peak.   253 us (1.0x), Avg.   253 us, Total. 252.6 us (0.0%)
[Performance] EditorSceneManager.sceneClosing: UnityEditor.SceneVisibilityManager.EditorSceneManagerOnSceneClosing                                                                       :        2 samples, Peak.   172 us (2.0x), Avg.  87.7 us, Total. 175.5 us (0.0%)
[Performance] GUIView.RepaintAll.PlayerLoopController                                                                                                                                    :        2 samples, Peak.   959 ns (1.6x), Avg.   604 ns, Total. 1.209 us (0.0%)
[Performance] EditorSceneManager.newSceneCreated: UnityEditor.SceneTemplate.SceneTemplateService.OnNewSceneCreated                                                                       :        2 samples, Peak.   156 us (2.0x), Avg.  78.7 us, Total. 157.5 us (0.0%)
[Performance] EditorSceneManager.newSceneCreated: UnityEditor.SceneVisibilityManager.EditorSceneManagerOnNewSceneCreated                                                                 :        2 samples, Peak.   106 us (1.9x), Avg.  56.4 us, Total. 112.9 us (0.0%)
[Performance] EditorSceneManager.newSceneCreated: UnityEditor.SceneManagement.StageNavigationManager.OnNewSceneCreated                                                                   :        2 samples, Peak.  34.3 us (1.9x), Avg.  17.6 us, Total. 35.21 us (0.0%)
[Performance] Application.InvokeFinishedLoadingProject                                                                                                                                   :        1 samples, Peak.  7.05 ms (1.0x), Avg.  7.05 ms, Total. 7.046 ms (0.0%)
[Performance] ProcessService.OnProjectLoaded                                                                                                                                             :        1 samples, Peak.  60.2 us (1.0x), Avg.  60.2 us, Total. 60.21 us (0.0%)
[Performance] Undo.willFlushUndoRecord: UnityEditor.DrivenRectTransformUndo.ForceUpdateCanvases                                                                                          :        1 samples, Peak.  64.6 us (1.0x), Avg.  64.6 us, Total. 64.58 us (0.0%)
[Performance] Inspector.InitOrRebuild                                                                                                                                                    :        1 samples, Peak.  13.5 ms (1.0x), Avg.  13.5 ms, Total. 13.54 ms (0.1%)
[Performance] EditorApplication.quitting: Unity.Burst.Editor.BurstLoader.OnEditorApplicationQuitting                                                                                     :        1 samples, Peak.  16.0 us (1.0x), Avg.  16.0 us, Total. 16.00 us (0.0%)
[Performance] EditorApplication.quitting: UnityEditor.Tilemaps.SceneViewGridManager.EditorQuitting                                                                                       :        1 samples, Peak.  40.8 us (1.0x), Avg.  40.8 us, Total. 40.83 us (0.0%)
[Performance] EditorApplication.quitting: callback in UnityEditor.TextCore.Text.EditorEventCallbacks                                                                                     :        1 samples, Peak.  13.8 ms (1.0x), Avg.  13.8 ms, Total. 13.76 ms (0.1%)
[Performance] EditorApplication.quitting: AkInitializer.OnApplicationQuit                                                                                                                :        1 samples, Peak.   113 us (1.0x), Avg.   113 us, Total. 113.2 us (0.0%)
[Performance] Application.Shutdown.PauseProfilerSession                                                                                                                                  :        1 samples, Peak.   260 us (1.0x), Avg.   260 us, Total. 260.3 us (0.0%)
[Performance] Application.Shutdown.PauseAssetImportWorkers                                                                                                                               :        1 samples, Peak.  72.5 us (1.0x), Avg.  72.5 us, Total. 72.46 us (0.0%)
[Performance] Application.Shutdown.SaveAssets                                                                                                                                            :        1 samples, Peak.  20.0 ms (1.0x), Avg.  20.0 ms, Total. 20.03 ms (0.1%)
[Performance] Application.Shutdown.CleanupRenderPipeline                                                                                                                                 :        1 samples, Peak.  1.33 us (1.0x), Avg.  1.33 us, Total. 1.334 us (0.0%)
[Performance] Application.Shutdown.StopPreloadManager                                                                                                                                    :        1 samples, Peak.  11.0 ms (1.0x), Avg.  11.0 ms, Total. 11.04 ms (0.1%)
[Performance] Application.Shutdown.DestroyWorld                                                                                                                                          :        1 samples, Peak.   200 ms (1.0x), Avg.   200 ms, Total. 199.6 ms (0.9%)
[Performance] Application.Shutdown.CleanupAfterLoad                                                                                                                                      :        1 samples, Peak.   136 ms (1.0x), Avg.   136 ms, Total. 136.3 ms (0.6%)
[Performance] Application.Shutdown.Progress                                                                                                                                              :        1 samples, Peak.  4.96 us (1.0x), Avg.  4.96 us, Total. 4.958 us (0.0%)
[Performance] Application.Shutdown.GICleanupManagers                                                                                                                                     :        1 samples, Peak.  3.60 ms (1.0x), Avg.  3.60 ms, Total. 3.600 ms (0.0%)
[Performance] Application.Shutdown.MenuCleanupClass                                                                                                                                      :        1 samples, Peak.  62.5 us (1.0x), Avg.  62.5 us, Total. 62.50 us (0.0%)
[Performance] Application.Shutdown.ADBSaveStateBeforeShutdown                                                                                                                            :        1 samples, Peak.  6.58 us (1.0x), Avg.  6.58 us, Total. 6.583 us (0.0%)
[Performance] Application.Shutdown.RemoteShutdown                                                                                                                                        :        1 samples, Peak.   667 ns (1.0x), Avg.   667 ns, Total. 667.0 ns (0.0%)
[Performance] Application.Shutdown.CleanupVCProvider                                                                                                                                     :        1 samples, Peak.  4.42 us (1.0x), Avg.  4.42 us, Total. 4.417 us (0.0%)
[Performance] Application.Shutdown.InputShutdown                                                                                                                                         :        1 samples, Peak.  10.0 us (1.0x), Avg.  10.0 us, Total. 10.04 us (0.0%)
[Performance] Application.Shutdown.GizmoManagerDestroy                                                                                                                                   :        1 samples, Peak.   803 us (1.0x), Avg.   803 us, Total. 802.6 us (0.0%)
[Performance] Application.Shutdown.ProfilerSession                                                                                                                                       :        1 samples, Peak.   532 us (1.0x), Avg.   532 us, Total. 531.9 us (0.0%)
[Performance] Application.Shutdown.ReleaseGfxWindowOnAllGUIViews                                                                                                                         :        1 samples, Peak.   750 ns (1.0x), Avg.   750 ns, Total. 750.0 ns (0.0%)
[Performance] Application.Shutdown.CleanupEngine                                                                                                                                         :        1 samples, Peak.  55.8 ms (1.0x), Avg.  55.8 ms, Total. 55.77 ms (0.3%)
[Performance] Application.Shutdown.CleanupAssetDatabase                                                                                                                                  :        1 samples, Peak.  6.32 ms (1.0x), Avg.  6.32 ms, Total. 6.324 ms (0.0%)
[Performance] Application.Shutdown.ScriptCompilationCleanUp                                                                                                                              :        1 samples, Peak.  21.8 us (1.0x), Avg.  21.8 us, Total. 21.83 us (0.0%)
[Performance] Application.Shutdown.DestroyJobSystem                                                                                                                                      :        1 samples, Peak.  49.0 us (1.0x), Avg.  49.0 us, Total. 49.04 us (0.0%)
[Performance] Application.Shutdown.CleanupPersistentManager                                                                                                                              :        1 samples, Peak.  1.15 ms (1.0x), Avg.  1.15 ms, Total. 1.154 ms (0.0%)
[Performance] Application.Shutdown.CleanupAsyncReadManager                                                                                                                               :        1 samples, Peak.  70.4 us (1.0x), Avg.  70.4 us, Total. 70.38 us (0.0%)
[Performance] Application.Shutdown.CleanupMono                                                                                                                                           :        1 samples, Peak.   217 ms (1.0x), Avg.   217 ms, Total. 217.0 ms (1.0%)
[Performance] Application.Shutdown.CleanupStdConverters                                                                                                                                  :        1 samples, Peak.  4.04 us (1.0x), Avg.  4.04 us, Total. 4.041 us (0.0%)
[Performance] Application.Shutdown.UnloadAllPlatformSupportModuleNativeDlls                                                                                                              :        1 samples, Peak.   500 ns (1.0x), Avg.   500 ns, Total. 500.0 ns (0.0%)
[Performance] Application.Shutdown.UnloadAllPlatformSupportNativeLibraries                                                                                                               :        1 samples, Peak.   167 ns (1.0x), Avg.   167 ns, Total. 167.0 ns (0.0%)
[Performance] Application.Shutdown.CleanupAutoDocumentation                                                                                                                              :        1 samples, Peak.   165 us (1.0x), Avg.   165 us, Total. 165.3 us (0.0%)
[Performance] Application.Shutdown.ShaderNameManagerDestroy                                                                                                                              :        1 samples, Peak.  23.0 us (1.0x), Avg.  23.0 us, Total. 23.00 us (0.0%)
[Performance] Application.Shutdown.CleanupCacheServer                                                                                                                                    :        1 samples, Peak.   167 ns (1.0x), Avg.   167 ns, Total. 167.0 ns (0.0%)
[Performance] Application.Shutdown.Virtualization_Shutdown                                                                                                                               :        1 samples, Peak.   333 ns (1.0x), Avg.   333 ns, Total. 333.0 ns (0.0%)
[Performance] Application.Shutdown.DevConnections                                                                                                                                        :        1 samples, Peak.   269 us (1.0x), Avg.   269 us, Total. 269.5 us (0.0%)
Exiting batchmode successfully now!
[Package Manager] Server::Kill -- Server was shutdown
